
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800c230  0800c230  0000d230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c430  0800c430  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c430  0800c430  0000d430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c438  0800c438  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c438  0800c438  0000d438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c43c  0800c43c  0000d43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c440  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b6fd  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000490d  00000000  00000000  000297b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fb  00000000  00000000  0002f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263df  00000000  00000000  000307fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fde4  00000000  00000000  00056bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b81  00000000  00000000  000769be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014753f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006468  00000000  00000000  00147584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0014d9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c218 	.word	0x0800c218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c218 	.word	0x0800c218

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <debug_log>:
#include <stdio.h>
#include <string.h>
#include "debug_log.h"
extern UART_HandleTypeDef huart2;

void debug_log(const char *fmt, ...) {
 80005ac:	b40f      	push	{r0, r1, r2, r3}
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b0a2      	sub	sp, #136	@ 0x88
 80005b2:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;

    va_start(args, fmt);
 80005b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80005b8:	603b      	str	r3, [r7, #0]
    vsnprintf(buf, sizeof(buf) - 3, fmt, args);  // Leave space for "\r\n\0"
 80005ba:	1d38      	adds	r0, r7, #4
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80005c2:	217d      	movs	r1, #125	@ 0x7d
 80005c4:	f00b f91e 	bl	800b804 <vsniprintf>
    va_end(args);

    // Append "\r\n" if there's room
    size_t len = strlen(buf);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (len < sizeof(buf) - 2) {
 80005d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005d8:	2b7d      	cmp	r3, #125	@ 0x7d
 80005da:	d819      	bhi.n	8000610 <debug_log+0x64>
        buf[len++] = '\r';
 80005dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80005e6:	3388      	adds	r3, #136	@ 0x88
 80005e8:	443b      	add	r3, r7
 80005ea:	220d      	movs	r2, #13
 80005ec:	f803 2c84 	strb.w	r2, [r3, #-132]
        buf[len++] = '\n';
 80005f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80005fa:	3388      	adds	r3, #136	@ 0x88
 80005fc:	443b      	add	r3, r7
 80005fe:	220a      	movs	r2, #10
 8000600:	f803 2c84 	strb.w	r2, [r3, #-132]
        buf[len] = '\0';
 8000604:	1d3a      	adds	r2, r7, #4
 8000606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800060a:	4413      	add	r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8000610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <debug_log+0x84>)
 800061e:	f006 fd62 	bl	80070e6 <HAL_UART_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3788      	adds	r7, #136	@ 0x88
 8000626:	46bd      	mov	sp, r7
 8000628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800062c:	b004      	add	sp, #16
 800062e:	4770      	bx	lr
 8000630:	200001a8 	.word	0x200001a8

08000634 <blink_dot>:
#include "main.h"  // for LD5_Pin

#define LED_PORT GPIOD
#define LED_PIN  LD5_Pin

static void blink_dot(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <blink_dot+0x2c>)
 8000640:	f002 feec 	bl	800341c <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000644:	20c8      	movs	r0, #200	@ 0xc8
 8000646:	f002 fc17 	bl	8002e78 <HAL_Delay>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <blink_dot+0x2c>)
 8000652:	f002 fee3 	bl	800341c <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000656:	20c8      	movs	r0, #200	@ 0xc8
 8000658:	f002 fc0e 	bl	8002e78 <HAL_Delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00

08000664 <blink_dash>:

static void blink_dash(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066e:	4809      	ldr	r0, [pc, #36]	@ (8000694 <blink_dash+0x30>)
 8000670:	f002 fed4 	bl	800341c <HAL_GPIO_WritePin>
    HAL_Delay(600);
 8000674:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000678:	f002 fbfe 	bl	8002e78 <HAL_Delay>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <blink_dash+0x30>)
 8000684:	f002 feca 	bl	800341c <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	@ 0xc8
 800068a:	f002 fbf5 	bl	8002e78 <HAL_Delay>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020c00 	.word	0x40020c00

08000698 <handle_rng_failure>:

void handle_rng_failure(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    debug_log("ERROR: RNG failure detected — halting.");
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <handle_rng_failure+0x50>)
 800069e:	f7ff ff85 	bl	80005ac <debug_log>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i
}
 80006a4:	bf00      	nop

    __disable_irq();  // Stop all interrupts

    while (1) {
        // S: ...
        blink_dot(); blink_dot(); blink_dot();
 80006a6:	f7ff ffc5 	bl	8000634 <blink_dot>
 80006aa:	f7ff ffc3 	bl	8000634 <blink_dot>
 80006ae:	f7ff ffc1 	bl	8000634 <blink_dot>

        HAL_Delay(600);  // Gap between letters
 80006b2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006b6:	f002 fbdf 	bl	8002e78 <HAL_Delay>

        // O: ---
        blink_dash(); blink_dash(); blink_dash();
 80006ba:	f7ff ffd3 	bl	8000664 <blink_dash>
 80006be:	f7ff ffd1 	bl	8000664 <blink_dash>
 80006c2:	f7ff ffcf 	bl	8000664 <blink_dash>

        HAL_Delay(600);  // Gap between letters
 80006c6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006ca:	f002 fbd5 	bl	8002e78 <HAL_Delay>

        // S: ...
        blink_dot(); blink_dot(); blink_dot();
 80006ce:	f7ff ffb1 	bl	8000634 <blink_dot>
 80006d2:	f7ff ffaf 	bl	8000634 <blink_dot>
 80006d6:	f7ff ffad 	bl	8000634 <blink_dot>

        HAL_Delay(1400);  // Gap between words (SOS loop)
 80006da:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80006de:	f002 fbcb 	bl	8002e78 <HAL_Delay>
        blink_dot(); blink_dot(); blink_dot();
 80006e2:	bf00      	nop
 80006e4:	e7df      	b.n	80006a6 <handle_rng_failure+0xe>
 80006e6:	bf00      	nop
 80006e8:	0800c230 	.word	0x0800c230

080006ec <get_random64>:
 *
 * This function pulls two 32-bit words from the RNG and combines them
 * into a single 64-bit result. Used for generating random shares or
 * randomness matrices in secure masking.
 */
uint64_t get_random64(void) {
 80006ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;

    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <get_random64+0x64>)
 80006fa:	f006 fbc5 	bl	8006e88 <HAL_RNG_GenerateRandomNumber>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <get_random64+0x1c>
        handle_rng_failure();  // Trap or log error
 8000704:	f7ff ffc8 	bl	8000698 <handle_rng_failure>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <get_random64+0x64>)
 800070e:	f006 fbbb 	bl	8006e88 <HAL_RNG_GenerateRandomNumber>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <get_random64+0x30>
        handle_rng_failure();  // Trap or log error
 8000718:	f7ff ffbe 	bl	8000698 <handle_rng_failure>
    }

    return ((uint64_t)r1 << 32) | r2;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	469a      	mov	sl, r3
 8000722:	4693      	mov	fp, r2
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	4653      	mov	r3, sl
 800072e:	2200      	movs	r2, #0
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	2000      	movs	r0, #0
 8000734:	460c      	mov	r4, r1
 8000736:	4605      	mov	r5, r0
 8000738:	ea42 0804 	orr.w	r8, r2, r4
 800073c:	ea43 0905 	orr.w	r9, r3, r5
 8000740:	4642      	mov	r2, r8
 8000742:	464b      	mov	r3, r9
}
 8000744:	4610      	mov	r0, r2
 8000746:	4619      	mov	r1, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000750:	20000140 	.word	0x20000140

08000754 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <_write+0x28>)
 800076c:	f006 fcbb 	bl	80070e6 <HAL_UART_Transmit>
    return len;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001a8 	.word	0x200001a8

08000780 <print_hex_inline>:

static const uint8_t test_input[] = {'a', 'b', 'c'};

#define SHAKE_OUTPUT_LEN 64

static void print_hex_inline(const char *label, const uint8_t *data, size_t len) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b0d2      	sub	sp, #328	@ 0x148
 8000784:	af00      	add	r7, sp, #0
 8000786:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800078a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000794:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000798:	6019      	str	r1, [r3, #0]
 800079a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800079e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80007a2:	601a      	str	r2, [r3, #0]
    char buf[300] = {0};
 80007a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80007a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80007ac:	4618      	mov	r0, r3
 80007ae:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f00b f833 	bl	800b820 <memset>
    size_t offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    offset += snprintf(buf + offset, sizeof(buf) - offset, "%s: ", label);
 80007c0:	f107 0214 	add.w	r2, r7, #20
 80007c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007c8:	18d0      	adds	r0, r2, r3
 80007ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007ce:	f5c3 7196 	rsb	r1, r3, #300	@ 0x12c
 80007d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80007d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <print_hex_inline+0xec>)
 80007de:	f00a ff69 	bl	800b6b4 <sniprintf>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007ea:	4413      	add	r3, r2
 80007ec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    for (size_t i = 0; i < len && offset < sizeof(buf) - 4; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80007f6:	e020      	b.n	800083a <print_hex_inline+0xba>
        offset += snprintf(buf + offset, sizeof(buf) - offset, "%02X", data[i]);
 80007f8:	f107 0214 	add.w	r2, r7, #20
 80007fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000800:	18d0      	adds	r0, r2, r3
 8000802:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000806:	f5c3 7196 	rsb	r1, r3, #300	@ 0x12c
 800080a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800080e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <print_hex_inline+0xf0>)
 800081e:	f00a ff49 	bl	800b6b4 <sniprintf>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800082a:	4413      	add	r3, r2
 800082c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    for (size_t i = 0; i < len && offset < sizeof(buf) - 4; i++) {
 8000830:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000834:	3301      	adds	r3, #1
 8000836:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800083a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800083e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000842:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d204      	bcs.n	8000856 <print_hex_inline+0xd6>
 800084c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000850:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8000854:	d3d0      	bcc.n	80007f8 <print_hex_inline+0x78>
    }

    debug_log("%s", buf);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <print_hex_inline+0xf4>)
 800085e:	f7ff fea5 	bl	80005ac <debug_log>
}
 8000862:	bf00      	nop
 8000864:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0800c25c 	.word	0x0800c25c
 8000870:	0800c264 	.word	0x0800c264
 8000874:	0800c26c 	.word	0x0800c26c

08000878 <init_cycle_counter>:

static void init_cycle_counter(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <init_cycle_counter+0x2c>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <init_cycle_counter+0x2c>)
 8000882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000886:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <init_cycle_counter+0x30>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <init_cycle_counter+0x30>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0;
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <init_cycle_counter+0x30>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000edf0 	.word	0xe000edf0
 80008a8:	e0001000 	.word	0xe0001000

080008ac <run_keccak_benchmarks>:
    masked_shake256(out_shake256, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
    end = HAL_GetTick();
    print_hex_inline("SHAKE256 (64 bytes)", out_shake256, SHAKE_OUTPUT_LEN);
    debug_log("Time: %lu ms\r\n", end - start);
}
void run_keccak_benchmarks(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0cc      	sub	sp, #304	@ 0x130
 80008b0:	af00      	add	r7, sp, #0
    init_cycle_counter();
 80008b2:	f7ff ffe1 	bl	8000878 <init_cycle_counter>

    uint32_t start, end;

    uint8_t out_224[28];
    DWT->CYCCNT = 0;
 80008b6:	4b4f      	ldr	r3, [pc, #316]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
    masked_sha3_224(out_224, test_input, sizeof(test_input));
 80008bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008c0:	2203      	movs	r2, #3
 80008c2:	494d      	ldr	r1, [pc, #308]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 ff57 	bl	8002778 <masked_sha3_224>
    end = DWT->CYCCNT;
 80008ca:	4b4a      	ldr	r3, [pc, #296]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-224", out_224, sizeof(out_224));
 80008d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80008d6:	221c      	movs	r2, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4848      	ldr	r0, [pc, #288]	@ (80009fc <run_keccak_benchmarks+0x150>)
 80008dc:	f7ff ff50 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 80008e0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80008e4:	4846      	ldr	r0, [pc, #280]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 80008e6:	f7ff fe61 	bl	80005ac <debug_log>

    uint8_t out_256[32];
    DWT->CYCCNT = 0;
 80008ea:	4b42      	ldr	r3, [pc, #264]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
    masked_sha3_256(out_256, test_input, sizeof(test_input));
 80008f0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80008f4:	2203      	movs	r2, #3
 80008f6:	4940      	ldr	r1, [pc, #256]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 80008f8:	4618      	mov	r0, r3
 80008fa:	f001 ff51 	bl	80027a0 <masked_sha3_256>
    end = DWT->CYCCNT;
 80008fe:	4b3d      	ldr	r3, [pc, #244]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-256", out_256, sizeof(out_256));
 8000906:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 800090a:	2220      	movs	r2, #32
 800090c:	4619      	mov	r1, r3
 800090e:	483d      	ldr	r0, [pc, #244]	@ (8000a04 <run_keccak_benchmarks+0x158>)
 8000910:	f7ff ff36 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000914:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000918:	4839      	ldr	r0, [pc, #228]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 800091a:	f7ff fe47 	bl	80005ac <debug_log>

    uint8_t out_384[48];
    DWT->CYCCNT = 0;
 800091e:	4b35      	ldr	r3, [pc, #212]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
    masked_sha3_384(out_384, test_input, sizeof(test_input));
 8000924:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000928:	2203      	movs	r2, #3
 800092a:	4933      	ldr	r1, [pc, #204]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 800092c:	4618      	mov	r0, r3
 800092e:	f001 ff4b 	bl	80027c8 <masked_sha3_384>
    end = DWT->CYCCNT;
 8000932:	4b30      	ldr	r3, [pc, #192]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-384", out_384, sizeof(out_384));
 800093a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	4619      	mov	r1, r3
 8000942:	4831      	ldr	r0, [pc, #196]	@ (8000a08 <run_keccak_benchmarks+0x15c>)
 8000944:	f7ff ff1c 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000948:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 800094c:	482c      	ldr	r0, [pc, #176]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 800094e:	f7ff fe2d 	bl	80005ac <debug_log>

    uint8_t out_512[64];
    DWT->CYCCNT = 0;
 8000952:	4b28      	ldr	r3, [pc, #160]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
    masked_sha3_512(out_512, test_input, sizeof(test_input));
 8000958:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800095c:	2203      	movs	r2, #3
 800095e:	4926      	ldr	r1, [pc, #152]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 8000960:	4618      	mov	r0, r3
 8000962:	f001 ff45 	bl	80027f0 <masked_sha3_512>
    end = DWT->CYCCNT;
 8000966:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-512", out_512, sizeof(out_512));
 800096e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000972:	2240      	movs	r2, #64	@ 0x40
 8000974:	4619      	mov	r1, r3
 8000976:	4825      	ldr	r0, [pc, #148]	@ (8000a0c <run_keccak_benchmarks+0x160>)
 8000978:	f7ff ff02 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 800097c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 8000982:	f7ff fe13 	bl	80005ac <debug_log>

    uint8_t out_shake128[SHAKE_OUTPUT_LEN];
    DWT->CYCCNT = 0;
 8000986:	4b1b      	ldr	r3, [pc, #108]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
    masked_shake128(out_shake128, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 800098c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000990:	2303      	movs	r3, #3
 8000992:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 8000994:	2140      	movs	r1, #64	@ 0x40
 8000996:	f001 ff3f 	bl	8002818 <masked_shake128>
    end = DWT->CYCCNT;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHAKE128", out_shake128, SHAKE_OUTPUT_LEN);
 80009a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80009a6:	2240      	movs	r2, #64	@ 0x40
 80009a8:	4619      	mov	r1, r3
 80009aa:	4819      	ldr	r0, [pc, #100]	@ (8000a10 <run_keccak_benchmarks+0x164>)
 80009ac:	f7ff fee8 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 80009b0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80009b4:	4812      	ldr	r0, [pc, #72]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 80009b6:	f7ff fdf9 	bl	80005ac <debug_log>

    uint8_t out_shake256[SHAKE_OUTPUT_LEN];
    DWT->CYCCNT = 0;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
    masked_shake256(out_shake256, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 80009c0:	4638      	mov	r0, r7
 80009c2:	2303      	movs	r3, #3
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <run_keccak_benchmarks+0x14c>)
 80009c6:	2140      	movs	r1, #64	@ 0x40
 80009c8:	f001 ff3b 	bl	8002842 <masked_shake256>
    end = DWT->CYCCNT;
 80009cc:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <run_keccak_benchmarks+0x148>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHAKE256", out_shake256, SHAKE_OUTPUT_LEN);
 80009d4:	463b      	mov	r3, r7
 80009d6:	2240      	movs	r2, #64	@ 0x40
 80009d8:	4619      	mov	r1, r3
 80009da:	480e      	ldr	r0, [pc, #56]	@ (8000a14 <run_keccak_benchmarks+0x168>)
 80009dc:	f7ff fed0 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 80009e0:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80009e4:	4806      	ldr	r0, [pc, #24]	@ (8000a00 <run_keccak_benchmarks+0x154>)
 80009e6:	f7ff fde1 	bl	80005ac <debug_log>
}
 80009ea:	bf00      	nop
 80009ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	e0001000 	.word	0xe0001000
 80009f8:	0800c304 	.word	0x0800c304
 80009fc:	0800c270 	.word	0x0800c270
 8000a00:	0800c2d8 	.word	0x0800c2d8
 8000a04:	0800c28c 	.word	0x0800c28c
 8000a08:	0800c298 	.word	0x0800c298
 8000a0c:	0800c2a4 	.word	0x0800c2a4
 8000a10:	0800c2e8 	.word	0x0800c2e8
 8000a14:	0800c2f4 	.word	0x0800c2f4

08000a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a1e:	f002 f9b9 	bl	8002d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a22:	f000 f833 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a26:	f000 f96d 	bl	8000d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a2a:	f000 f899 	bl	8000b60 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a2e:	f000 f8c5 	bl	8000bbc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a32:	f000 f907 	bl	8000c44 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000a36:	f00a f8ff 	bl	800ac38 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8000a3a:	f000 f8ef 	bl	8000c1c <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 f937 	bl	8000cb0 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <main+0x68>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8000a80 <main+0x68>)
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a50:	6353      	str	r3, [r2, #52]	@ 0x34
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <main+0x68>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8000a5e:	4809      	ldr	r0, [pc, #36]	@ (8000a84 <main+0x6c>)
 8000a60:	f006 f9e8 	bl	8006e34 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <main+0x70>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6898      	ldr	r0, [r3, #8]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	2202      	movs	r2, #2
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f00a fd6c 	bl	800b54c <setvbuf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // run_all_hash_tests();
	  run_keccak_benchmarks();
 8000a74:	f7ff ff1a 	bl	80008ac <run_keccak_benchmarks>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a78:	f00a f904 	bl	800ac84 <MX_USB_HOST_Process>
	  run_keccak_benchmarks();
 8000a7c:	bf00      	nop
 8000a7e:	e7f9      	b.n	8000a74 <main+0x5c>
 8000a80:	40023800 	.word	0x40023800
 8000a84:	20000140 	.word	0x20000140
 8000a88:	20000038 	.word	0x20000038

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	@ 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	@ 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00a fec0 	bl	800b820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab8:	4a27      	ldr	r2, [pc, #156]	@ (8000b58 <SystemClock_Config+0xcc>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac0:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <SystemClock_Config+0xcc>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a21      	ldr	r2, [pc, #132]	@ (8000b5c <SystemClock_Config+0xd0>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <SystemClock_Config+0xd0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000afc:	2308      	movs	r3, #8
 8000afe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b0a:	2307      	movs	r3, #7
 8000b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 fbb4 	bl	8006280 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b1e:	f000 f9ef 	bl	8000f00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b22:	230f      	movs	r3, #15
 8000b24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b2e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2105      	movs	r1, #5
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 fe15 	bl	8006770 <HAL_RCC_ClockConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b4c:	f000 f9d8 	bl	8000f00 <Error_Handler>
  }
}
 8000b50:	bf00      	nop
 8000b52:	3750      	adds	r7, #80	@ 0x50
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40007000 	.word	0x40007000

08000b60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b66:	4a13      	ldr	r2, [pc, #76]	@ (8000bb4 <MX_I2C1_Init+0x54>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b6c:	4a12      	ldr	r2, [pc, #72]	@ (8000bb8 <MX_I2C1_Init+0x58>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b7e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_I2C1_Init+0x50>)
 8000b9e:	f004 fd8b 	bl	80056b8 <HAL_I2C_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ba8:	f000 f9aa 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000a4 	.word	0x200000a4
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	000186a0 	.word	0x000186a0

08000bbc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bc2:	4a14      	ldr	r2, [pc, #80]	@ (8000c14 <MX_I2S3_Init+0x58>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bcc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000be0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000be4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <MX_I2S3_Init+0x5c>)
 8000be6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bee:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <MX_I2S3_Init+0x54>)
 8000bfc:	f004 fea0 	bl	8005940 <HAL_I2S_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c06:	f000 f97b 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000f8 	.word	0x200000f8
 8000c14:	40003c00 	.word	0x40003c00
 8000c18:	00017700 	.word	0x00017700

08000c1c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c20:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_RNG_Init+0x20>)
 8000c22:	4a07      	ldr	r2, [pc, #28]	@ (8000c40 <MX_RNG_Init+0x24>)
 8000c24:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_RNG_Init+0x20>)
 8000c28:	f006 f904 	bl	8006e34 <HAL_RNG_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c32:	f000 f965 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000140 	.word	0x20000140
 8000c40:	50060800 	.word	0x50060800

08000c44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c48:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_SPI1_Init+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c90:	220a      	movs	r2, #10
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_SPI1_Init+0x64>)
 8000c96:	f006 f94d 	bl	8006f34 <HAL_SPI_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ca0:	f000 f92e 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000150 	.word	0x20000150
 8000cac:	40013000 	.word	0x40013000

08000cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <MX_USART2_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_USART2_UART_Init+0x4c>)
 8000ce8:	f006 f9ad 	bl	8007046 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 f905 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001a8 	.word	0x200001a8
 8000d00:	40004400 	.word	0x40004400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	@ 0x30
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
 8000d1e:	4b72      	ldr	r3, [pc, #456]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a71      	ldr	r2, [pc, #452]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b68      	ldr	r3, [pc, #416]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b64      	ldr	r3, [pc, #400]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a63      	ldr	r2, [pc, #396]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b61      	ldr	r3, [pc, #388]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b5d      	ldr	r3, [pc, #372]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a5c      	ldr	r2, [pc, #368]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b56      	ldr	r3, [pc, #344]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a55      	ldr	r2, [pc, #340]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b53      	ldr	r3, [pc, #332]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a4e      	ldr	r2, [pc, #312]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000db0:	f043 0308 	orr.w	r3, r3, #8
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ee8 <MX_GPIO_Init+0x1e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0308 	and.w	r3, r3, #8
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	4849      	ldr	r0, [pc, #292]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000dc8:	f002 fb28 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4847      	ldr	r0, [pc, #284]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000dd2:	f002 fb23 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ddc:	4845      	ldr	r0, [pc, #276]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000dde:	f002 fb1d 	bl	800341c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000de2:	2308      	movs	r3, #8
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	483c      	ldr	r0, [pc, #240]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000dfa:	f002 f973 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4836      	ldr	r0, [pc, #216]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000e16:	f002 f965 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	4619      	mov	r1, r3
 8000e34:	482e      	ldr	r0, [pc, #184]	@ (8000ef0 <MX_GPIO_Init+0x1ec>)
 8000e36:	f002 f955 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e3e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	482a      	ldr	r0, [pc, #168]	@ (8000ef8 <MX_GPIO_Init+0x1f4>)
 8000e50:	f002 f948 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e54:	2304      	movs	r3, #4
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4825      	ldr	r0, [pc, #148]	@ (8000efc <MX_GPIO_Init+0x1f8>)
 8000e68:	f002 f93c 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	4619      	mov	r1, r3
 8000e88:	481c      	ldr	r0, [pc, #112]	@ (8000efc <MX_GPIO_Init+0x1f8>)
 8000e8a:	f002 f92b 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e8e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e92:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000ea8:	f002 f91c 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000eac:	2320      	movs	r3, #32
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_GPIO_Init+0x1f0>)
 8000ec0:	f002 f910 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ec8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ed2:	f107 031c 	add.w	r3, r7, #28
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_GPIO_Init+0x1e8>)
 8000eda:	f002 f903 	bl	80030e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	@ 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020c00 	.word	0x40020c00
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40020400 	.word	0x40020400

08000f00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f04:	b672      	cpsid	i
}
 8000f06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <Error_Handler+0x8>

08000f0c <fill_random_matrix>:
    debug_log("Random matrix (3x3) filled with 3 random64 calls.\r\n");
#endif
}

#elif MASKING_N == 4
void fill_random_matrix(uint64_t r[4][4]) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08e      	sub	sp, #56	@ 0x38
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    uint64_t r01 = get_random64();
 8000f14:	f7ff fbea 	bl	80006ec <get_random64>
 8000f18:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
    uint64_t r02 = get_random64();
 8000f1c:	f7ff fbe6 	bl	80006ec <get_random64>
 8000f20:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
    uint64_t r03 = get_random64();
 8000f24:	f7ff fbe2 	bl	80006ec <get_random64>
 8000f28:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t r12 = get_random64();
 8000f2c:	f7ff fbde 	bl	80006ec <get_random64>
 8000f30:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t r13 = get_random64();
 8000f34:	f7ff fbda 	bl	80006ec <get_random64>
 8000f38:	e9c7 0104 	strd	r0, r1, [r7, #16]
    uint64_t r23 = get_random64();
 8000f3c:	f7ff fbd6 	bl	80006ec <get_random64>
 8000f40:	e9c7 0102 	strd	r0, r1, [r7, #8]

    r[0][0] = 0;
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	f04f 0200 	mov.w	r2, #0
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	e9c1 2300 	strd	r2, r3, [r1]
    r[0][1] = r01;  r[1][0] = r01;
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f58:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f103 0120 	add.w	r1, r3, #32
 8000f62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f66:	e9c1 2300 	strd	r2, r3, [r1]
    r[0][2] = r02;  r[2][0] = r02;
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000f70:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000f7e:	e9c1 2300 	strd	r2, r3, [r1]
    r[0][3] = r03;  r[3][0] = r03;
 8000f82:	6879      	ldr	r1, [r7, #4]
 8000f84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f88:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000f96:	e9c1 2300 	strd	r2, r3, [r1]

    r[1][1] = 0;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 0120 	add.w	r1, r3, #32
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 0300 	mov.w	r3, #0
 8000fa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
    r[1][2] = r12;  r[2][1] = r12;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f103 0120 	add.w	r1, r3, #32
 8000fb2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fb6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    r[1][3] = r13;  r[3][1] = r13;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f103 0120 	add.w	r1, r3, #32
 8000fce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fd2:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe0:	e9c1 2302 	strd	r2, r3, [r1, #8]

    r[2][2] = 0;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	e9c1 2304 	strd	r2, r3, [r1, #16]
    r[2][3] = r23;  r[3][2] = r23;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8000ffc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001000:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800100a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800100e:	e9c1 2304 	strd	r2, r3, [r1, #16]

    r[3][3] = 0;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	f04f 0300 	mov.w	r3, #0
 8001020:	e9c1 2306 	strd	r2, r3, [r1, #24]

#ifdef DEBUG_LOG_VERBOSE
    debug_log("Random matrix (4x4) filled with 6 random64 calls.\r\n");
#endif
}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	@ 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <masked_xor>:
 * @param a First masked operand
 * @param b Second masked operand
 */
void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800102c:	b4b0      	push	{r4, r5, r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	e018      	b.n	8001070 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	4413      	add	r3, r2
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	ea80 0402 	eor.w	r4, r0, r2
 800105a:	ea81 0503 	eor.w	r5, r1, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d9e3      	bls.n	800103e <masked_xor+0x12>
    }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	bcb0      	pop	{r4, r5, r7}
 8001080:	4770      	bx	lr

08001082 <masked_and>:
}
#elif MASKING_N == 4
void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[4][4]) {
 8001082:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001086:	b0da      	sub	sp, #360	@ 0x168
 8001088:	af00      	add	r7, sp, #0
 800108a:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
 800108e:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8001092:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8001096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    // Diagonal terms
    out->share[0] = a->share[0] & b->share[0];
 800109a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800109e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	ea00 0402 	and.w	r4, r0, r2
 80010ae:	ea01 0503 	and.w	r5, r1, r3
 80010b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010b6:	e9c3 4500 	strd	r4, r5, [r3]
    out->share[1] = a->share[1] & b->share[1];
 80010ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010be:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010ca:	ea00 0802 	and.w	r8, r0, r2
 80010ce:	ea01 0903 	and.w	r9, r1, r3
 80010d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010d6:	e9c3 8902 	strd	r8, r9, [r3, #8]
    out->share[2] = a->share[2] & b->share[2];
 80010da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80010e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80010ea:	ea00 0402 	and.w	r4, r0, r2
 80010ee:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80010f2:	400b      	ands	r3, r1
 80010f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80010f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80010fc:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8001100:	e9c3 1204 	strd	r1, r2, [r3, #16]
    out->share[3] = a->share[3] & b->share[3];
 8001104:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001108:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800110c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001110:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001114:	ea00 0402 	and.w	r4, r0, r2
 8001118:	f8c7 4118 	str.w	r4, [r7, #280]	@ 0x118
 800111c:	400b      	ands	r3, r1
 800111e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001122:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001126:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800112a:	e9c3 1206 	strd	r1, r2, [r3, #24]

    // Cross terms with randomness
    uint64_t t01 = (a->share[0] & b->share[1]) ^ (a->share[1] & b->share[0]);
 800112e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800113a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800113e:	ea00 0402 	and.w	r4, r0, r2
 8001142:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8001146:	400b      	ands	r3, r1
 8001148:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800114c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001150:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001154:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115c:	ea00 0a02 	and.w	sl, r0, r2
 8001160:	ea01 0b03 	and.w	fp, r1, r3
 8001164:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8001168:	460b      	mov	r3, r1
 800116a:	ea83 030a 	eor.w	r3, r3, sl
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001170:	4613      	mov	r3, r2
 8001172:	ea83 030b 	eor.w	r3, r3, fp
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001178:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800117c:	e9c7 3458 	strd	r3, r4, [r7, #352]	@ 0x160
    out->share[0] ^= r[0][1];
 8001180:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800118c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001190:	ea80 0402 	eor.w	r4, r0, r2
 8001194:	f8c7 4108 	str.w	r4, [r7, #264]	@ 0x108
 8001198:	404b      	eors	r3, r1
 800119a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800119e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011a2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80011a6:	e9c3 1200 	strd	r1, r2, [r3]
    out->share[1] ^= t01 ^ r[0][1];
 80011aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011ae:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80011b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011b6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011ba:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 80011be:	ea80 0602 	eor.w	r6, r0, r2
 80011c2:	f8c7 6100 	str.w	r6, [r7, #256]	@ 0x100
 80011c6:	404b      	eors	r3, r1
 80011c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80011cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80011d0:	460b      	mov	r3, r1
 80011d2:	4063      	eors	r3, r4
 80011d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80011d8:	4613      	mov	r3, r2
 80011da:	406b      	eors	r3, r5
 80011dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80011e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80011e4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80011e8:	e9c3 1202 	strd	r1, r2, [r3, #8]

    uint64_t t02 = (a->share[0] & b->share[2]) ^ (a->share[2] & b->share[0]);
 80011ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80011f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80011f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011fc:	ea00 0402 	and.w	r4, r0, r2
 8001200:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8001204:	400b      	ands	r3, r1
 8001206:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800120a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800120e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001212:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	ea00 0402 	and.w	r4, r0, r2
 800121e:	f8c7 40e8 	str.w	r4, [r7, #232]	@ 0xe8
 8001222:	400b      	ands	r3, r1
 8001224:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001228:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800122c:	4623      	mov	r3, r4
 800122e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8001232:	4602      	mov	r2, r0
 8001234:	4053      	eors	r3, r2
 8001236:	623b      	str	r3, [r7, #32]
 8001238:	462b      	mov	r3, r5
 800123a:	460a      	mov	r2, r1
 800123c:	4053      	eors	r3, r2
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001240:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001244:	e9c7 3456 	strd	r3, r4, [r7, #344]	@ 0x158
    out->share[0] ^= r[0][2];
 8001248:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001254:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001258:	ea80 0402 	eor.w	r4, r0, r2
 800125c:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 8001260:	404b      	eors	r3, r1
 8001262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001266:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800126a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800126e:	e9c3 1200 	strd	r1, r2, [r3]
    out->share[2] ^= t02 ^ r[0][2];
 8001272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001276:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800127a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800127e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001282:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8001286:	ea80 0602 	eor.w	r6, r0, r2
 800128a:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 800128e:	404b      	eors	r3, r1
 8001290:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001294:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001298:	460b      	mov	r3, r1
 800129a:	4063      	eors	r3, r4
 800129c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80012a0:	4613      	mov	r3, r2
 80012a2:	406b      	eors	r3, r5
 80012a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80012ac:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80012b0:	e9c3 1204 	strd	r1, r2, [r3, #16]

    uint64_t t03 = (a->share[0] & b->share[3]) ^ (a->share[3] & b->share[0]);
 80012b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012c4:	ea00 0402 	and.w	r4, r0, r2
 80012c8:	f8c7 40c8 	str.w	r4, [r7, #200]	@ 0xc8
 80012cc:	400b      	ands	r3, r1
 80012ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80012d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012d6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012da:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	ea00 0402 	and.w	r4, r0, r2
 80012e6:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 80012ea:	400b      	ands	r3, r1
 80012ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012f0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80012f4:	4623      	mov	r3, r4
 80012f6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80012fa:	4602      	mov	r2, r0
 80012fc:	4053      	eors	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	462b      	mov	r3, r5
 8001302:	460a      	mov	r2, r1
 8001304:	4053      	eors	r3, r2
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800130c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
    out->share[0] ^= r[0][3];
 8001310:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001314:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800131c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001320:	ea80 0402 	eor.w	r4, r0, r2
 8001324:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8001328:	404b      	eors	r3, r1
 800132a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800132e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001332:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8001336:	e9c3 1200 	strd	r1, r2, [r3]
    out->share[3] ^= t03 ^ r[0][3];
 800133a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800133e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001342:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001346:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800134a:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800134e:	ea80 0602 	eor.w	r6, r0, r2
 8001352:	f8c7 60b0 	str.w	r6, [r7, #176]	@ 0xb0
 8001356:	404b      	eors	r3, r1
 8001358:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800135c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8001360:	460b      	mov	r3, r1
 8001362:	4063      	eors	r3, r4
 8001364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001368:	4613      	mov	r3, r2
 800136a:	406b      	eors	r3, r5
 800136c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001370:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001374:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001378:	e9c3 1206 	strd	r1, r2, [r3, #24]

    uint64_t t12 = (a->share[1] & b->share[2]) ^ (a->share[2] & b->share[1]);
 800137c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001380:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001384:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001388:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800138c:	ea00 0402 	and.w	r4, r0, r2
 8001390:	f8c7 40a0 	str.w	r4, [r7, #160]	@ 0xa0
 8001394:	400b      	ands	r3, r1
 8001396:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800139a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800139e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80013a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80013a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013aa:	ea00 0402 	and.w	r4, r0, r2
 80013ae:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80013b2:	400b      	ands	r3, r1
 80013b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80013b8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80013bc:	4623      	mov	r3, r4
 80013be:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80013c2:	4602      	mov	r2, r0
 80013c4:	4053      	eors	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	462b      	mov	r3, r5
 80013ca:	460a      	mov	r2, r1
 80013cc:	4053      	eors	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80013d4:	e9c7 3452 	strd	r3, r4, [r7, #328]	@ 0x148
    out->share[1] ^= r[1][2];
 80013d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80013e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80013e4:	3320      	adds	r3, #32
 80013e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80013ea:	ea80 0402 	eor.w	r4, r0, r2
 80013ee:	f8c7 4090 	str.w	r4, [r7, #144]	@ 0x90
 80013f2:	404b      	eors	r3, r1
 80013f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80013f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80013fc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8001400:	e9c3 1202 	strd	r1, r2, [r3, #8]
    out->share[2] ^= t12 ^ r[1][2];
 8001404:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001408:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800140c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001410:	3320      	adds	r3, #32
 8001412:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001416:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800141a:	ea80 0602 	eor.w	r6, r0, r2
 800141e:	f8c7 6088 	str.w	r6, [r7, #136]	@ 0x88
 8001422:	404b      	eors	r3, r1
 8001424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001428:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800142c:	460b      	mov	r3, r1
 800142e:	4063      	eors	r3, r4
 8001430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001434:	4613      	mov	r3, r2
 8001436:	406b      	eors	r3, r5
 8001438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800143c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001440:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8001444:	e9c3 1204 	strd	r1, r2, [r3, #16]

    uint64_t t13 = (a->share[1] & b->share[3]) ^ (a->share[3] & b->share[1]);
 8001448:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800144c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001450:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001454:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001458:	ea00 0402 	and.w	r4, r0, r2
 800145c:	67bc      	str	r4, [r7, #120]	@ 0x78
 800145e:	400b      	ands	r3, r1
 8001460:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001462:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001466:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800146a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800146e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001472:	ea00 0402 	and.w	r4, r0, r2
 8001476:	673c      	str	r4, [r7, #112]	@ 0x70
 8001478:	400b      	ands	r3, r1
 800147a:	677b      	str	r3, [r7, #116]	@ 0x74
 800147c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001480:	4623      	mov	r3, r4
 8001482:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001486:	4602      	mov	r2, r0
 8001488:	4053      	eors	r3, r2
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	462b      	mov	r3, r5
 800148e:	460a      	mov	r2, r1
 8001490:	4053      	eors	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001498:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
    out->share[1] ^= r[1][3];
 800149c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014a8:	3320      	adds	r3, #32
 80014aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014ae:	ea80 0402 	eor.w	r4, r0, r2
 80014b2:	66bc      	str	r4, [r7, #104]	@ 0x68
 80014b4:	404b      	eors	r3, r1
 80014b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80014b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80014c0:	e9c3 1202 	strd	r1, r2, [r3, #8]
    out->share[3] ^= t13 ^ r[1][3];
 80014c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014c8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80014cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014d0:	3320      	adds	r3, #32
 80014d2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80014d6:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 80014da:	ea80 0602 	eor.w	r6, r0, r2
 80014de:	663e      	str	r6, [r7, #96]	@ 0x60
 80014e0:	404b      	eors	r3, r1
 80014e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80014e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80014e8:	460b      	mov	r3, r1
 80014ea:	4063      	eors	r3, r4
 80014ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014ee:	4613      	mov	r3, r2
 80014f0:	406b      	eors	r3, r5
 80014f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80014f8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80014fc:	e9c3 1206 	strd	r1, r2, [r3, #24]

    uint64_t t23 = (a->share[2] & b->share[3]) ^ (a->share[3] & b->share[2]);
 8001500:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001504:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001508:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800150c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001510:	ea00 0402 	and.w	r4, r0, r2
 8001514:	653c      	str	r4, [r7, #80]	@ 0x50
 8001516:	400b      	ands	r3, r1
 8001518:	657b      	str	r3, [r7, #84]	@ 0x54
 800151a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800151e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001522:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800152a:	ea00 0402 	and.w	r4, r0, r2
 800152e:	64bc      	str	r4, [r7, #72]	@ 0x48
 8001530:	400b      	ands	r3, r1
 8001532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001534:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001538:	4623      	mov	r3, r4
 800153a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800153e:	4602      	mov	r2, r0
 8001540:	4053      	eors	r3, r2
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	462b      	mov	r3, r5
 8001546:	460a      	mov	r2, r1
 8001548:	4053      	eors	r3, r2
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001550:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
    out->share[2] ^= r[2][3];
 8001554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001558:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800155c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001560:	3340      	adds	r3, #64	@ 0x40
 8001562:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001566:	ea80 0402 	eor.w	r4, r0, r2
 800156a:	643c      	str	r4, [r7, #64]	@ 0x40
 800156c:	404b      	eors	r3, r1
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001574:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001578:	e9c3 1204 	strd	r1, r2, [r3, #16]
    out->share[3] ^= t23 ^ r[2][3];
 800157c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001580:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001584:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8001588:	3140      	adds	r1, #64	@ 0x40
 800158a:	e9d1 4506 	ldrd	r4, r5, [r1, #24]
 800158e:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 8001592:	ea84 0600 	eor.w	r6, r4, r0
 8001596:	63be      	str	r6, [r7, #56]	@ 0x38
 8001598:	4069      	eors	r1, r5
 800159a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800159c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80015a0:	4621      	mov	r1, r4
 80015a2:	4051      	eors	r1, r2
 80015a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80015a6:	4629      	mov	r1, r5
 80015a8:	4059      	eors	r1, r3
 80015aa:	6379      	str	r1, [r7, #52]	@ 0x34
 80015ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80015b0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80015b4:	e9c3 1206 	strd	r1, r2, [r3, #24]
}
 80015b8:	bf00      	nop
 80015ba:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 80015be:	46bd      	mov	sp, r7
 80015c0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015c4:	4770      	bx	lr

080015c6 <masked_not>:
 * to maintain correct recombined parity.
 *
 * @param dst Output masked result
 * @param src Input masked operand
 */
void masked_not(masked_uint64_t *dst, const masked_uint64_t *src) {
 80015c6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015ca:	b092      	sub	sp, #72	@ 0x48
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	61f8      	str	r0, [r7, #28]
 80015d0:	61b9      	str	r1, [r7, #24]
    // Bitwise NOT of each share — safe for Boolean masking.
    for (size_t i = 0; i < MASKING_N; ++i)
 80015d2:	2300      	movs	r3, #0
 80015d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80015d6:	e012      	b.n	80015fe <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	ea6f 0802 	mvn.w	r8, r2
 80015e8:	ea6f 0903 	mvn.w	r9, r3
 80015ec:	69fa      	ldr	r2, [r7, #28]
 80015ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 80015f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015fa:	3301      	adds	r3, #1
 80015fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80015fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001600:	2b03      	cmp	r3, #3
 8001602:	d9e9      	bls.n	80015d8 <masked_not+0x12>

    // Adjust one share so that the recombined NOT is correct.
    uint64_t orig_parity = 0, inv_parity = 0;
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001620:	e024      	b.n	800166c <masked_not+0xa6>
        orig_parity ^= src->share[i];
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001632:	ea80 0602 	eor.w	r6, r0, r2
 8001636:	613e      	str	r6, [r7, #16]
 8001638:	404b      	eors	r3, r1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001640:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4413      	add	r3, r2
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001654:	ea80 0602 	eor.w	r6, r0, r2
 8001658:	60be      	str	r6, [r7, #8]
 800165a:	404b      	eors	r3, r1
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001662:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001668:	3301      	adds	r3, #1
 800166a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800166c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800166e:	2b03      	cmp	r3, #3
 8001670:	d9d7      	bls.n	8001622 <masked_not+0x5c>
    }
    uint64_t delta = inv_parity ^ ~orig_parity;
 8001672:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800167a:	ea80 0402 	eor.w	r4, r0, r2
 800167e:	ea81 0503 	eor.w	r5, r1, r3
 8001682:	43e3      	mvns	r3, r4
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	43eb      	mvns	r3, r5
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800168e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    dst->share[0] ^= delta;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001698:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800169c:	ea80 0a02 	eor.w	sl, r0, r2
 80016a0:	ea81 0b03 	eor.w	fp, r1, r3
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	e9c3 ab00 	strd	sl, fp, [r3]
}
 80016aa:	bf00      	nop
 80016ac:	3748      	adds	r7, #72	@ 0x48
 80016ae:	46bd      	mov	sp, r7
 80016b0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80016b4:	4770      	bx	lr

080016b6 <masked_value_set>:
    out->share[0] = r0;
    out->share[1] = r1;
    out->share[2] = value ^ r0 ^ r1;
}
#elif MASKING_ORDER == 3
void masked_value_set(masked_uint64_t *out, uint64_t value) {
 80016b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t r0 = get_random64();
 80016c4:	f7ff f812 	bl	80006ec <get_random64>
 80016c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t r1 = get_random64();
 80016cc:	f7ff f80e 	bl	80006ec <get_random64>
 80016d0:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t r2 = get_random64();
 80016d4:	f7ff f80a 	bl	80006ec <get_random64>
 80016d8:	e9c7 0104 	strd	r0, r1, [r7, #16]
    out->share[0] = r0;
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016e2:	e9c1 2300 	strd	r2, r3, [r1]
    out->share[1] = r1;
 80016e6:	68f9      	ldr	r1, [r7, #12]
 80016e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    out->share[2] = r2;
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016f6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    out->share[3] = value ^ r0 ^ r1 ^ r2;
 80016fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001702:	ea80 0802 	eor.w	r8, r0, r2
 8001706:	ea81 0903 	eor.w	r9, r1, r3
 800170a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800170e:	ea88 0402 	eor.w	r4, r8, r2
 8001712:	ea89 0503 	eor.w	r5, r9, r3
 8001716:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800171a:	ea84 0a02 	eor.w	sl, r4, r2
 800171e:	ea85 0b03 	eor.w	fp, r5, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	e9c3 ab06 	strd	sl, fp, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	@ 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001734 <masked_squeeze>:
 * @param output      Buffer to receive the output
 * @param output_len  Number of output bytes desired
 * @param state       5x5 masked state to squeeze from
 * @param rate        Sponge bitrate in bytes (e.g. 168 for SHAKE128)
 */
void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5], size_t rate) {
 8001734:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001738:	b08d      	sub	sp, #52	@ 0x34
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 8001748:	e076      	b.n	8001838 <masked_squeeze+0x104>
        // Pull up to ratebytes per round.
        // This maps each byte of the output to a specific lane+byte within the state.
        for (int i = 0; i < rate&& offset < output_len; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800174e:	e064      	b.n	800181a <masked_squeeze+0xe6>
            size_t x = (i / 8) % 5;       // X coordinate in the 5×5 grid
 8001750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001752:	2b00      	cmp	r3, #0
 8001754:	da00      	bge.n	8001758 <masked_squeeze+0x24>
 8001756:	3307      	adds	r3, #7
 8001758:	10db      	asrs	r3, r3, #3
 800175a:	4619      	mov	r1, r3
 800175c:	4b3b      	ldr	r3, [pc, #236]	@ (800184c <masked_squeeze+0x118>)
 800175e:	fb83 2301 	smull	r2, r3, r3, r1
 8001762:	105a      	asrs	r2, r3, #1
 8001764:	17cb      	asrs	r3, r1, #31
 8001766:	1ad2      	subs	r2, r2, r3
 8001768:	4613      	mov	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	1aca      	subs	r2, r1, r3
 8001770:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;       // Y coordinate in the 5×5 grid
 8001772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001774:	4a35      	ldr	r2, [pc, #212]	@ (800184c <masked_squeeze+0x118>)
 8001776:	fb82 1203 	smull	r1, r2, r2, r3
 800177a:	1112      	asrs	r2, r2, #4
 800177c:	17db      	asrs	r3, r3, #31
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;      // Byte index within the 64-bit lane
 8001782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001784:	425a      	negs	r2, r3
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	f002 0207 	and.w	r2, r2, #7
 800178e:	bf58      	it	pl
 8001790:	4253      	negpl	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

            // === Recombine shares ===
            // Convert the masked lane back into a real value via XOR of all shares.
            uint64_t lane = 0;
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	e01a      	b.n	80017dc <masked_squeeze+0xa8>
                lane ^= state[x][y].share[j];
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4613      	mov	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	015b      	lsls	r3, r3, #5
 80017b0:	461a      	mov	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	441a      	add	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	0099      	lsls	r1, r3, #2
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	440b      	add	r3, r1
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4413      	add	r3, r2
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017ca:	ea80 0802 	eor.w	r8, r0, r2
 80017ce:	ea81 0903 	eor.w	r9, r1, r3
 80017d2:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	dde1      	ble.n	80017a6 <masked_squeeze+0x72>
            }

            // Extract the correct byte from the lane.
            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	00d9      	lsls	r1, r3, #3
 80017e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017ea:	f1c1 0620 	rsb	r6, r1, #32
 80017ee:	f1a1 0020 	sub.w	r0, r1, #32
 80017f2:	fa22 f401 	lsr.w	r4, r2, r1
 80017f6:	fa03 f606 	lsl.w	r6, r3, r6
 80017fa:	4334      	orrs	r4, r6
 80017fc:	fa23 f000 	lsr.w	r0, r3, r0
 8001800:	4304      	orrs	r4, r0
 8001802:	fa23 f501 	lsr.w	r5, r3, r1
 8001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	b2e2      	uxtb	r2, r4
 8001812:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < rate&& offset < output_len; i++) {
 8001814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001816:	3301      	adds	r3, #1
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
 800181a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	d903      	bls.n	800182a <masked_squeeze+0xf6>
 8001822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	429a      	cmp	r2, r3
 8001828:	d392      	bcc.n	8001750 <masked_squeeze+0x1c>
        }

        // === If we need more output ===
        // Keccak is a sponge — we re-permute the state to squeeze more bytes out.
        if (offset < output_len) {
 800182a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	429a      	cmp	r2, r3
 8001830:	d202      	bcs.n	8001838 <masked_squeeze+0x104>
            masked_keccak_f1600(state);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fd1e 	bl	8002274 <masked_keccak_f1600>
    while (offset < output_len) {
 8001838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	429a      	cmp	r2, r3
 800183e:	d384      	bcc.n	800174a <masked_squeeze+0x16>
        }
    }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3734      	adds	r7, #52	@ 0x34
 8001846:	46bd      	mov	sp, r7
 8001848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800184c:	66666667 	.word	0x66666667

08001850 <masked_theta>:
 * Apply the masked Theta step of Keccak.
 *
 * Theta mixes bits across columns using masked XORs to ensure diffusion.
 * Maintains share alignment (linear operation).
 */
void masked_theta(masked_uint64_t state[5][5]) {
 8001850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001854:	b0e0      	sub	sp, #384	@ 0x180
 8001856:	af00      	add	r7, sp, #0
 8001858:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800185c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001860:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};  // Column parity
 8001862:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001866:	22a0      	movs	r2, #160	@ 0xa0
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f009 ffd8 	bl	800b820 <memset>
    masked_uint64_t D[5] = {0};  // Parity difference per column
 8001870:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001874:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001878:	4618      	mov	r0, r3
 800187a:	23a0      	movs	r3, #160	@ 0xa0
 800187c:	461a      	mov	r2, r3
 800187e:	2100      	movs	r1, #0
 8001880:	f009 ffce 	bl	800b820 <memset>

    // For each column, compute the parity across the 5 lanes.
    // We do this in masked space using XORs, which are safe.
    for (int x = 0; x < 5; x++) {
 8001884:	2300      	movs	r3, #0
 8001886:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800188a:	e04f      	b.n	800192c <masked_theta+0xdc>
        C[x] = state[x][0];
 800188c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	015b      	lsls	r3, r3, #5
 8001898:	461a      	mov	r2, r3
 800189a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800189e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	441a      	add	r2, r3
 80018a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80018aa:	015b      	lsls	r3, r3, #5
 80018ac:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80018b0:	f107 0108 	add.w	r1, r7, #8
 80018b4:	440b      	add	r3, r1
 80018b6:	3bd0      	subs	r3, #208	@ 0xd0
 80018b8:	461c      	mov	r4, r3
 80018ba:	4615      	mov	r5, r2
 80018bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 80018c8:	2301      	movs	r3, #1
 80018ca:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80018ce:	e024      	b.n	800191a <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 80018d0:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80018d4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	18d0      	adds	r0, r2, r3
 80018dc:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 80018e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80018e4:	015b      	lsls	r3, r3, #5
 80018e6:	18d1      	adds	r1, r2, r3
 80018e8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80018ec:	4613      	mov	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	4413      	add	r3, r2
 80018f2:	015b      	lsls	r3, r3, #5
 80018f4:	461a      	mov	r2, r3
 80018f6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80018fa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	441a      	add	r2, r3
 8001902:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	4413      	add	r3, r2
 800190a:	461a      	mov	r2, r3
 800190c:	f7ff fb8e 	bl	800102c <masked_xor>
        for (int y = 1; y < 5; y++) {
 8001910:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001914:	3301      	adds	r3, #1
 8001916:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800191a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800191e:	2b04      	cmp	r3, #4
 8001920:	ddd6      	ble.n	80018d0 <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 8001922:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001926:	3301      	adds	r3, #1
 8001928:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800192c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001930:	2b04      	cmp	r3, #4
 8001932:	ddab      	ble.n	800188c <masked_theta+0x3c>
    }

    // Compute the D[x] value used to mix columns with each other.
    // Rotate C[x+1] by 1 bit before XORing with C[x-1].
    // This step spreads influence between adjacent columns.
    for (int x = 0; x < 5; x++) {
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800193a:	e06f      	b.n	8001a1c <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 800193c:	2300      	movs	r3, #0
 800193e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001942:	e062      	b.n	8001a0a <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 8001944:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001948:	1c59      	adds	r1, r3, #1
 800194a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b00 <masked_theta+0x2b0>)
 800194c:	fb83 2301 	smull	r2, r3, r3, r1
 8001950:	105a      	asrs	r2, r3, #1
 8001952:	17cb      	asrs	r3, r1, #31
 8001954:	1ad2      	subs	r2, r2, r3
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	1aca      	subs	r2, r1, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001964:	4413      	add	r3, r2
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800196c:	f107 0208 	add.w	r2, r7, #8
 8001970:	4413      	add	r3, r2
 8001972:	3bd0      	subs	r3, #208	@ 0xd0
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> 63);
 800197c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001980:	0fda      	lsrs	r2, r3, #31
 8001982:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4313      	orrs	r3, r2
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001990:	0fda      	lsrs	r2, r3, #31
 8001992:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4313      	orrs	r3, r2
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a0:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 80019a4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80019a8:	1d19      	adds	r1, r3, #4
 80019aa:	4b55      	ldr	r3, [pc, #340]	@ (8001b00 <masked_theta+0x2b0>)
 80019ac:	fb83 2301 	smull	r2, r3, r3, r1
 80019b0:	105a      	asrs	r2, r3, #1
 80019b2:	17cb      	asrs	r3, r1, #31
 80019b4:	1ad2      	subs	r2, r2, r3
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	1aca      	subs	r2, r1, r3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019c4:	4413      	add	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80019cc:	f107 0208 	add.w	r2, r7, #8
 80019d0:	4413      	add	r3, r2
 80019d2:	3bd0      	subs	r3, #208	@ 0xd0
 80019d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019d8:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80019dc:	ea80 0a02 	eor.w	sl, r0, r2
 80019e0:	ea81 0b03 	eor.w	fp, r1, r3
 80019e4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80019e8:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 80019ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80019f0:	0099      	lsls	r1, r3, #2
 80019f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80019f6:	440b      	add	r3, r1
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001a00:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a04:	3301      	adds	r3, #1
 8001a06:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001a0a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001a0e:	2b03      	cmp	r3, #3
 8001a10:	dd98      	ble.n	8001944 <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 8001a12:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001a16:	3301      	adds	r3, #1
 8001a18:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001a1c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	dd8b      	ble.n	800193c <masked_theta+0xec>
        }
    }

    // Apply D[x] to every lane in each column to complete the mixing.
    for (int x = 0; x < 5; x++) {
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001a2a:	e05e      	b.n	8001aea <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001a32:	e051      	b.n	8001ad8 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a3a:	e044      	b.n	8001ac6 <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 8001a3c:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a4e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	441a      	add	r2, r3
 8001a56:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001a5a:	0099      	lsls	r1, r3, #2
 8001a5c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a60:	440b      	add	r3, r1
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4413      	add	r3, r2
 8001a66:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a6a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a6e:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001a72:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001a76:	0099      	lsls	r1, r3, #2
 8001a78:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a7c:	440b      	add	r3, r1
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a86:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	461a      	mov	r2, r3
 8001a94:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a98:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	441a      	add	r2, r3
 8001aa0:	ea84 0800 	eor.w	r8, r4, r0
 8001aa4:	ea85 0901 	eor.w	r9, r5, r1
 8001aa8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001aac:	0099      	lsls	r1, r3, #2
 8001aae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ab2:	440b      	add	r3, r1
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001abc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ac6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001aca:	2b03      	cmp	r3, #3
 8001acc:	ddb6      	ble.n	8001a3c <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 8001ace:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001ad8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	dda9      	ble.n	8001a34 <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 8001ae0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001aea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	dd9c      	ble.n	8001a2c <masked_theta+0x1dc>
            }
        }
    }
}
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001afa:	46bd      	mov	sp, r7
 8001afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b00:	66666667 	.word	0x66666667

08001b04 <masked_rho>:
 * Apply the masked Rho step of Keccak.
 *
 * Rho rotates each lane by a fixed constant offset (same across shares),
 * spreading bits to neighboring positions while preserving the mask structure.
 */
void masked_rho(masked_uint64_t state[5][5]) {
 8001b04:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b08:	b09a      	sub	sp, #104	@ 0x68
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6578      	str	r0, [r7, #84]	@ 0x54
    // Rho rotates each lane by a constant offset to scatter bits.
    // It’s important the same rotation is applied to every share
    // so the XOR mask relationship stays valid.
    for (int x = 0; x < 5; x++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b12:	e16d      	b.n	8001df0 <masked_rho+0x2ec>
        for (int y = 0; y < 5; y++) {
 8001b14:	2300      	movs	r3, #0
 8001b16:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b18:	e163      	b.n	8001de2 <masked_rho+0x2de>
            uint8_t r = keccak_rho_offsets[x][y];
 8001b1a:	49bb      	ldr	r1, [pc, #748]	@ (8001e08 <masked_rho+0x304>)
 8001b1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	18ca      	adds	r2, r1, r3
 8001b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b28:	4413      	add	r3, r2
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			#elif MASKING_N == 3
						state[x][y].share[0] = ROL64(state[x][y].share[0], r);
						state[x][y].share[1] = ROL64(state[x][y].share[1], r);
						state[x][y].share[2] = ROL64(state[x][y].share[2], r);
			#elif MASKING_N == 4
						state[x][y].share[0] = ROL64(state[x][y].share[0], r);
 8001b30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	015b      	lsls	r3, r3, #5
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b3e:	441a      	add	r2, r3
 8001b40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b42:	015b      	lsls	r3, r3, #5
 8001b44:	4413      	add	r3, r2
 8001b46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4a:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8001b4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	015b      	lsls	r3, r3, #5
 8001b58:	461a      	mov	r2, r3
 8001b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b5c:	eb03 0c02 	add.w	ip, r3, r2
 8001b60:	f1a4 0320 	sub.w	r3, r4, #32
 8001b64:	f1c4 0220 	rsb	r2, r4, #32
 8001b68:	fa01 f504 	lsl.w	r5, r1, r4
 8001b6c:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001b6e:	fa00 f303 	lsl.w	r3, r0, r3
 8001b72:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 8001b74:	431d      	orrs	r5, r3
 8001b76:	63fd      	str	r5, [r7, #60]	@ 0x3c
 8001b78:	fa20 f202 	lsr.w	r2, r0, r2
 8001b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b82:	fa00 f304 	lsl.w	r3, r0, r4
 8001b86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b88:	4264      	negs	r4, r4
 8001b8a:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8001b8e:	f1c4 0320 	rsb	r3, r4, #32
 8001b92:	f1a4 0220 	sub.w	r2, r4, #32
 8001b96:	fa20 f804 	lsr.w	r8, r0, r4
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	ea48 0803 	orr.w	r8, r8, r3
 8001ba2:	fa21 f202 	lsr.w	r2, r1, r2
 8001ba6:	ea48 0802 	orr.w	r8, r8, r2
 8001baa:	fa21 f904 	lsr.w	r9, r1, r4
 8001bae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	ea43 0308 	orr.w	r3, r3, r8
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	ea43 0309 	orr.w	r3, r3, r9
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001bc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	4463      	add	r3, ip
 8001bcc:	e9c3 8900 	strd	r8, r9, [r3]
						state[x][y].share[1] = ROL64(state[x][y].share[1], r);
 8001bd0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	461a      	mov	r2, r3
 8001bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bde:	441a      	add	r2, r3
 8001be0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001be2:	015b      	lsls	r3, r3, #5
 8001be4:	4413      	add	r3, r2
 8001be6:	3308      	adds	r3, #8
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8001bf0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfe:	eb03 0c02 	add.w	ip, r3, r2
 8001c02:	f1a4 0320 	sub.w	r3, r4, #32
 8001c06:	f1c4 0220 	rsb	r2, r4, #32
 8001c0a:	fa01 f504 	lsl.w	r5, r1, r4
 8001c0e:	637d      	str	r5, [r7, #52]	@ 0x34
 8001c10:	fa00 f303 	lsl.w	r3, r0, r3
 8001c14:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8001c16:	431d      	orrs	r5, r3
 8001c18:	637d      	str	r5, [r7, #52]	@ 0x34
 8001c1a:	fa20 f202 	lsr.w	r2, r0, r2
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c20:	4313      	orrs	r3, r2
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c24:	fa00 f304 	lsl.w	r3, r0, r4
 8001c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c2a:	4264      	negs	r4, r4
 8001c2c:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8001c30:	f1c4 0320 	rsb	r3, r4, #32
 8001c34:	f1a4 0220 	sub.w	r2, r4, #32
 8001c38:	fa20 fa04 	lsr.w	sl, r0, r4
 8001c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c40:	ea4a 0a03 	orr.w	sl, sl, r3
 8001c44:	fa21 f202 	lsr.w	r2, r1, r2
 8001c48:	ea4a 0a02 	orr.w	sl, sl, r2
 8001c4c:	fa21 fb04 	lsr.w	fp, r1, r4
 8001c50:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001c54:	460b      	mov	r3, r1
 8001c56:	ea43 030a 	orr.w	r3, r3, sl
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	ea43 030b 	orr.w	r3, r3, fp
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c6a:	015b      	lsls	r3, r3, #5
 8001c6c:	4463      	add	r3, ip
 8001c6e:	3308      	adds	r3, #8
 8001c70:	e9c3 ab00 	strd	sl, fp, [r3]
						state[x][y].share[2] = ROL64(state[x][y].share[2], r);
 8001c74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c82:	441a      	add	r2, r3
 8001c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	4413      	add	r3, r2
 8001c8a:	3310      	adds	r3, #16
 8001c8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c90:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8001c94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ca2:	eb03 0c02 	add.w	ip, r3, r2
 8001ca6:	f1a4 0320 	sub.w	r3, r4, #32
 8001caa:	f1c4 0220 	rsb	r2, r4, #32
 8001cae:	fa01 f504 	lsl.w	r5, r1, r4
 8001cb2:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001cb4:	fa00 f303 	lsl.w	r3, r0, r3
 8001cb8:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8001cba:	431d      	orrs	r5, r3
 8001cbc:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8001cbe:	fa20 f202 	lsr.w	r2, r0, r2
 8001cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cc8:	fa00 f304 	lsl.w	r3, r0, r4
 8001ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cce:	4264      	negs	r4, r4
 8001cd0:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8001cd4:	f1c4 0320 	rsb	r3, r4, #32
 8001cd8:	f1a4 0220 	sub.w	r2, r4, #32
 8001cdc:	fa20 f504 	lsr.w	r5, r0, r4
 8001ce0:	64bd      	str	r5, [r7, #72]	@ 0x48
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8001ce8:	431d      	orrs	r5, r3
 8001cea:	64bd      	str	r5, [r7, #72]	@ 0x48
 8001cec:	fa21 f202 	lsr.w	r2, r1, r2
 8001cf0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cf6:	fa21 f304 	lsr.w	r3, r1, r4
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8001d00:	460b      	mov	r3, r1
 8001d02:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001d06:	4620      	mov	r0, r4
 8001d08:	4303      	orrs	r3, r0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	462a      	mov	r2, r5
 8001d10:	4313      	orrs	r3, r2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d18:	e9c7 1212 	strd	r1, r2, [r7, #72]	@ 0x48
 8001d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d1e:	015b      	lsls	r3, r3, #5
 8001d20:	4463      	add	r3, ip
 8001d22:	3310      	adds	r3, #16
 8001d24:	e9c3 1200 	strd	r1, r2, [r3]
						state[x][y].share[3] = ROL64(state[x][y].share[3], r);
 8001d28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	015b      	lsls	r3, r3, #5
 8001d32:	461a      	mov	r2, r3
 8001d34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d36:	441a      	add	r2, r3
 8001d38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d3a:	015b      	lsls	r3, r3, #5
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3318      	adds	r3, #24
 8001d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d44:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8001d48:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	015b      	lsls	r3, r3, #5
 8001d52:	461a      	mov	r2, r3
 8001d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d56:	eb03 0c02 	add.w	ip, r3, r2
 8001d5a:	f1a4 0320 	sub.w	r3, r4, #32
 8001d5e:	f1c4 0220 	rsb	r2, r4, #32
 8001d62:	fa01 f504 	lsl.w	r5, r1, r4
 8001d66:	627d      	str	r5, [r7, #36]	@ 0x24
 8001d68:	fa00 f303 	lsl.w	r3, r0, r3
 8001d6c:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8001d6e:	431d      	orrs	r5, r3
 8001d70:	627d      	str	r5, [r7, #36]	@ 0x24
 8001d72:	fa20 f202 	lsr.w	r2, r0, r2
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7c:	fa00 f304 	lsl.w	r3, r0, r4
 8001d80:	623b      	str	r3, [r7, #32]
 8001d82:	4264      	negs	r4, r4
 8001d84:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8001d88:	f1c4 0320 	rsb	r3, r4, #32
 8001d8c:	f1a4 0220 	sub.w	r2, r4, #32
 8001d90:	fa20 f504 	lsr.w	r5, r0, r4
 8001d94:	643d      	str	r5, [r7, #64]	@ 0x40
 8001d96:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9a:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8001d9c:	431d      	orrs	r5, r3
 8001d9e:	643d      	str	r5, [r7, #64]	@ 0x40
 8001da0:	fa21 f202 	lsr.w	r2, r1, r2
 8001da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da6:	4313      	orrs	r3, r2
 8001da8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001daa:	fa21 f304 	lsr.w	r3, r1, r4
 8001dae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001db0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001db4:	4623      	mov	r3, r4
 8001db6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001dba:	4602      	mov	r2, r0
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	462a      	mov	r2, r5
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	607b      	str	r3, [r7, #4]
 8001dc8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dcc:	e9c7 1210 	strd	r1, r2, [r7, #64]	@ 0x40
 8001dd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dd2:	015b      	lsls	r3, r3, #5
 8001dd4:	4463      	add	r3, ip
 8001dd6:	3318      	adds	r3, #24
 8001dd8:	e9c3 1200 	strd	r1, r2, [r3]
        for (int y = 0; y < 5; y++) {
 8001ddc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dde:	3301      	adds	r3, #1
 8001de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001de2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	f77f ae98 	ble.w	8001b1a <masked_rho+0x16>
    for (int x = 0; x < 5; x++) {
 8001dea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dec:	3301      	adds	r3, #1
 8001dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8001df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	f77f ae8e 	ble.w	8001b14 <masked_rho+0x10>
							state[x][y].share[i] = ROL64(state[x][y].share[i], r);
						}
			#endif
        }
    }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3768      	adds	r7, #104	@ 0x68
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0800c3c8 	.word	0x0800c3c8

08001e0c <masked_pi>:
 * Apply the masked Pi step of Keccak.
 *
 * Pi rearranges lanes within the 5x5 grid using a predefined permutation.
 * All shares of a lane are moved together to preserve masking validity.
 */
void masked_pi(masked_uint64_t state[5][5]) {
 8001e0c:	b4b0      	push	{r4, r5, r7}
 8001e0e:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001e18:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001e1c:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    // Copy the full masked state first to keep original positions.
    for (int x = 0; x < 5; ++x)
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e24:	e038      	b.n	8001e98 <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e2c:	e02b      	b.n	8001e86 <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 8001e2e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	015b      	lsls	r3, r3, #5
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001e40:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	1899      	adds	r1, r3, r2
 8001e48:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001e4c:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8001e50:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e5e:	4413      	add	r3, r2
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	18c2      	adds	r2, r0, r3
 8001e64:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e68:	015b      	lsls	r3, r3, #5
 8001e6a:	440b      	add	r3, r1
 8001e6c:	4614      	mov	r4, r2
 8001e6e:	461d      	mov	r5, r3
 8001e70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e74:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8001e7c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e86:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	ddcf      	ble.n	8001e2e <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 8001e8e:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001e92:	3301      	adds	r3, #1
 8001e94:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e98:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	ddc2      	ble.n	8001e26 <masked_pi+0x1a>

    // Pi permutes the positions of lanes across the 5x5 grid.
    // All shares must move together with their corresponding lane
    // to keep the mask relationships correct.
    for (int x = 0; x < 5; ++x)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001ea6:	e051      	b.n	8001f4c <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001eae:	e044      	b.n	8001f3a <masked_pi+0x12e>
            int new_x = y;
 8001eb0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001eb4:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 8001eb8:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001ebc:	0059      	lsls	r1, r3, #1
 8001ebe:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	18ca      	adds	r2, r1, r3
 8001eca:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <masked_pi+0x158>)
 8001ecc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ed0:	1059      	asrs	r1, r3, #1
 8001ed2:	17d3      	asrs	r3, r2, #31
 8001ed4:	1ac9      	subs	r1, r1, r3
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	440b      	add	r3, r1
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 8001ee2:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001ef4:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	441a      	add	r2, r3
 8001efc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001f00:	015b      	lsls	r3, r3, #5
 8001f02:	18d0      	adds	r0, r2, r3
 8001f04:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001f08:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001f0c:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001f1a:	4413      	add	r3, r2
 8001f1c:	015b      	lsls	r3, r3, #5
 8001f1e:	440b      	add	r3, r1
 8001f20:	4604      	mov	r4, r0
 8001f22:	461d      	mov	r5, r3
 8001f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001f30:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001f34:	3301      	adds	r3, #1
 8001f36:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001f3a:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	ddb6      	ble.n	8001eb0 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8001f42:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001f46:	3301      	adds	r3, #1
 8001f48:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001f4c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	dda9      	ble.n	8001ea8 <masked_pi+0x9c>
        }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bcb0      	pop	{r4, r5, r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	66666667 	.word	0x66666667

08001f68 <masked_chi>:


void masked_chi(masked_uint64_t out[5][5],
                const masked_uint64_t in[5][5],
                const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b09a      	sub	sp, #104	@ 0x68
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
    // Chi mixes bits in each row using a non-linear expression.
    // Since AND is not linear, it’s where leakage can happen — hence the use of
    // fresh randomness and secure masked AND gadgets.

    for (int y = 0; y < 5; y++) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	667b      	str	r3, [r7, #100]	@ 0x64
 8001f78:	e070      	b.n	800205c <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f7e:	e067      	b.n	8002050 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8001f80:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	015b      	lsls	r3, r3, #5
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	441a      	add	r2, r3
 8001f90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	4413      	add	r3, r2
 8001f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8001f98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	4b33      	ldr	r3, [pc, #204]	@ (800206c <masked_chi+0x104>)
 8001f9e:	fb83 1302 	smull	r1, r3, r3, r2
 8001fa2:	1059      	asrs	r1, r3, #1
 8001fa4:	17d3      	asrs	r3, r2, #31
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	460b      	mov	r3, r1
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	1ad1      	subs	r1, r2, r3
 8001fb0:	460a      	mov	r2, r1
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	015b      	lsls	r3, r3, #5
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	441a      	add	r2, r3
 8001fc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fc2:	015b      	lsls	r3, r3, #5
 8001fc4:	4413      	add	r3, r2
 8001fc6:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8001fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fca:	1c9a      	adds	r2, r3, #2
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <masked_chi+0x104>)
 8001fce:	fb83 1302 	smull	r1, r3, r3, r2
 8001fd2:	1059      	asrs	r1, r3, #1
 8001fd4:	17d3      	asrs	r3, r2, #31
 8001fd6:	1ac9      	subs	r1, r1, r3
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	1ad1      	subs	r1, r2, r3
 8001fe0:	460a      	mov	r2, r1
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	015b      	lsls	r3, r3, #5
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	441a      	add	r2, r3
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ff2:	015b      	lsls	r3, r3, #5
 8001ff4:	4413      	add	r3, r2
 8001ff6:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fae1 	bl	80015c6 <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8002004:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	01db      	lsls	r3, r3, #7
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	441a      	add	r2, r3
 8002014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002016:	01db      	lsls	r3, r3, #7
 8002018:	4413      	add	r3, r2
 800201a:	f107 0110 	add.w	r1, r7, #16
 800201e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002022:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002024:	f7ff f82d 	bl	8001082 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8002028:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	015b      	lsls	r3, r3, #5
 8002032:	461a      	mov	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	441a      	add	r2, r3
 8002038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	4413      	add	r3, r2
 800203e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002042:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fff1 	bl	800102c <masked_xor>
        for (int x = 0; x < 5; x++) {
 800204a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800204c:	3301      	adds	r3, #1
 800204e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002050:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002052:	2b04      	cmp	r3, #4
 8002054:	dd94      	ble.n	8001f80 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 8002056:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002058:	3301      	adds	r3, #1
 800205a:	667b      	str	r3, [r7, #100]	@ 0x64
 800205c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800205e:	2b04      	cmp	r3, #4
 8002060:	dd8b      	ble.n	8001f7a <masked_chi+0x12>
        }
    }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	3768      	adds	r7, #104	@ 0x68
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	66666667 	.word	0x66666667

08002070 <masked_iota>:
 * Requires re-masking the result securely to maintain masking invariants.
 *
 * @param state Masked state to update
 * @param rc    Round constant for this permutation round
 */
void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	b08c      	sub	sp, #48	@ 0x30
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	e9c7 2300 	strd	r2, r3, [r7]
    // Iota introduces asymmetry by injecting a round constant into lane (0,0).
    // This breaks symmetry and helps distinguish rounds.
    // Because we’re masking, we must re-mask the lane after applying the constant.

    // Step 1: Recombine to get the true value of the lane.
    uint64_t value = 0;
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
 800208e:	e010      	b.n	80020b2 <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020a0:	ea80 0a02 	eor.w	sl, r0, r2
 80020a4:	ea81 0b03 	eor.w	fp, r1, r3
 80020a8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	3301      	adds	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	ddeb      	ble.n	8002090 <masked_iota+0x20>

    // Step 2: XOR in the round constant.
    value ^= rc;
 80020b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80020bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020c0:	ea80 0802 	eor.w	r8, r0, r2
 80020c4:	ea81 0903 	eor.w	r9, r1, r3
 80020c8:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // Step 3: Randomly re-mask it.
    uint64_t acc = value;
 80020cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 80020d4:	2301      	movs	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e01a      	b.n	8002110 <masked_iota+0xa0>
        state[0][0].share[i] = get_random64();
 80020da:	f7fe fb07 	bl	80006ec <get_random64>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	6979      	ldr	r1, [r7, #20]
 80020e6:	00c9      	lsls	r1, r1, #3
 80020e8:	4401      	add	r1, r0
 80020ea:	e9c1 2300 	strd	r2, r3, [r1]
        acc ^= state[0][0].share[i];
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020fe:	ea80 0402 	eor.w	r4, r0, r2
 8002102:	ea81 0503 	eor.w	r5, r1, r3
 8002106:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3301      	adds	r3, #1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b03      	cmp	r3, #3
 8002114:	dde1      	ble.n	80020da <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800211c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002120:	bf00      	nop
 8002122:	3730      	adds	r7, #48	@ 0x30
 8002124:	46bd      	mov	sp, r7
 8002126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800212a <masked_keccak_round>:
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
        }
    }
}

void masked_keccak_round(masked_uint64_t S[5][5], uint64_t rc) {
 800212a:	b5b0      	push	{r4, r5, r7, lr}
 800212c:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 8002130:	af00      	add	r7, sp, #0
 8002132:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8002136:	f6a1 71b4 	subw	r1, r1, #4020	@ 0xfb4
 800213a:	6008      	str	r0, [r1, #0]
 800213c:	4639      	mov	r1, r7
 800213e:	e9c1 2300 	strd	r2, r3, [r1]

    // Theta mixes each column’s bits into its neighbors to spread information.
    // For masking, we need to preserve XOR relationships between shares here.
    masked_theta(S);
 8002142:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002146:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	f7ff fb80 	bl	8001850 <masked_theta>

    // Rho rotates each lane by a fixed offset.
    // Since we’re masking, we have to apply the same rotation to every share.
    masked_rho(S);
 8002150:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002154:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	f7ff fcd3 	bl	8001b04 <masked_rho>

    // Pi moves lanes around — it's a shuffle of the 5×5 grid.
    // All shares for each lane must move together to keep masking valid.
    masked_pi(S);
 800215e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002162:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	f7ff fe50 	bl	8001e0c <masked_pi>

    // Chi is non-linear, and this is where leakage can happen — we need fresh randomness.
    // One matrix of random values per lane to feed into masked ANDs.
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8002172:	e020      	b.n	80021b6 <masked_keccak_round+0x8c>
        for (int x = 0; x < 5; ++x)
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 800217a:	e013      	b.n	80021a4 <masked_keccak_round+0x7a>
            fill_random_matrix(r_chi[x][y]);
 800217c:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8002180:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 800218e:	4413      	add	r3, r2
 8002190:	01db      	lsls	r3, r3, #7
 8002192:	440b      	add	r3, r1
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe feb9 	bl	8000f0c <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 800219a:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 800219e:	3301      	adds	r3, #1
 80021a0:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 80021a4:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	dde7      	ble.n	800217c <masked_keccak_round+0x52>
    for (int y = 0; y < 5; ++y)
 80021ac:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 80021b0:	3301      	adds	r3, #1
 80021b2:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 80021b6:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	ddda      	ble.n	8002174 <masked_keccak_round+0x4a>
    // We build a new state instead of modifying in place — safer and avoids weird bugs.
    masked_uint64_t chi_out[5][5];

    // Chi mixes rows using NOT and AND.
    // Because we’re masking, this step is the trickiest and needs careful randomness.
    masked_chi(chi_out, S, r_chi);
 80021be:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 80021c2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80021c6:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80021ca:	f107 0010 	add.w	r0, r7, #16
 80021ce:	6819      	ldr	r1, [r3, #0]
 80021d0:	f7ff feca 	bl	8001f68 <masked_chi>

    // Iota adds in the round constant — this breaks symmetry and keeps things unpredictable.
    // Only touch share[0] to avoid messing up the masking.
    masked_iota(chi_out, rc);
 80021d4:	463b      	mov	r3, r7
 80021d6:	f107 0110 	add.w	r1, r7, #16
 80021da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021de:	4608      	mov	r0, r1
 80021e0:	f7ff ff46 	bl	8002070 <masked_iota>

    // Move the updated state back into S so it's ready for the next round.
    for (int y = 0; y < 5; ++y)
 80021e4:	2300      	movs	r3, #0
 80021e6:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 80021ea:	e038      	b.n	800225e <masked_keccak_round+0x134>
        for (int x = 0; x < 5; ++x)
 80021ec:	2300      	movs	r3, #0
 80021ee:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 80021f2:	e02b      	b.n	800224c <masked_keccak_round+0x122>
            S[x][y] = chi_out[x][y];
 80021f4:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	461a      	mov	r2, r3
 8002202:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002206:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	441a      	add	r2, r3
 800220e:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002212:	015b      	lsls	r3, r3, #5
 8002214:	18d0      	adds	r0, r2, r3
 8002216:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800221a:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 800221e:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 800222c:	4413      	add	r3, r2
 800222e:	015b      	lsls	r3, r3, #5
 8002230:	440b      	add	r3, r1
 8002232:	4604      	mov	r4, r0
 8002234:	461d      	mov	r5, r3
 8002236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800223e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; ++x)
 8002242:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002246:	3301      	adds	r3, #1
 8002248:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 800224c:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002250:	2b04      	cmp	r3, #4
 8002252:	ddcf      	ble.n	80021f4 <masked_keccak_round+0xca>
    for (int y = 0; y < 5; ++y)
 8002254:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002258:	3301      	adds	r3, #1
 800225a:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 800225e:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002262:	2b04      	cmp	r3, #4
 8002264:	ddc2      	ble.n	80021ec <masked_keccak_round+0xc2>
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 800226e:	46bd      	mov	sp, r7
 8002270:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002274 <masked_keccak_f1600>:
 * Applies all 24 rounds of the Keccak permutation to the given masked state.
 * Each round applies the full sequence: Theta, Rho, Pi, Chi, Iota.
 *
 * state is the 5×5 masked Keccak state.
 */
void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 800227c:	2300      	movs	r3, #0
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e00b      	b.n	800229a <masked_keccak_f1600+0x26>
        masked_keccak_round(state, RC[i]);
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <masked_keccak_f1600+0x38>)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4413      	add	r3, r2
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff4b 	bl	800212a <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b17      	cmp	r3, #23
 800229e:	ddf0      	ble.n	8002282 <masked_keccak_f1600+0xe>
    }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	0800c308 	.word	0x0800c308

080022b0 <masked_keccak_sponge>:
#include "params.h"

// === Public API Implementations ===
void masked_keccak_sponge(uint8_t *output, size_t output_len,
                          const uint8_t *input, size_t input_len,
                          size_t rate, uint8_t domain_sep) {
 80022b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022b4:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	f507 7474 	add.w	r4, r7, #976	@ 0x3d0
 80022be:	f5a4 7467 	sub.w	r4, r4, #924	@ 0x39c
 80022c2:	6020      	str	r0, [r4, #0]
 80022c4:	f507 7074 	add.w	r0, r7, #976	@ 0x3d0
 80022c8:	f5a0 7068 	sub.w	r0, r0, #928	@ 0x3a0
 80022cc:	6001      	str	r1, [r0, #0]
 80022ce:	f507 7174 	add.w	r1, r7, #976	@ 0x3d0
 80022d2:	f5a1 7169 	sub.w	r1, r1, #932	@ 0x3a4
 80022d6:	600a      	str	r2, [r1, #0]
 80022d8:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80022dc:	f5a2 726a 	sub.w	r2, r2, #936	@ 0x3a8
 80022e0:	6013      	str	r3, [r2, #0]
 80022e2:	466b      	mov	r3, sp
 80022e4:	461c      	mov	r4, r3
    masked_uint64_t state[5][5];

    //Step 1: Initialize state
    for (int x = 0; x < 5; x++) {
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80022ec:	e036      	b.n	800235c <masked_keccak_sponge+0xac>
        for (int y = 0; y < 5; y++) {
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 80022f4:	e029      	b.n	800234a <masked_keccak_sponge+0x9a>
            for (int i = 0; i < MASKING_N; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80022fc:	e01c      	b.n	8002338 <masked_keccak_sponge+0x88>
                state[x][y].share[i] = 0;
 80022fe:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002302:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8002306:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800230a:	461a      	mov	r2, r3
 800230c:	0092      	lsls	r2, r2, #2
 800230e:	441a      	add	r2, r3
 8002310:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8002314:	4413      	add	r3, r2
 8002316:	009a      	lsls	r2, r3, #2
 8002318:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800231c:	4413      	add	r3, r2
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4419      	add	r1, r3
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 800232e:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8002332:	3301      	adds	r3, #1
 8002334:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8002338:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800233c:	2b03      	cmp	r3, #3
 800233e:	ddde      	ble.n	80022fe <masked_keccak_sponge+0x4e>
        for (int y = 0; y < 5; y++) {
 8002340:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8002344:	3301      	adds	r3, #1
 8002346:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 800234a:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 800234e:	2b04      	cmp	r3, #4
 8002350:	ddd1      	ble.n	80022f6 <masked_keccak_sponge+0x46>
    for (int x = 0; x < 5; x++) {
 8002352:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8002356:	3301      	adds	r3, #1
 8002358:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800235c:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8002360:	2b04      	cmp	r3, #4
 8002362:	ddc4      	ble.n	80022ee <masked_keccak_sponge+0x3e>
            }
        }
    }

    //Step 2: Absorb full input blocks
    size_t offset = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
    while (input_len >= rate) {
 800236a:	e0b2      	b.n	80024d2 <masked_keccak_sponge+0x222>
        for (int i = 0; i < rate; i += 8) {
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8002372:	e08e      	b.n	8002492 <masked_keccak_sponge+0x1e2>
            uint64_t lane = 0;
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 8002380:	2300      	movs	r3, #0
 8002382:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8002386:	e03a      	b.n	80023fe <masked_keccak_sponge+0x14e>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8002388:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 800238c:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002390:	441a      	add	r2, r3
 8002392:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8002396:	441a      	add	r2, r3
 8002398:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800239c:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4413      	add	r3, r2
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2200      	movs	r2, #0
 80023aa:	623b      	str	r3, [r7, #32]
 80023ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80023ae:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	f1a1 0320 	sub.w	r3, r1, #32
 80023b8:	f1c1 0220 	rsb	r2, r1, #32
 80023bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80023be:	fa00 fb01 	lsl.w	fp, r0, r1
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	fa00 f303 	lsl.w	r3, r0, r3
 80023c8:	ea4b 0b03 	orr.w	fp, fp, r3
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	fa23 f202 	lsr.w	r2, r3, r2
 80023d2:	ea4b 0b02 	orr.w	fp, fp, r2
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	fa03 fa01 	lsl.w	sl, r3, r1
 80023dc:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80023e0:	ea42 010a 	orr.w	r1, r2, sl
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	ea43 030b 	orr.w	r3, r3, fp
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f0:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 80023f4:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 80023f8:	3301      	adds	r3, #1
 80023fa:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80023fe:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8002402:	2b07      	cmp	r3, #7
 8002404:	ddc0      	ble.n	8002388 <masked_keccak_sponge+0xd8>
            }

            size_t x = (i / 8) % 5;
 8002406:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 800240a:	2b00      	cmp	r3, #0
 800240c:	da00      	bge.n	8002410 <masked_keccak_sponge+0x160>
 800240e:	3307      	adds	r3, #7
 8002410:	10db      	asrs	r3, r3, #3
 8002412:	4619      	mov	r1, r3
 8002414:	4bd7      	ldr	r3, [pc, #860]	@ (8002774 <masked_keccak_sponge+0x4c4>)
 8002416:	fb83 2301 	smull	r2, r3, r3, r1
 800241a:	105a      	asrs	r2, r3, #1
 800241c:	17cb      	asrs	r3, r1, #31
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	461a      	mov	r2, r3
 8002422:	0092      	lsls	r2, r2, #2
 8002424:	441a      	add	r2, r3
 8002426:	1a8b      	subs	r3, r1, r2
 8002428:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
            size_t y = (i / 8) / 5;
 800242c:	f8d7 13bc 	ldr.w	r1, [r7, #956]	@ 0x3bc
 8002430:	4bd0      	ldr	r3, [pc, #832]	@ (8002774 <masked_keccak_sponge+0x4c4>)
 8002432:	fb83 2301 	smull	r2, r3, r3, r1
 8002436:	111a      	asrs	r2, r3, #4
 8002438:	17cb      	asrs	r3, r1, #31
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8002440:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002444:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 8002448:	4608      	mov	r0, r1
 800244a:	f7ff f934 	bl	80016b6 <masked_value_set>
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 800244e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002452:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8002456:	461a      	mov	r2, r3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	441a      	add	r2, r3
 800245c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8002460:	4413      	add	r3, r2
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	18c8      	adds	r0, r1, r3
 8002466:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800246a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800246e:	461a      	mov	r2, r3
 8002470:	0092      	lsls	r2, r2, #2
 8002472:	441a      	add	r2, r3
 8002474:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8002478:	4413      	add	r3, r2
 800247a:	015b      	lsls	r3, r3, #5
 800247c:	4419      	add	r1, r3
 800247e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002482:	461a      	mov	r2, r3
 8002484:	f7fe fdd2 	bl	800102c <masked_xor>
        for (int i = 0; i < rate; i += 8) {
 8002488:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 800248c:	3308      	adds	r3, #8
 800248e:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8002492:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8002496:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800249a:	4293      	cmp	r3, r2
 800249c:	f63f af6a 	bhi.w	8002374 <masked_keccak_sponge+0xc4>
        }

        masked_keccak_f1600(state);
 80024a0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fee5 	bl	8002274 <masked_keccak_f1600>
        offset += rate;
 80024aa:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 80024ae:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80024b2:	4413      	add	r3, r2
 80024b4:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        input_len -= rate;
 80024b8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80024bc:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 80024c0:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80024c4:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	600b      	str	r3, [r1, #0]
    while (input_len >= rate) {
 80024d2:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80024d6:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f4bf af43 	bcs.w	800236c <masked_keccak_sponge+0xbc>
    }

    //Step 3: Final padded block with domain separation
    uint8_t block[rate];
 80024e6:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	@ 0x3f8
 80024ea:	460b      	mov	r3, r1
 80024ec:	3b01      	subs	r3, #1
 80024ee:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80024f2:	2300      	movs	r3, #0
 80024f4:	61b9      	str	r1, [r7, #24]
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002504:	4658      	mov	r0, fp
 8002506:	00c3      	lsls	r3, r0, #3
 8002508:	4650      	mov	r0, sl
 800250a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800250e:	4650      	mov	r0, sl
 8002510:	00c2      	lsls	r2, r0, #3
 8002512:	2300      	movs	r3, #0
 8002514:	6139      	str	r1, [r7, #16]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002524:	4658      	mov	r0, fp
 8002526:	00c3      	lsls	r3, r0, #3
 8002528:	4650      	mov	r0, sl
 800252a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800252e:	4650      	mov	r0, sl
 8002530:	00c2      	lsls	r2, r0, #3
 8002532:	1dcb      	adds	r3, r1, #7
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	ebad 0d03 	sub.w	sp, sp, r3
 800253c:	466b      	mov	r3, sp
 800253e:	3300      	adds	r3, #0
 8002540:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    for (size_t i = 0; i < rate; ++i) {
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 800254a:	e00b      	b.n	8002564 <masked_keccak_sponge+0x2b4>
        block[i] = 0;
 800254c:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8002550:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8002554:	4413      	add	r3, r2
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < rate; ++i) {
 800255a:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 800255e:	3301      	adds	r3, #1
 8002560:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8002564:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8002568:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800256c:	429a      	cmp	r2, r3
 800256e:	d3ed      	bcc.n	800254c <masked_keccak_sponge+0x29c>
    }

    for (size_t i = 0; i < input_len; ++i) {
 8002570:	2300      	movs	r3, #0
 8002572:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8002576:	e017      	b.n	80025a8 <masked_keccak_sponge+0x2f8>
        block[i] = input[offset + i];
 8002578:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 800257c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002580:	4413      	add	r3, r2
 8002582:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8002586:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	4413      	add	r3, r2
 800258e:	7819      	ldrb	r1, [r3, #0]
 8002590:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8002594:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002598:	4413      	add	r3, r2
 800259a:	460a      	mov	r2, r1
 800259c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; ++i) {
 800259e:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80025a2:	3301      	adds	r3, #1
 80025a4:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80025a8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80025ac:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80025b0:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3de      	bcc.n	8002578 <masked_keccak_sponge+0x2c8>
    }

    block[input_len] ^= domain_sep;   // Domain separation marker (e.g., 0x06 or 0x1F)
 80025ba:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80025be:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80025c2:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	781a      	ldrb	r2, [r3, #0]
 80025cc:	f897 33fc 	ldrb.w	r3, [r7, #1020]	@ 0x3fc
 80025d0:	4053      	eors	r3, r2
 80025d2:	b2d9      	uxtb	r1, r3
 80025d4:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80025d8:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80025dc:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	460a      	mov	r2, r1
 80025e6:	701a      	strb	r2, [r3, #0]
    block[rate - 1] ^= 0x80;          // Padding rule per Keccak spec
 80025e8:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80025ec:	3b01      	subs	r3, #1
 80025ee:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 80025f8:	3a01      	subs	r2, #1
 80025fa:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80025fe:	43db      	mvns	r3, r3
 8002600:	b2d9      	uxtb	r1, r3
 8002602:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8002606:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < rate; i += 8) {
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800260e:	e08d      	b.n	800272c <masked_keccak_sponge+0x47c>
        uint64_t lane = 0;
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8002622:	e02f      	b.n	8002684 <masked_keccak_sponge+0x3d4>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8002624:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8002628:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800262c:	4413      	add	r3, r2
 800262e:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8002632:	5cd3      	ldrb	r3, [r2, r3]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2200      	movs	r2, #0
 8002638:	461d      	mov	r5, r3
 800263a:	4616      	mov	r6, r2
 800263c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	f1a3 0120 	sub.w	r1, r3, #32
 8002646:	f1c3 0220 	rsb	r2, r3, #32
 800264a:	fa06 f903 	lsl.w	r9, r6, r3
 800264e:	fa05 f101 	lsl.w	r1, r5, r1
 8002652:	ea49 0901 	orr.w	r9, r9, r1
 8002656:	fa25 f202 	lsr.w	r2, r5, r2
 800265a:	ea49 0902 	orr.w	r9, r9, r2
 800265e:	fa05 f803 	lsl.w	r8, r5, r3
 8002662:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 8002666:	ea42 0108 	orr.w	r1, r2, r8
 800266a:	6039      	str	r1, [r7, #0]
 800266c:	ea43 0309 	orr.w	r3, r3, r9
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002676:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 800267a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800267e:	3301      	adds	r3, #1
 8002680:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8002684:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8002688:	2b07      	cmp	r3, #7
 800268a:	dc09      	bgt.n	80026a0 <masked_keccak_sponge+0x3f0>
 800268c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8002690:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8002694:	4413      	add	r3, r2
 8002696:	461a      	mov	r2, r3
 8002698:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800269c:	4293      	cmp	r3, r2
 800269e:	d8c1      	bhi.n	8002624 <masked_keccak_sponge+0x374>
        }

        size_t x = (i / 8) % 5;
 80026a0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da00      	bge.n	80026aa <masked_keccak_sponge+0x3fa>
 80026a8:	3307      	adds	r3, #7
 80026aa:	10db      	asrs	r3, r3, #3
 80026ac:	4619      	mov	r1, r3
 80026ae:	4b31      	ldr	r3, [pc, #196]	@ (8002774 <masked_keccak_sponge+0x4c4>)
 80026b0:	fb83 2301 	smull	r2, r3, r3, r1
 80026b4:	105a      	asrs	r2, r3, #1
 80026b6:	17cb      	asrs	r3, r1, #31
 80026b8:	1ad2      	subs	r2, r2, r3
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	1aca      	subs	r2, r1, r3
 80026c2:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
        size_t y = (i / 8) / 5;
 80026c6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80026ca:	4a2a      	ldr	r2, [pc, #168]	@ (8002774 <masked_keccak_sponge+0x4c4>)
 80026cc:	fb82 1203 	smull	r1, r2, r2, r3
 80026d0:	1112      	asrs	r2, r2, #4
 80026d2:	17db      	asrs	r3, r3, #31
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 80026da:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80026de:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80026e2:	4608      	mov	r0, r1
 80026e4:	f7fe ffe7 	bl	80016b6 <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 80026e8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80026ec:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 80026f0:	4613      	mov	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	4413      	add	r3, r2
 80026f6:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 80026fa:	4413      	add	r3, r2
 80026fc:	015b      	lsls	r3, r3, #5
 80026fe:	18c8      	adds	r0, r1, r3
 8002700:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002704:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8002712:	4413      	add	r3, r2
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	440b      	add	r3, r1
 8002718:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800271c:	4619      	mov	r1, r3
 800271e:	f7fe fc85 	bl	800102c <masked_xor>
    for (int i = 0; i < rate; i += 8) {
 8002722:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002726:	3308      	adds	r3, #8
 8002728:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800272c:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002730:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8002734:	429a      	cmp	r2, r3
 8002736:	f63f af6b 	bhi.w	8002610 <masked_keccak_sponge+0x360>
    }

    masked_keccak_f1600(state);
 800273a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fd98 	bl	8002274 <masked_keccak_f1600>

    //Step 4: Squeeze the requested output
    masked_squeeze(output, output_len, state, rate);
 8002744:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002748:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800274c:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 8002750:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002754:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 8002758:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800275c:	6809      	ldr	r1, [r1, #0]
 800275e:	6800      	ldr	r0, [r0, #0]
 8002760:	f7fe ffe8 	bl	8001734 <masked_squeeze>
 8002764:	46a5      	mov	sp, r4
}
 8002766:	bf00      	nop
 8002768:	f507 7775 	add.w	r7, r7, #980	@ 0x3d4
 800276c:	46bd      	mov	sp, r7
 800276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002772:	bf00      	nop
 8002774:	66666667 	.word	0x66666667

08002778 <masked_sha3_224>:


// SHA3-224: 28-byte output, 1152-bit rate
void masked_sha3_224(uint8_t *output, const uint8_t *input, size_t input_len) {
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 28, input, input_len, 1152 / 8, DOMAIN_SHA3);
 8002784:	2306      	movs	r3, #6
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	2390      	movs	r3, #144	@ 0x90
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	211c      	movs	r1, #28
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fd8c 	bl	80022b0 <masked_keccak_sponge>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <masked_sha3_256>:

// SHA3-256: Output = 32 bytes, Rate = 136 bytes (1088 bits)
void masked_sha3_256(uint8_t *output, const uint8_t *input, size_t input_len) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 32, input, input_len, 136, DOMAIN_SHA3);
 80027ac:	2306      	movs	r3, #6
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	2388      	movs	r3, #136	@ 0x88
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	2120      	movs	r1, #32
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f7ff fd78 	bl	80022b0 <masked_keccak_sponge>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <masked_sha3_384>:

// SHA3-384: 48-byte output, 832-bit rate
void masked_sha3_384(uint8_t *output, const uint8_t *input, size_t input_len) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 48, input, input_len, 832 / 8, DOMAIN_SHA3);
 80027d4:	2306      	movs	r3, #6
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2368      	movs	r3, #104	@ 0x68
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	2130      	movs	r1, #48	@ 0x30
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff fd64 	bl	80022b0 <masked_keccak_sponge>
}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <masked_sha3_512>:

// SHA3-512: Output = 64 bytes, Rate = 72 bytes (576 bits)
void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 64, input, input_len, 72, DOMAIN_SHA3);
 80027fc:	2306      	movs	r3, #6
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2348      	movs	r3, #72	@ 0x48
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	2140      	movs	r1, #64	@ 0x40
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f7ff fd50 	bl	80022b0 <masked_keccak_sponge>
}
 8002810:	bf00      	nop
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <masked_shake128>:

// SHAKE128: Extendable output, Rate = 168 bytes (1344 bits)
void masked_shake128(uint8_t *output, size_t output_len, const uint8_t *input, size_t input_len) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
    masked_keccak_sponge(output, output_len, input, input_len, 168, DOMAIN_SHAKE);
 8002826:	231f      	movs	r3, #31
 8002828:	9301      	str	r3, [sp, #4]
 800282a:	23a8      	movs	r3, #168	@ 0xa8
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff fd3b 	bl	80022b0 <masked_keccak_sponge>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <masked_shake256>:

// SHAKE256: Extendable output, Rate = 136 bytes (1088 bits)
void masked_shake256(uint8_t *output, size_t output_len, const uint8_t *input, size_t input_len) {
 8002842:	b580      	push	{r7, lr}
 8002844:	b086      	sub	sp, #24
 8002846:	af02      	add	r7, sp, #8
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
    masked_keccak_sponge(output, output_len, input, input_len, 136, DOMAIN_SHAKE);
 8002850:	231f      	movs	r3, #31
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2388      	movs	r3, #136	@ 0x88
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff fd26 	bl	80022b0 <masked_keccak_sponge>
}
 8002864:	bf00      	nop
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_MspInit+0x4c>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b0d      	ldr	r3, [pc, #52]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4b09      	ldr	r3, [pc, #36]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a08      	ldr	r2, [pc, #32]	@ (80028b8 <HAL_MspInit+0x4c>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_MspInit+0x4c>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028aa:	2007      	movs	r0, #7
 80028ac:	f000 fbd8 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40023800 	.word	0x40023800

080028bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b08a      	sub	sp, #40	@ 0x28
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0314 	add.w	r3, r7, #20
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
 80028d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	@ (8002940 <HAL_I2C_MspInit+0x84>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d12c      	bne.n	8002938 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	4a17      	ldr	r2, [pc, #92]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 80028e8:	f043 0302 	orr.w	r3, r3, #2
 80028ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80028fa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80028fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002900:	2312      	movs	r3, #18
 8002902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002904:	2301      	movs	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800290c:	2304      	movs	r3, #4
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002910:	f107 0314 	add.w	r3, r7, #20
 8002914:	4619      	mov	r1, r3
 8002916:	480c      	ldr	r0, [pc, #48]	@ (8002948 <HAL_I2C_MspInit+0x8c>)
 8002918:	f000 fbe4 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 8002926:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800292a:	6413      	str	r3, [r2, #64]	@ 0x40
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_I2C_MspInit+0x88>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002938:	bf00      	nop
 800293a:	3728      	adds	r7, #40	@ 0x28
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40005400 	.word	0x40005400
 8002944:	40023800 	.word	0x40023800
 8002948:	40020400 	.word	0x40020400

0800294c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b08e      	sub	sp, #56	@ 0x38
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
 800295c:	605a      	str	r2, [r3, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	60da      	str	r2, [r3, #12]
 8002962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a31      	ldr	r2, [pc, #196]	@ (8002a3c <HAL_I2S_MspInit+0xf0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d15a      	bne.n	8002a32 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800297c:	2301      	movs	r3, #1
 800297e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002980:	23c0      	movs	r3, #192	@ 0xc0
 8002982:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002984:	2302      	movs	r3, #2
 8002986:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4618      	mov	r0, r3
 800298e:	f004 f90f 	bl	8006bb0 <HAL_RCCEx_PeriphCLKConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002998:	f7fe fab2 	bl	8000f00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800299c:	2300      	movs	r3, #0
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	4a26      	ldr	r2, [pc, #152]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ac:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	4b20      	ldr	r3, [pc, #128]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029c2:	f043 0301 	orr.w	r3, r3, #1
 80029c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e4:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <HAL_I2S_MspInit+0xf4>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80029f0:	2310      	movs	r3, #16
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f4:	2302      	movs	r3, #2
 80029f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fc:	2300      	movs	r3, #0
 80029fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a00:	2306      	movs	r3, #6
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480e      	ldr	r0, [pc, #56]	@ (8002a44 <HAL_I2S_MspInit+0xf8>)
 8002a0c:	f000 fb6a 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002a10:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002a22:	2306      	movs	r3, #6
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4806      	ldr	r0, [pc, #24]	@ (8002a48 <HAL_I2S_MspInit+0xfc>)
 8002a2e:	f000 fb59 	bl	80030e4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002a32:	bf00      	nop
 8002a34:	3738      	adds	r7, #56	@ 0x38
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40003c00 	.word	0x40003c00
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000
 8002a48:	40020800 	.word	0x40020800

08002a4c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	@ (8002a88 <HAL_RNG_MspInit+0x3c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	@ (8002a8c <HAL_RNG_MspInit+0x40>)
 8002a64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a66:	4a09      	ldr	r2, [pc, #36]	@ (8002a8c <HAL_RNG_MspInit+0x40>)
 8002a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a6c:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a6e:	4b07      	ldr	r3, [pc, #28]	@ (8002a8c <HAL_RNG_MspInit+0x40>)
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	50060800 	.word	0x50060800
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	@ 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_SPI_MspInit+0x84>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d12b      	bne.n	8002b0a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	4a17      	ldr	r2, [pc, #92]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b11      	ldr	r3, [pc, #68]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a10      	ldr	r2, [pc, #64]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b0e      	ldr	r3, [pc, #56]	@ (8002b18 <HAL_SPI_MspInit+0x88>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002aea:	23e0      	movs	r3, #224	@ 0xe0
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af6:	2300      	movs	r3, #0
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002afa:	2305      	movs	r3, #5
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <HAL_SPI_MspInit+0x8c>)
 8002b06:	f000 faed 	bl	80030e4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	@ 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40013000 	.word	0x40013000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000

08002b20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ba4 <HAL_UART_MspInit+0x84>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d12b      	bne.n	8002b9a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	4b18      	ldr	r3, [pc, #96]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	4a17      	ldr	r2, [pc, #92]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	4a10      	ldr	r2, [pc, #64]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <HAL_UART_MspInit+0x88>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b86:	2303      	movs	r3, #3
 8002b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b8e:	f107 0314 	add.w	r3, r7, #20
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	@ (8002bac <HAL_UART_MspInit+0x8c>)
 8002b96:	f000 faa5 	bl	80030e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b9a:	bf00      	nop
 8002b9c:	3728      	adds	r7, #40	@ 0x28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40004400 	.word	0x40004400
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40020000 	.word	0x40020000

08002bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <NMI_Handler+0x4>

08002bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bbc:	bf00      	nop
 8002bbe:	e7fd      	b.n	8002bbc <HardFault_Handler+0x4>

08002bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <MemManage_Handler+0x4>

08002bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <BusFault_Handler+0x4>

08002bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <UsageFault_Handler+0x4>

08002bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c06:	f000 f917 	bl	8002e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002c14:	4802      	ldr	r0, [pc, #8]	@ (8002c20 <OTG_FS_IRQHandler+0x10>)
 8002c16:	f000 fefb 	bl	8003a10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	200005d4 	.word	0x200005d4

08002c24 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	e00a      	b.n	8002c4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c36:	f3af 8000 	nop.w
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	60ba      	str	r2, [r7, #8]
 8002c42:	b2ca      	uxtb	r2, r1
 8002c44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	dbf0      	blt.n	8002c36 <_read+0x12>
  }

  return len;
 8002c54:	687b      	ldr	r3, [r7, #4]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c86:	605a      	str	r2, [r3, #4]
  return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b085      	sub	sp, #20
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	60f8      	str	r0, [r7, #12]
 8002c9e:	60b9      	str	r1, [r7, #8]
 8002ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f008 fdfc 	bl	800b8dc <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20020000 	.word	0x20020000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	200001f0 	.word	0x200001f0
 8002d18:	20000b00 	.word	0x20000b00

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d44:	f7ff ffea 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d48:	480c      	ldr	r0, [pc, #48]	@ (8002d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4a:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d60:	4c0a      	ldr	r4, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f008 fdbb 	bl	800b8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d72:	f7fd fe51 	bl	8000a18 <main>
  bx  lr    
 8002d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002d84:	0800c440 	.word	0x0800c440
  ldr r2, =_sbss
 8002d88:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002d8c:	20000b00 	.word	0x20000b00

08002d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC_IRQHandler>
	...

08002d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd4 <HAL_Init+0x40>)
 8002d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da4:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd4 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <HAL_Init+0x40>)
 8002daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db0:	4b08      	ldr	r3, [pc, #32]	@ (8002dd4 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	@ (8002dd4 <HAL_Init+0x40>)
 8002db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dbc:	2003      	movs	r0, #3
 8002dbe:	f000 f94f 	bl	8003060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f000 f808 	bl	8002dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc8:	f7ff fd50 	bl	800286c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023c00 	.word	0x40023c00

08002dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_InitTick+0x54>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x58>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	4619      	mov	r1, r3
 8002dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f967 	bl	80030ca <HAL_SYSTICK_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e00e      	b.n	8002e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b0f      	cmp	r3, #15
 8002e0a:	d80a      	bhi.n	8002e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	f04f 30ff 	mov.w	r0, #4294967295
 8002e14:	f000 f92f 	bl	8003076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_InitTick+0x5c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	20000008 	.word	0x20000008
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_IncTick+0x20>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4413      	add	r3, r2
 8002e48:	4a04      	ldr	r2, [pc, #16]	@ (8002e5c <HAL_IncTick+0x24>)
 8002e4a:	6013      	str	r3, [r2, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008
 8002e5c:	200001f4 	.word	0x200001f4

08002e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return uwTick;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_GetTick+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	200001f4 	.word	0x200001f4

08002e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e80:	f7ff ffee 	bl	8002e60 <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e90:	d005      	beq.n	8002e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_Delay+0x44>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e9e:	bf00      	nop
 8002ea0:	f7ff ffde 	bl	8002e60 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d8f7      	bhi.n	8002ea0 <HAL_Delay+0x28>
  {
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000008 	.word	0x20000008

08002ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002edc:	4013      	ands	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef2:	4a04      	ldr	r2, [pc, #16]	@ (8002f04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	60d3      	str	r3, [r2, #12]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <__NVIC_GetPriorityGrouping+0x18>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	0a1b      	lsrs	r3, r3, #8
 8002f12:	f003 0307 	and.w	r3, r3, #7
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000ed00 	.word	0xe000ed00

08002f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	db0b      	blt.n	8002f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	f003 021f 	and.w	r2, r3, #31
 8002f3c:	4907      	ldr	r1, [pc, #28]	@ (8002f5c <__NVIC_EnableIRQ+0x38>)
 8002f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	2001      	movs	r0, #1
 8002f46:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000e100 	.word	0xe000e100

08002f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	6039      	str	r1, [r7, #0]
 8002f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	db0a      	blt.n	8002f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	490c      	ldr	r1, [pc, #48]	@ (8002fac <__NVIC_SetPriority+0x4c>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	440b      	add	r3, r1
 8002f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f88:	e00a      	b.n	8002fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4908      	ldr	r1, [pc, #32]	@ (8002fb0 <__NVIC_SetPriority+0x50>)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	3b04      	subs	r3, #4
 8002f98:	0112      	lsls	r2, r2, #4
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	761a      	strb	r2, [r3, #24]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000e100 	.word	0xe000e100
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b089      	sub	sp, #36	@ 0x24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f1c3 0307 	rsb	r3, r3, #7
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	bf28      	it	cs
 8002fd2:	2304      	movcs	r3, #4
 8002fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	2b06      	cmp	r3, #6
 8002fdc:	d902      	bls.n	8002fe4 <NVIC_EncodePriority+0x30>
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b03      	subs	r3, #3
 8002fe2:	e000      	b.n	8002fe6 <NVIC_EncodePriority+0x32>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43d9      	mvns	r1, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	4313      	orrs	r3, r2
         );
}
 800300e:	4618      	mov	r0, r3
 8003010:	3724      	adds	r7, #36	@ 0x24
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3b01      	subs	r3, #1
 8003028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800302c:	d301      	bcc.n	8003032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302e:	2301      	movs	r3, #1
 8003030:	e00f      	b.n	8003052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003032:	4a0a      	ldr	r2, [pc, #40]	@ (800305c <SysTick_Config+0x40>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303a:	210f      	movs	r1, #15
 800303c:	f04f 30ff 	mov.w	r0, #4294967295
 8003040:	f7ff ff8e 	bl	8002f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003044:	4b05      	ldr	r3, [pc, #20]	@ (800305c <SysTick_Config+0x40>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304a:	4b04      	ldr	r3, [pc, #16]	@ (800305c <SysTick_Config+0x40>)
 800304c:	2207      	movs	r2, #7
 800304e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	e000e010 	.word	0xe000e010

08003060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ff29 	bl	8002ec0 <__NVIC_SetPriorityGrouping>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af00      	add	r7, sp, #0
 800307c:	4603      	mov	r3, r0
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003088:	f7ff ff3e 	bl	8002f08 <__NVIC_GetPriorityGrouping>
 800308c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff8e 	bl	8002fb4 <NVIC_EncodePriority>
 8003098:	4602      	mov	r2, r0
 800309a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff ff5d 	bl	8002f60 <__NVIC_SetPriority>
}
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	4603      	mov	r3, r0
 80030b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff ff31 	bl	8002f24 <__NVIC_EnableIRQ>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ffa2 	bl	800301c <SysTick_Config>
 80030d8:	4603      	mov	r3, r0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e16b      	b.n	80033d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 815a 	bne.w	80033d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b4 	beq.w	80033d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b60      	ldr	r3, [pc, #384]	@ (80033f0 <HAL_GPIO_Init+0x30c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	4a5f      	ldr	r2, [pc, #380]	@ (80033f0 <HAL_GPIO_Init+0x30c>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003278:	6453      	str	r3, [r2, #68]	@ 0x44
 800327a:	4b5d      	ldr	r3, [pc, #372]	@ (80033f0 <HAL_GPIO_Init+0x30c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a5b      	ldr	r2, [pc, #364]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a52      	ldr	r2, [pc, #328]	@ (80033f8 <HAL_GPIO_Init+0x314>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a51      	ldr	r2, [pc, #324]	@ (80033fc <HAL_GPIO_Init+0x318>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a50      	ldr	r2, [pc, #320]	@ (8003400 <HAL_GPIO_Init+0x31c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	@ (8003404 <HAL_GPIO_Init+0x320>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x21a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	@ (8003408 <HAL_GPIO_Init+0x324>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x216>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4d      	ldr	r2, [pc, #308]	@ (800340c <HAL_GPIO_Init+0x328>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x212>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4c      	ldr	r2, [pc, #304]	@ (8003410 <HAL_GPIO_Init+0x32c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x20e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003414 <HAL_GPIO_Init+0x330>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x20a>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e00e      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032ee:	2308      	movs	r3, #8
 80032f0:	e00c      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e00a      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x228>
 800330a:	2300      	movs	r3, #0
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331c:	4935      	ldr	r1, [pc, #212]	@ (80033f4 <HAL_GPIO_Init+0x310>)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332a:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <HAL_GPIO_Init+0x334>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334e:	4a32      	ldr	r2, [pc, #200]	@ (8003418 <HAL_GPIO_Init+0x334>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003354:	4b30      	ldr	r3, [pc, #192]	@ (8003418 <HAL_GPIO_Init+0x334>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003378:	4a27      	ldr	r2, [pc, #156]	@ (8003418 <HAL_GPIO_Init+0x334>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_GPIO_Init+0x334>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_GPIO_Init+0x334>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <HAL_GPIO_Init+0x334>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033cc:	4a12      	ldr	r2, [pc, #72]	@ (8003418 <HAL_GPIO_Init+0x334>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	f67f ae90 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	@ 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40021400 	.word	0x40021400
 8003410:	40021800 	.word	0x40021800
 8003414:	40021c00 	.word	0x40021c00
 8003418:	40013c00 	.word	0x40013c00

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b086      	sub	sp, #24
 8003452:	af02      	add	r7, sp, #8
 8003454:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e059      	b.n	8003514 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f007 fc3a 	bl	800acf4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2203      	movs	r2, #3
 8003484:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800348e:	d102      	bne.n	8003496 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f004 fa53 	bl	8007946 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7c1a      	ldrb	r2, [r3, #16]
 80034a8:	f88d 2000 	strb.w	r2, [sp]
 80034ac:	3304      	adds	r3, #4
 80034ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b0:	f004 f9d4 	bl	800785c <USB_CoreInit>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e026      	b.n	8003514 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 fa4b 	bl	8007968 <USB_SetCurrentMode>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e017      	b.n	8003514 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	7c1a      	ldrb	r2, [r3, #16]
 80034ec:	f88d 2000 	strb.w	r2, [sp]
 80034f0:	3304      	adds	r3, #4
 80034f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034f4:	f004 fbee 	bl	8007cd4 <USB_HostInit>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d005      	beq.n	800350a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2202      	movs	r2, #2
 8003502:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e004      	b.n	8003514 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b08b      	sub	sp, #44	@ 0x2c
 8003520:	af04      	add	r7, sp, #16
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	4608      	mov	r0, r1
 8003526:	4611      	mov	r1, r2
 8003528:	461a      	mov	r2, r3
 800352a:	4603      	mov	r3, r0
 800352c:	70fb      	strb	r3, [r7, #3]
 800352e:	460b      	mov	r3, r1
 8003530:	70bb      	strb	r3, [r7, #2]
 8003532:	4613      	mov	r3, r2
 8003534:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003536:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003538:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_HCD_HC_Init+0x2c>
 8003544:	2302      	movs	r3, #2
 8003546:	e09d      	b.n	8003684 <HAL_HCD_HC_Init+0x168>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	3319      	adds	r3, #25
 8003560:	2200      	movs	r2, #0
 8003562:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	3314      	adds	r3, #20
 8003574:	787a      	ldrb	r2, [r7, #1]
 8003576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3315      	adds	r3, #21
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3326      	adds	r3, #38	@ 0x26
 800359c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80035a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	78bb      	ldrb	r3, [r7, #2]
 80035a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035aa:	b2d8      	uxtb	r0, r3
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	1a9b      	subs	r3, r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3316      	adds	r3, #22
 80035ba:	4602      	mov	r2, r0
 80035bc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fbc8 	bl	8003d58 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80035c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da0a      	bge.n	80035e6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	3317      	adds	r3, #23
 80035e0:	2201      	movs	r2, #1
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	e009      	b.n	80035fa <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3317      	adds	r3, #23
 80035f6:	2200      	movs	r2, #0
 80035f8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 fccc 	bl	8007f9c <USB_GetHostSpeed>
 8003604:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003606:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10b      	bne.n	8003626 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800360e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003612:	2b01      	cmp	r3, #1
 8003614:	d107      	bne.n	8003626 <HAL_HCD_HC_Init+0x10a>
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2bbc      	cmp	r3, #188	@ 0xbc
 8003620:	d901      	bls.n	8003626 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003622:	23bc      	movs	r3, #188	@ 0xbc
 8003624:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	3318      	adds	r3, #24
 8003636:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800363a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	b298      	uxth	r0, r3
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	4602      	mov	r2, r0
 8003652:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	b29b      	uxth	r3, r3
 800365c:	787c      	ldrb	r4, [r7, #1]
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	78f9      	ldrb	r1, [r7, #3]
 8003662:	9302      	str	r3, [sp, #8]
 8003664:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800366e:	9300      	str	r3, [sp, #0]
 8003670:	4623      	mov	r3, r4
 8003672:	f004 fcbb 	bl	8007fec <USB_HC_Init>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd90      	pop	{r4, r7, pc}

0800368c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_HCD_HC_Halt+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e00f      	b.n	80036ca <HAL_HCD_HC_Halt+0x3e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 f84d 	bl	800875a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	70fb      	strb	r3, [r7, #3]
 80036e6:	460b      	mov	r3, r1
 80036e8:	70bb      	strb	r3, [r7, #2]
 80036ea:	4613      	mov	r3, r2
 80036ec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	1a9b      	subs	r3, r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	440b      	add	r3, r1
 80036fc:	3317      	adds	r3, #23
 80036fe:	78ba      	ldrb	r2, [r7, #2]
 8003700:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	3326      	adds	r3, #38	@ 0x26
 8003712:	787a      	ldrb	r2, [r7, #1]
 8003714:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003716:	7c3b      	ldrb	r3, [r7, #16]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d114      	bne.n	8003746 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	332a      	adds	r3, #42	@ 0x2a
 800372c:	2203      	movs	r2, #3
 800372e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3319      	adds	r3, #25
 8003740:	7f3a      	ldrb	r2, [r7, #28]
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	e009      	b.n	800375a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	332a      	adds	r3, #42	@ 0x2a
 8003756:	2202      	movs	r2, #2
 8003758:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800375a:	787b      	ldrb	r3, [r7, #1]
 800375c:	2b03      	cmp	r3, #3
 800375e:	f200 8102 	bhi.w	8003966 <HAL_HCD_HC_SubmitRequest+0x292>
 8003762:	a201      	add	r2, pc, #4	@ (adr r2, 8003768 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003768:	08003779 	.word	0x08003779
 800376c:	08003951 	.word	0x08003951
 8003770:	0800383d 	.word	0x0800383d
 8003774:	080038c7 	.word	0x080038c7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003778:	7c3b      	ldrb	r3, [r7, #16]
 800377a:	2b01      	cmp	r3, #1
 800377c:	f040 80f5 	bne.w	800396a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003780:	78bb      	ldrb	r3, [r7, #2]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12d      	bne.n	80037e2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003786:	8b3b      	ldrh	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	333d      	adds	r3, #61	@ 0x3d
 800379c:	2201      	movs	r2, #1
 800379e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	333d      	adds	r3, #61	@ 0x3d
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	332a      	adds	r3, #42	@ 0x2a
 80037c6:	2200      	movs	r2, #0
 80037c8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80037ca:	e0ce      	b.n	800396a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	332a      	adds	r3, #42	@ 0x2a
 80037dc:	2202      	movs	r2, #2
 80037de:	701a      	strb	r2, [r3, #0]
      break;
 80037e0:	e0c3      	b.n	800396a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	331a      	adds	r3, #26
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 80b8 	bne.w	800396a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	333c      	adds	r3, #60	@ 0x3c
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	332a      	adds	r3, #42	@ 0x2a
 8003820:	2200      	movs	r2, #0
 8003822:	701a      	strb	r2, [r3, #0]
      break;
 8003824:	e0a1      	b.n	800396a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	332a      	adds	r3, #42	@ 0x2a
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
      break;
 800383a:	e096      	b.n	800396a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800383c:	78bb      	ldrb	r3, [r7, #2]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d120      	bne.n	8003884 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	333d      	adds	r3, #61	@ 0x3d
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	332a      	adds	r3, #42	@ 0x2a
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800386c:	e07e      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	332a      	adds	r3, #42	@ 0x2a
 800387e:	2202      	movs	r2, #2
 8003880:	701a      	strb	r2, [r3, #0]
      break;
 8003882:	e073      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	333c      	adds	r3, #60	@ 0x3c
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	332a      	adds	r3, #42	@ 0x2a
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
      break;
 80038ae:	e05d      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	332a      	adds	r3, #42	@ 0x2a
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]
      break;
 80038c4:	e052      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038c6:	78bb      	ldrb	r3, [r7, #2]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d120      	bne.n	800390e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	333d      	adds	r3, #61	@ 0x3d
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e2:	78fa      	ldrb	r2, [r7, #3]
 80038e4:	6879      	ldr	r1, [r7, #4]
 80038e6:	4613      	mov	r3, r2
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	332a      	adds	r3, #42	@ 0x2a
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038f6:	e039      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	332a      	adds	r3, #42	@ 0x2a
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]
      break;
 800390c:	e02e      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800390e:	78fa      	ldrb	r2, [r7, #3]
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	4613      	mov	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	440b      	add	r3, r1
 800391c:	333c      	adds	r3, #60	@ 0x3c
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10a      	bne.n	800393a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	332a      	adds	r3, #42	@ 0x2a
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
      break;
 8003938:	e018      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	332a      	adds	r3, #42	@ 0x2a
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e00d      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	332a      	adds	r3, #42	@ 0x2a
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
      break;
 8003964:	e002      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003966:	bf00      	nop
 8003968:	e000      	b.n	800396c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800396a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	332c      	adds	r3, #44	@ 0x2c
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	8b39      	ldrh	r1, [r7, #24]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4403      	add	r3, r0
 8003990:	3334      	adds	r3, #52	@ 0x34
 8003992:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	334c      	adds	r3, #76	@ 0x4c
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3338      	adds	r3, #56	@ 0x38
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3315      	adds	r3, #21
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	334d      	adds	r3, #77	@ 0x4d
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	3310      	adds	r3, #16
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	1d19      	adds	r1, r3, #4
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	799b      	ldrb	r3, [r3, #6]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f004 fc20 	bl	8008244 <USB_HC_StartXfer>
 8003a04:	4603      	mov	r3, r0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop

08003a10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 f914 	bl	8007c54 <USB_GetMode>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	f040 80fb 	bne.w	8003c2a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f004 f8d7 	bl	8007bec <USB_ReadInterrupts>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 80f1 	beq.w	8003c28 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 f8ce 	bl	8007bec <USB_ReadInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a5a:	d104      	bne.n	8003a66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 f8be 	bl	8007bec <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a7a:	d104      	bne.n	8003a86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f004 f8ae 	bl	8007bec <USB_ReadInterrupts>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a9a:	d104      	bne.n	8003aa6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003aa4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 f89e 	bl	8007bec <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d103      	bne.n	8003ac2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 f890 	bl	8007bec <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ad6:	d120      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ae0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d113      	bne.n	8003b1a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003af2:	2110      	movs	r1, #16
 8003af4:	6938      	ldr	r0, [r7, #16]
 8003af6:	f003 ff83 	bl	8007a00 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003afa:	6938      	ldr	r0, [r7, #16]
 8003afc:	f003 ffb2 	bl	8007a64 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	7a5b      	ldrb	r3, [r3, #9]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d105      	bne.n	8003b14 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f004 f9a4 	bl	8007e5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f007 f96b 	bl	800adf0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f004 f864 	bl	8007bec <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b2e:	d102      	bne.n	8003b36 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f001 fd4d 	bl	80055d0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 f856 	bl	8007bec <USB_ReadInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d106      	bne.n	8003b58 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f007 f934 	bl	800adb8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2208      	movs	r2, #8
 8003b56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 f845 	bl	8007bec <USB_ReadInterrupts>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b6c:	d139      	bne.n	8003be2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 fde0 	bl	8008738 <USB_HC_ReadInterrupt>
 8003b78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e025      	b.n	8003bcc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003baa:	d106      	bne.n	8003bba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f905 	bl	8003dc2 <HCD_HC_IN_IRQHandler>
 8003bb8:	e005      	b.n	8003bc6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 ff67 	bl	8004a94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	795b      	ldrb	r3, [r3, #5]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d3d3      	bcc.n	8003b80 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f004 f800 	bl	8007bec <USB_ReadInterrupts>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f003 0310 	and.w	r3, r3, #16
 8003bf2:	2b10      	cmp	r3, #16
 8003bf4:	d101      	bne.n	8003bfa <HAL_HCD_IRQHandler+0x1ea>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_HCD_IRQHandler+0x1ec>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d014      	beq.n	8003c2a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0210 	bic.w	r2, r2, #16
 8003c0e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f001 fbfe 	bl	8005412 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699a      	ldr	r2, [r3, #24]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 0210 	orr.w	r2, r2, #16
 8003c24:	619a      	str	r2, [r3, #24]
 8003c26:	e000      	b.n	8003c2a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003c28:	bf00      	nop
    }
  }
}
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_HCD_Start+0x16>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e013      	b.n	8003c6e <HAL_HCD_Start+0x3e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f004 f968 	bl	8007f2a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f003 fe60 	bl	8007924 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_HCD_Stop+0x16>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e00d      	b.n	8003ca8 <HAL_HCD_Stop+0x32>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f004 febb 	bl	8008a14 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 f90a 	bl	8007ed6 <USB_ResetPort>
 8003cc2:	4603      	mov	r3, r0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334c      	adds	r3, #76	@ 0x4c
 8003ce8:	781b      	ldrb	r3, [r3, #0]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3338      	adds	r3, #56	@ 0x38
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f004 f94c 	bl	8007fca <USB_GetCurrentFrame>
 8003d32:	4603      	mov	r3, r0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 f927 	bl	8007f9c <USB_GetHostSpeed>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	460b      	mov	r3, r1
 8003d62:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	331a      	adds	r3, #26
 8003d74:	2200      	movs	r2, #0
 8003d76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	331b      	adds	r3, #27
 8003d88:	2200      	movs	r2, #0
 8003d8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3325      	adds	r3, #37	@ 0x25
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3324      	adds	r3, #36	@ 0x24
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f003 ff16 	bl	8007c12 <USB_ReadChInterrupts>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d11a      	bne.n	8003e26 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2304      	movs	r3, #4
 8003e00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	2207      	movs	r2, #7
 8003e14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f004 fc9b 	bl	800875a <USB_HC_Halt>
 8003e24:	e09e      	b.n	8003f64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	78fa      	ldrb	r2, [r7, #3]
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f003 feef 	bl	8007c12 <USB_ReadChInterrupts>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e3e:	d11b      	bne.n	8003e78 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	334d      	adds	r3, #77	@ 0x4d
 8003e64:	2208      	movs	r2, #8
 8003e66:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f004 fc72 	bl	800875a <USB_HC_Halt>
 8003e76:	e075      	b.n	8003f64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 fec6 	bl	8007c12 <USB_ReadChInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d11a      	bne.n	8003ec6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	334d      	adds	r3, #77	@ 0x4d
 8003eb2:	2206      	movs	r2, #6
 8003eb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 fc4b 	bl	800875a <USB_HC_Halt>
 8003ec4:	e04e      	b.n	8003f64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	78fa      	ldrb	r2, [r7, #3]
 8003ecc:	4611      	mov	r1, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fe9f 	bl	8007c12 <USB_ReadChInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ede:	d11b      	bne.n	8003f18 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eec:	461a      	mov	r2, r3
 8003eee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ef2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	6879      	ldr	r1, [r7, #4]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	1a9b      	subs	r3, r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	334d      	adds	r3, #77	@ 0x4d
 8003f04:	2209      	movs	r2, #9
 8003f06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f004 fc22 	bl	800875a <USB_HC_Halt>
 8003f16:	e025      	b.n	8003f64 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	4611      	mov	r1, r2
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 fe76 	bl	8007c12 <USB_ReadChInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2c:	2b80      	cmp	r3, #128	@ 0x80
 8003f2e:	d119      	bne.n	8003f64 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	2380      	movs	r3, #128	@ 0x80
 8003f40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334d      	adds	r3, #77	@ 0x4d
 8003f52:	2207      	movs	r2, #7
 8003f54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f004 fbfb 	bl	800875a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	78fa      	ldrb	r2, [r7, #3]
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f003 fe50 	bl	8007c12 <USB_ReadChInterrupts>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f7c:	d112      	bne.n	8003fa4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f004 fbe7 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f9e:	6093      	str	r3, [r2, #8]
 8003fa0:	f000 bd75 	b.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	78fa      	ldrb	r2, [r7, #3]
 8003faa:	4611      	mov	r1, r2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 fe30 	bl	8007c12 <USB_ReadChInterrupts>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	f040 8128 	bne.w	800420e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2320      	movs	r3, #32
 8003fce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fd0:	78fa      	ldrb	r2, [r7, #3]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	331b      	adds	r3, #27
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d119      	bne.n	800401a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	1a9b      	subs	r3, r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	331b      	adds	r3, #27
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	440a      	add	r2, r1
 8004010:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004018:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	799b      	ldrb	r3, [r3, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	3330      	adds	r3, #48	@ 0x30
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	78fb      	ldrb	r3, [r7, #3]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	1ac9      	subs	r1, r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4403      	add	r3, r0
 8004056:	3338      	adds	r3, #56	@ 0x38
 8004058:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	440b      	add	r3, r1
 8004068:	334d      	adds	r3, #77	@ 0x4d
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3344      	adds	r3, #68	@ 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4413      	add	r3, r2
 800408a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800408e:	461a      	mov	r2, r3
 8004090:	2301      	movs	r3, #1
 8004092:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004094:	78fa      	ldrb	r2, [r7, #3]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	1a9b      	subs	r3, r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3326      	adds	r3, #38	@ 0x26
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3326      	adds	r3, #38	@ 0x26
 80040ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d110      	bne.n	80040e2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f004 fb46 	bl	800875a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	2310      	movs	r3, #16
 80040de:	6093      	str	r3, [r2, #8]
 80040e0:	e03d      	b.n	800415e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3326      	adds	r3, #38	@ 0x26
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d00a      	beq.n	800410e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	1a9b      	subs	r3, r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	3326      	adds	r3, #38	@ 0x26
 8004108:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800410a:	2b01      	cmp	r3, #1
 800410c:	d127      	bne.n	800415e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4413      	add	r3, r2
 8004116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	0151      	lsls	r1, r2, #5
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	440a      	add	r2, r1
 8004124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004128:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800412c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334c      	adds	r3, #76	@ 0x4c
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	334c      	adds	r3, #76	@ 0x4c
 8004152:	781a      	ldrb	r2, [r3, #0]
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	4619      	mov	r1, r3
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f006 fe57 	bl	800ae0c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	799b      	ldrb	r3, [r3, #6]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d13b      	bne.n	80041de <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004166:	78fa      	ldrb	r2, [r7, #3]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	3338      	adds	r3, #56	@ 0x38
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	78fa      	ldrb	r2, [r7, #3]
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	4613      	mov	r3, r2
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	1a9b      	subs	r3, r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4403      	add	r3, r0
 8004186:	3328      	adds	r3, #40	@ 0x28
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	440b      	add	r3, r1
 800418c:	1e59      	subs	r1, r3, #1
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4403      	add	r3, r0
 800419c:	3328      	adds	r3, #40	@ 0x28
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8470 	beq.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	333c      	adds	r3, #60	@ 0x3c
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	f083 0301 	eor.w	r3, r3, #1
 80041c6:	b2d8      	uxtb	r0, r3
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	333c      	adds	r3, #60	@ 0x3c
 80041d6:	4602      	mov	r2, r0
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	f000 bc58 	b.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	333c      	adds	r3, #60	@ 0x3c
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	78fa      	ldrb	r2, [r7, #3]
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2d8      	uxtb	r0, r3
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	333c      	adds	r3, #60	@ 0x3c
 8004206:	4602      	mov	r2, r0
 8004208:	701a      	strb	r2, [r3, #0]
 800420a:	f000 bc40 	b.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	4611      	mov	r1, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f003 fcfb 	bl	8007c12 <USB_ReadChInterrupts>
 800421c:	4603      	mov	r3, r0
 800421e:	f003 0320 	and.w	r3, r3, #32
 8004222:	2b20      	cmp	r3, #32
 8004224:	d131      	bne.n	800428a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004226:	78fb      	ldrb	r3, [r7, #3]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004232:	461a      	mov	r2, r3
 8004234:	2320      	movs	r3, #32
 8004236:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	331a      	adds	r3, #26
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b01      	cmp	r3, #1
 800424c:	f040 841f 	bne.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004250:	78fa      	ldrb	r2, [r7, #3]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	331b      	adds	r3, #27
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	334d      	adds	r3, #77	@ 0x4d
 8004274:	2203      	movs	r2, #3
 8004276:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f004 fa6a 	bl	800875a <USB_HC_Halt>
 8004286:	f000 bc02 	b.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f003 fcbd 	bl	8007c12 <USB_ReadChInterrupts>
 8004298:	4603      	mov	r3, r0
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	f040 8305 	bne.w	80048ae <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	2302      	movs	r3, #2
 80042b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	334d      	adds	r3, #77	@ 0x4d
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d114      	bne.n	80042f6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	334d      	adds	r3, #77	@ 0x4d
 80042dc:	2202      	movs	r2, #2
 80042de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334c      	adds	r3, #76	@ 0x4c
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e2cc      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334d      	adds	r3, #77	@ 0x4d
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d114      	bne.n	8004336 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	1a9b      	subs	r3, r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	334d      	adds	r3, #77	@ 0x4d
 800431c:	2202      	movs	r2, #2
 800431e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004320:	78fa      	ldrb	r2, [r7, #3]
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	4613      	mov	r3, r2
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	334c      	adds	r3, #76	@ 0x4c
 8004330:	2205      	movs	r2, #5
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e2ac      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	334d      	adds	r3, #77	@ 0x4d
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b07      	cmp	r3, #7
 800434a:	d00b      	beq.n	8004364 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	334d      	adds	r3, #77	@ 0x4d
 800435c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800435e:	2b09      	cmp	r3, #9
 8004360:	f040 80a6 	bne.w	80044b0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	334d      	adds	r3, #77	@ 0x4d
 8004374:	2202      	movs	r2, #2
 8004376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3344      	adds	r3, #68	@ 0x44
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	1c59      	adds	r1, r3, #1
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	011b      	lsls	r3, r3, #4
 8004392:	1a9b      	subs	r3, r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	4403      	add	r3, r0
 8004398:	3344      	adds	r3, #68	@ 0x44
 800439a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	4613      	mov	r3, r2
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	1a9b      	subs	r3, r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	3344      	adds	r3, #68	@ 0x44
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d943      	bls.n	800443a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80043b2:	78fa      	ldrb	r2, [r7, #3]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	1a9b      	subs	r3, r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	440b      	add	r3, r1
 80043c0:	3344      	adds	r3, #68	@ 0x44
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	331a      	adds	r3, #26
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d123      	bne.n	8004424 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	331b      	adds	r3, #27
 80043ec:	2200      	movs	r2, #0
 80043ee:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80043f0:	78fa      	ldrb	r2, [r7, #3]
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	1a9b      	subs	r3, r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	331c      	adds	r3, #28
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	440a      	add	r2, r1
 800441a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800441e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004422:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	334c      	adds	r3, #76	@ 0x4c
 8004434:	2204      	movs	r2, #4
 8004436:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004438:	e229      	b.n	800488e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	334c      	adds	r3, #76	@ 0x4c
 800444a:	2202      	movs	r2, #2
 800444c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3326      	adds	r3, #38	@ 0x26
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3326      	adds	r3, #38	@ 0x26
 8004474:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004476:	2b02      	cmp	r3, #2
 8004478:	f040 8209 	bne.w	800488e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800447c:	78fb      	ldrb	r3, [r7, #3]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004492:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800449a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a8:	461a      	mov	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044ae:	e1ee      	b.n	800488e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334d      	adds	r3, #77	@ 0x4d
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b05      	cmp	r3, #5
 80044c4:	f040 80c8 	bne.w	8004658 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	334d      	adds	r3, #77	@ 0x4d
 80044d8:	2202      	movs	r2, #2
 80044da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	331b      	adds	r3, #27
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	f040 81ce 	bne.w	8004890 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3326      	adds	r3, #38	@ 0x26
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b03      	cmp	r3, #3
 8004508:	d16b      	bne.n	80045e2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3348      	adds	r3, #72	@ 0x48
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4403      	add	r3, r0
 800452a:	3348      	adds	r3, #72	@ 0x48
 800452c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3348      	adds	r3, #72	@ 0x48
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d943      	bls.n	80045cc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	3348      	adds	r3, #72	@ 0x48
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004558:	78fa      	ldrb	r2, [r7, #3]
 800455a:	6879      	ldr	r1, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	331b      	adds	r3, #27
 8004568:	2200      	movs	r2, #0
 800456a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	3344      	adds	r3, #68	@ 0x44
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b02      	cmp	r3, #2
 8004580:	d809      	bhi.n	8004596 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	331c      	adds	r3, #28
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	4413      	add	r3, r2
 800459e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	78fa      	ldrb	r2, [r7, #3]
 80045a6:	0151      	lsls	r1, r2, #5
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	440a      	add	r2, r1
 80045ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80045b6:	78fa      	ldrb	r2, [r7, #3]
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	334c      	adds	r3, #76	@ 0x4c
 80045c6:	2204      	movs	r2, #4
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	e014      	b.n	80045f6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	334c      	adds	r3, #76	@ 0x4c
 80045dc:	2202      	movs	r2, #2
 80045de:	701a      	strb	r2, [r3, #0]
 80045e0:	e009      	b.n	80045f6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334c      	adds	r3, #76	@ 0x4c
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3326      	adds	r3, #38	@ 0x26
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3326      	adds	r3, #38	@ 0x26
 800461c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800461e:	2b02      	cmp	r3, #2
 8004620:	f040 8136 	bne.w	8004890 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4413      	add	r3, r2
 800462c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800463a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004642:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6013      	str	r3, [r2, #0]
 8004656:	e11b      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334d      	adds	r3, #77	@ 0x4d
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b03      	cmp	r3, #3
 800466c:	f040 8081 	bne.w	8004772 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004670:	78fa      	ldrb	r2, [r7, #3]
 8004672:	6879      	ldr	r1, [r7, #4]
 8004674:	4613      	mov	r3, r2
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	1a9b      	subs	r3, r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	440b      	add	r3, r1
 800467e:	334d      	adds	r3, #77	@ 0x4d
 8004680:	2202      	movs	r2, #2
 8004682:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	331b      	adds	r3, #27
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	f040 80fa 	bne.w	8004890 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	0151      	lsls	r1, r2, #5
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	440a      	add	r2, r1
 80046c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ce:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	0151      	lsls	r1, r2, #5
 80046e2:	693a      	ldr	r2, [r7, #16]
 80046e4:	440a      	add	r2, r1
 80046e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ee:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	0151      	lsls	r1, r2, #5
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	440a      	add	r2, r1
 8004706:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800470a:	f023 0320 	bic.w	r3, r3, #32
 800470e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3326      	adds	r3, #38	@ 0x26
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00b      	beq.n	800473e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004726:	78fa      	ldrb	r2, [r7, #3]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	1a9b      	subs	r3, r3, r2
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	440b      	add	r3, r1
 8004734:	3326      	adds	r3, #38	@ 0x26
 8004736:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004738:	2b02      	cmp	r3, #2
 800473a:	f040 80a9 	bne.w	8004890 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4413      	add	r3, r2
 8004746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004754:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800475c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800475e:	78fb      	ldrb	r3, [r7, #3]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	4413      	add	r3, r2
 8004766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	e08e      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	1a9b      	subs	r3, r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	440b      	add	r3, r1
 8004780:	334d      	adds	r3, #77	@ 0x4d
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d143      	bne.n	8004810 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004788:	78fa      	ldrb	r2, [r7, #3]
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	4613      	mov	r3, r2
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	334d      	adds	r3, #77	@ 0x4d
 8004798:	2202      	movs	r2, #2
 800479a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	334c      	adds	r3, #76	@ 0x4c
 80047ac:	2202      	movs	r2, #2
 80047ae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047b0:	78fa      	ldrb	r2, [r7, #3]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	3326      	adds	r3, #38	@ 0x26
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	3326      	adds	r3, #38	@ 0x26
 80047d6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d159      	bne.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047f2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047fa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004808:	461a      	mov	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e03f      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004810:	78fa      	ldrb	r2, [r7, #3]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	334d      	adds	r3, #77	@ 0x4d
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b08      	cmp	r3, #8
 8004824:	d126      	bne.n	8004874 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	334d      	adds	r3, #77	@ 0x4d
 8004836:	2202      	movs	r2, #2
 8004838:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800483a:	78fa      	ldrb	r2, [r7, #3]
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	4613      	mov	r3, r2
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	1a9b      	subs	r3, r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	3344      	adds	r3, #68	@ 0x44
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4403      	add	r3, r0
 800485a:	3344      	adds	r3, #68	@ 0x44
 800485c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334c      	adds	r3, #76	@ 0x4c
 800486e:	2204      	movs	r2, #4
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e00d      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	334d      	adds	r3, #77	@ 0x4d
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b02      	cmp	r3, #2
 8004888:	f000 8100 	beq.w	8004a8c <HCD_HC_IN_IRQHandler+0xcca>
 800488c:	e000      	b.n	8004890 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800488e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	334c      	adds	r3, #76	@ 0x4c
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f006 fab0 	bl	800ae0c <HAL_HCD_HC_NotifyURBChange_Callback>
 80048ac:	e0ef      	b.n	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	78fa      	ldrb	r2, [r7, #3]
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f003 f9ab 	bl	8007c12 <USB_ReadChInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d12f      	bne.n	8004926 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048c6:	78fb      	ldrb	r3, [r7, #3]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048d2:	461a      	mov	r2, r3
 80048d4:	2340      	movs	r3, #64	@ 0x40
 80048d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80048d8:	78fa      	ldrb	r2, [r7, #3]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	4613      	mov	r3, r2
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	1a9b      	subs	r3, r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	440b      	add	r3, r1
 80048e6:	334d      	adds	r3, #77	@ 0x4d
 80048e8:	2205      	movs	r2, #5
 80048ea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048ec:	78fa      	ldrb	r2, [r7, #3]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	1a9b      	subs	r3, r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	331a      	adds	r3, #26
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	3344      	adds	r3, #68	@ 0x44
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	78fa      	ldrb	r2, [r7, #3]
 800491c:	4611      	mov	r1, r2
 800491e:	4618      	mov	r0, r3
 8004920:	f003 ff1b 	bl	800875a <USB_HC_Halt>
 8004924:	e0b3      	b.n	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	78fa      	ldrb	r2, [r7, #3]
 800492c:	4611      	mov	r1, r2
 800492e:	4618      	mov	r0, r3
 8004930:	f003 f96f 	bl	8007c12 <USB_ReadChInterrupts>
 8004934:	4603      	mov	r3, r0
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b10      	cmp	r3, #16
 800493c:	f040 80a7 	bne.w	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004940:	78fa      	ldrb	r2, [r7, #3]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	3326      	adds	r3, #38	@ 0x26
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b03      	cmp	r3, #3
 8004954:	d11b      	bne.n	800498e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	3344      	adds	r3, #68	@ 0x44
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	1a9b      	subs	r3, r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	334d      	adds	r3, #77	@ 0x4d
 800497a:	2204      	movs	r2, #4
 800497c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f003 fee7 	bl	800875a <USB_HC_Halt>
 800498c:	e03f      	b.n	8004a0e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3326      	adds	r3, #38	@ 0x26
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80049a4:	78fa      	ldrb	r2, [r7, #3]
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	4613      	mov	r3, r2
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	1a9b      	subs	r3, r3, r2
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	440b      	add	r3, r1
 80049b2:	3326      	adds	r3, #38	@ 0x26
 80049b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d129      	bne.n	8004a0e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3344      	adds	r3, #68	@ 0x44
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	799b      	ldrb	r3, [r3, #6]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HCD_HC_IN_IRQHandler+0xc2a>
 80049d6:	78fa      	ldrb	r2, [r7, #3]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	1a9b      	subs	r3, r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	440b      	add	r3, r1
 80049e4:	331b      	adds	r3, #27
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d110      	bne.n	8004a0e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	334d      	adds	r3, #77	@ 0x4d
 80049fc:	2204      	movs	r2, #4
 80049fe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	4611      	mov	r1, r2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f003 fea6 	bl	800875a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	331b      	adds	r3, #27
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d129      	bne.n	8004a78 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	331b      	adds	r3, #27
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	0151      	lsls	r1, r2, #5
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	440a      	add	r2, r1
 8004a4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a56:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004a58:	78fb      	ldrb	r3, [r7, #3]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	78fa      	ldrb	r2, [r7, #3]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a72:	f043 0320 	orr.w	r3, r3, #32
 8004a76:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a84:	461a      	mov	r2, r3
 8004a86:	2310      	movs	r3, #16
 8004a88:	6093      	str	r3, [r2, #8]
 8004a8a:	e000      	b.n	8004a8e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004a8c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 f8ad 	bl	8007c12 <USB_ReadChInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d11b      	bne.n	8004afa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	334d      	adds	r3, #77	@ 0x4d
 8004ae4:	2207      	movs	r2, #7
 8004ae6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	4611      	mov	r1, r2
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 fe32 	bl	800875a <USB_HC_Halt>
 8004af6:	f000 bc89 	b.w	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	4611      	mov	r1, r2
 8004b02:	4618      	mov	r0, r3
 8004b04:	f003 f885 	bl	8007c12 <USB_ReadChInterrupts>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f003 0320 	and.w	r3, r3, #32
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	f040 8082 	bne.w	8004c18 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	2320      	movs	r3, #32
 8004b24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3319      	adds	r3, #25
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d124      	bne.n	8004b86 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	3319      	adds	r3, #25
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b50:	78fa      	ldrb	r2, [r7, #3]
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	334c      	adds	r3, #76	@ 0x4c
 8004b60:	2202      	movs	r2, #2
 8004b62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	6879      	ldr	r1, [r7, #4]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	440b      	add	r3, r1
 8004b72:	334d      	adds	r3, #77	@ 0x4d
 8004b74:	2203      	movs	r2, #3
 8004b76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	4611      	mov	r1, r2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f003 fdea 	bl	800875a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	331a      	adds	r3, #26
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	f040 8437 	bne.w	800540c <HCD_HC_OUT_IRQHandler+0x978>
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	331b      	adds	r3, #27
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 842b 	bne.w	800540c <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	3326      	adds	r3, #38	@ 0x26
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d009      	beq.n	8004be0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004bcc:	78fa      	ldrb	r2, [r7, #3]
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	331b      	adds	r3, #27
 8004bdc:	2201      	movs	r2, #1
 8004bde:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	6879      	ldr	r1, [r7, #4]
 8004be4:	4613      	mov	r3, r2
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	440b      	add	r3, r1
 8004bee:	334d      	adds	r3, #77	@ 0x4d
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	78fa      	ldrb	r2, [r7, #3]
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f003 fdac 	bl	800875a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	3344      	adds	r3, #68	@ 0x44
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
 8004c16:	e3f9      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f002 fff6 	bl	8007c12 <USB_ReadChInterrupts>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c30:	d111      	bne.n	8004c56 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c44:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f003 fd83 	bl	800875a <USB_HC_Halt>
 8004c54:	e3da      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f002 ffd7 	bl	8007c12 <USB_ReadChInterrupts>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d168      	bne.n	8004d40 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	6879      	ldr	r1, [r7, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	1a9b      	subs	r3, r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	440b      	add	r3, r1
 8004c7c:	3344      	adds	r3, #68	@ 0x44
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	4611      	mov	r1, r2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f002 ffc1 	bl	8007c12 <USB_ReadChInterrupts>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c96:	2b40      	cmp	r3, #64	@ 0x40
 8004c98:	d112      	bne.n	8004cc0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	3319      	adds	r3, #25
 8004caa:	2201      	movs	r2, #1
 8004cac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2340      	movs	r3, #64	@ 0x40
 8004cbe:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	331b      	adds	r3, #27
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d019      	beq.n	8004d0a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	331b      	adds	r3, #27
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d08:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004d0a:	78fb      	ldrb	r3, [r7, #3]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d16:	461a      	mov	r2, r3
 8004d18:	2301      	movs	r3, #1
 8004d1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	334d      	adds	r3, #77	@ 0x4d
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	4611      	mov	r1, r2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f003 fd0e 	bl	800875a <USB_HC_Halt>
 8004d3e:	e365      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 ff62 	bl	8007c12 <USB_ReadChInterrupts>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d54:	2b40      	cmp	r3, #64	@ 0x40
 8004d56:	d139      	bne.n	8004dcc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004d58:	78fa      	ldrb	r2, [r7, #3]
 8004d5a:	6879      	ldr	r1, [r7, #4]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	1a9b      	subs	r3, r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	334d      	adds	r3, #77	@ 0x4d
 8004d68:	2205      	movs	r2, #5
 8004d6a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	011b      	lsls	r3, r3, #4
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	440b      	add	r3, r1
 8004d7a:	331a      	adds	r3, #26
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d109      	bne.n	8004d96 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3319      	adds	r3, #25
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	011b      	lsls	r3, r3, #4
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3344      	adds	r3, #68	@ 0x44
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	78fa      	ldrb	r2, [r7, #3]
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f003 fcd1 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004db8:	78fb      	ldrb	r3, [r7, #3]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2340      	movs	r3, #64	@ 0x40
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	e31f      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f002 ff1c 	bl	8007c12 <USB_ReadChInterrupts>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d11a      	bne.n	8004e1a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df0:	461a      	mov	r2, r3
 8004df2:	2308      	movs	r3, #8
 8004df4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	011b      	lsls	r3, r3, #4
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	334d      	adds	r3, #77	@ 0x4d
 8004e06:	2206      	movs	r2, #6
 8004e08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f003 fca1 	bl	800875a <USB_HC_Halt>
 8004e18:	e2f8      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f002 fef5 	bl	8007c12 <USB_ReadChInterrupts>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	d144      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	3344      	adds	r3, #68	@ 0x44
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	334d      	adds	r3, #77	@ 0x4d
 8004e56:	2204      	movs	r2, #4
 8004e58:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3319      	adds	r3, #25
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d114      	bne.n	8004e9a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3318      	adds	r3, #24
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	440b      	add	r3, r1
 8004e94:	3319      	adds	r3, #25
 8004e96:	2201      	movs	r2, #1
 8004e98:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f003 fc59 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004ea8:	78fb      	ldrb	r3, [r7, #3]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	6093      	str	r3, [r2, #8]
 8004eba:	e2a7      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	78fa      	ldrb	r2, [r7, #3]
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f002 fea4 	bl	8007c12 <USB_ReadChInterrupts>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed0:	2b80      	cmp	r3, #128	@ 0x80
 8004ed2:	f040 8083 	bne.w	8004fdc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	799b      	ldrb	r3, [r3, #6]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d111      	bne.n	8004f02 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334d      	adds	r3, #77	@ 0x4d
 8004eee:	2207      	movs	r2, #7
 8004ef0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f003 fc2d 	bl	800875a <USB_HC_Halt>
 8004f00:	e062      	b.n	8004fc8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	3344      	adds	r3, #68	@ 0x44
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1c59      	adds	r1, r3, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4403      	add	r3, r0
 8004f22:	3344      	adds	r3, #68	@ 0x44
 8004f24:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	3344      	adds	r3, #68	@ 0x44
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d922      	bls.n	8004f82 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3344      	adds	r3, #68	@ 0x44
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f50:	78fa      	ldrb	r2, [r7, #3]
 8004f52:	6879      	ldr	r1, [r7, #4]
 8004f54:	4613      	mov	r3, r2
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	1a9b      	subs	r3, r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	334c      	adds	r3, #76	@ 0x4c
 8004f60:	2204      	movs	r2, #4
 8004f62:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f64:	78fa      	ldrb	r2, [r7, #3]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	1a9b      	subs	r3, r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	334c      	adds	r3, #76	@ 0x4c
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f005 ff46 	bl	800ae0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f80:	e022      	b.n	8004fc8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	334c      	adds	r3, #76	@ 0x4c
 8004f92:	2202      	movs	r2, #2
 8004f94:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f96:	78fb      	ldrb	r3, [r7, #3]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fac:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004fb4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	6093      	str	r3, [r2, #8]
 8004fda:	e217      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f002 fe14 	bl	8007c12 <USB_ReadChInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff4:	d11b      	bne.n	800502e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	334d      	adds	r3, #77	@ 0x4d
 8005006:	2209      	movs	r2, #9
 8005008:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f003 fba1 	bl	800875a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005018:	78fb      	ldrb	r3, [r7, #3]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4413      	add	r3, r2
 8005020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005024:	461a      	mov	r2, r3
 8005026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800502a:	6093      	str	r3, [r2, #8]
 800502c:	e1ee      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	4611      	mov	r1, r2
 8005036:	4618      	mov	r0, r3
 8005038:	f002 fdeb 	bl	8007c12 <USB_ReadChInterrupts>
 800503c:	4603      	mov	r3, r0
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	f040 81df 	bne.w	8005406 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005054:	461a      	mov	r2, r3
 8005056:	2302      	movs	r3, #2
 8005058:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	334d      	adds	r3, #77	@ 0x4d
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 8093 	bne.w	8005198 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005072:	78fa      	ldrb	r2, [r7, #3]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	011b      	lsls	r3, r3, #4
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	334d      	adds	r3, #77	@ 0x4d
 8005082:	2202      	movs	r2, #2
 8005084:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	334c      	adds	r3, #76	@ 0x4c
 8005096:	2201      	movs	r2, #1
 8005098:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800509a:	78fa      	ldrb	r2, [r7, #3]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	3326      	adds	r3, #38	@ 0x26
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d00b      	beq.n	80050c8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3326      	adds	r3, #38	@ 0x26
 80050c0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	f040 8190 	bne.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	799b      	ldrb	r3, [r3, #6]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d115      	bne.n	80050fc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80050d0:	78fa      	ldrb	r2, [r7, #3]
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	333d      	adds	r3, #61	@ 0x3d
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	78fa      	ldrb	r2, [r7, #3]
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2d8      	uxtb	r0, r3
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	333d      	adds	r3, #61	@ 0x3d
 80050f8:	4602      	mov	r2, r0
 80050fa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	799b      	ldrb	r3, [r3, #6]
 8005100:	2b01      	cmp	r3, #1
 8005102:	f040 8171 	bne.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3334      	adds	r3, #52	@ 0x34
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8165 	beq.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800511e:	78fa      	ldrb	r2, [r7, #3]
 8005120:	6879      	ldr	r1, [r7, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	011b      	lsls	r3, r3, #4
 8005126:	1a9b      	subs	r3, r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	440b      	add	r3, r1
 800512c:	3334      	adds	r3, #52	@ 0x34
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	4613      	mov	r3, r2
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4403      	add	r3, r0
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	440b      	add	r3, r1
 8005144:	1e59      	subs	r1, r3, #1
 8005146:	78fa      	ldrb	r2, [r7, #3]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	4613      	mov	r3, r2
 800514c:	011b      	lsls	r3, r3, #4
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4403      	add	r3, r0
 8005154:	3328      	adds	r3, #40	@ 0x28
 8005156:	881b      	ldrh	r3, [r3, #0]
 8005158:	fbb1 f3f3 	udiv	r3, r1, r3
 800515c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 813f 	beq.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800516a:	78fa      	ldrb	r2, [r7, #3]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	333d      	adds	r3, #61	@ 0x3d
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	f083 0301 	eor.w	r3, r3, #1
 8005182:	b2d8      	uxtb	r0, r3
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	333d      	adds	r3, #61	@ 0x3d
 8005192:	4602      	mov	r2, r0
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e127      	b.n	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	334d      	adds	r3, #77	@ 0x4d
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d120      	bne.n	80051f0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	334d      	adds	r3, #77	@ 0x4d
 80051be:	2202      	movs	r2, #2
 80051c0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	331b      	adds	r3, #27
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	f040 8107 	bne.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	6879      	ldr	r1, [r7, #4]
 80051de:	4613      	mov	r3, r2
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	440b      	add	r3, r1
 80051e8:	334c      	adds	r3, #76	@ 0x4c
 80051ea:	2202      	movs	r2, #2
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e0fb      	b.n	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	334d      	adds	r3, #77	@ 0x4d
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b04      	cmp	r3, #4
 8005204:	d13a      	bne.n	800527c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	334d      	adds	r3, #77	@ 0x4d
 8005216:	2202      	movs	r2, #2
 8005218:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800521a:	78fa      	ldrb	r2, [r7, #3]
 800521c:	6879      	ldr	r1, [r7, #4]
 800521e:	4613      	mov	r3, r2
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	1a9b      	subs	r3, r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	334c      	adds	r3, #76	@ 0x4c
 800522a:	2202      	movs	r2, #2
 800522c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	331b      	adds	r3, #27
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	f040 80d1 	bne.w	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005246:	78fa      	ldrb	r2, [r7, #3]
 8005248:	6879      	ldr	r1, [r7, #4]
 800524a:	4613      	mov	r3, r2
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	1a9b      	subs	r3, r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	440b      	add	r3, r1
 8005254:	331b      	adds	r3, #27
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	4413      	add	r3, r2
 8005262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	440a      	add	r2, r1
 8005270:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005274:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	e0b5      	b.n	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800527c:	78fa      	ldrb	r2, [r7, #3]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	334d      	adds	r3, #77	@ 0x4d
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b05      	cmp	r3, #5
 8005290:	d114      	bne.n	80052bc <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005292:	78fa      	ldrb	r2, [r7, #3]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	011b      	lsls	r3, r3, #4
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	334d      	adds	r3, #77	@ 0x4d
 80052a2:	2202      	movs	r2, #2
 80052a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80052a6:	78fa      	ldrb	r2, [r7, #3]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	1a9b      	subs	r3, r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	334c      	adds	r3, #76	@ 0x4c
 80052b6:	2202      	movs	r2, #2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	e095      	b.n	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	334d      	adds	r3, #77	@ 0x4d
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d114      	bne.n	80052fc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	334d      	adds	r3, #77	@ 0x4d
 80052e2:	2202      	movs	r2, #2
 80052e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80052e6:	78fa      	ldrb	r2, [r7, #3]
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	4613      	mov	r3, r2
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	1a9b      	subs	r3, r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	440b      	add	r3, r1
 80052f4:	334c      	adds	r3, #76	@ 0x4c
 80052f6:	2205      	movs	r2, #5
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e075      	b.n	80053e8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052fc:	78fa      	ldrb	r2, [r7, #3]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	1a9b      	subs	r3, r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	334d      	adds	r3, #77	@ 0x4d
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b07      	cmp	r3, #7
 8005310:	d00a      	beq.n	8005328 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005312:	78fa      	ldrb	r2, [r7, #3]
 8005314:	6879      	ldr	r1, [r7, #4]
 8005316:	4613      	mov	r3, r2
 8005318:	011b      	lsls	r3, r3, #4
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	440b      	add	r3, r1
 8005320:	334d      	adds	r3, #77	@ 0x4d
 8005322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005324:	2b09      	cmp	r3, #9
 8005326:	d170      	bne.n	800540a <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005328:	78fa      	ldrb	r2, [r7, #3]
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	4613      	mov	r3, r2
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	1a9b      	subs	r3, r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	334d      	adds	r3, #77	@ 0x4d
 8005338:	2202      	movs	r2, #2
 800533a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800533c:	78fa      	ldrb	r2, [r7, #3]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	1a9b      	subs	r3, r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	3344      	adds	r3, #68	@ 0x44
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	1c59      	adds	r1, r3, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	011b      	lsls	r3, r3, #4
 8005356:	1a9b      	subs	r3, r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4403      	add	r3, r0
 800535c:	3344      	adds	r3, #68	@ 0x44
 800535e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005360:	78fa      	ldrb	r2, [r7, #3]
 8005362:	6879      	ldr	r1, [r7, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	011b      	lsls	r3, r3, #4
 8005368:	1a9b      	subs	r3, r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	440b      	add	r3, r1
 800536e:	3344      	adds	r3, #68	@ 0x44
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d914      	bls.n	80053a0 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	6879      	ldr	r1, [r7, #4]
 800537a:	4613      	mov	r3, r2
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	440b      	add	r3, r1
 8005384:	3344      	adds	r3, #68	@ 0x44
 8005386:	2200      	movs	r2, #0
 8005388:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800538a:	78fa      	ldrb	r2, [r7, #3]
 800538c:	6879      	ldr	r1, [r7, #4]
 800538e:	4613      	mov	r3, r2
 8005390:	011b      	lsls	r3, r3, #4
 8005392:	1a9b      	subs	r3, r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	440b      	add	r3, r1
 8005398:	334c      	adds	r3, #76	@ 0x4c
 800539a:	2204      	movs	r2, #4
 800539c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800539e:	e022      	b.n	80053e6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	334c      	adds	r3, #76	@ 0x4c
 80053b0:	2202      	movs	r2, #2
 80053b2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053d4:	78fb      	ldrb	r3, [r7, #3]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e0:	461a      	mov	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053e6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	334c      	adds	r3, #76	@ 0x4c
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f005 fd04 	bl	800ae0c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005404:	e002      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005406:	bf00      	nop
 8005408:	e000      	b.n	800540c <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800540a:	bf00      	nop
  }
}
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b08a      	sub	sp, #40	@ 0x28
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	0c5b      	lsrs	r3, r3, #17
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005446:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d004      	beq.n	8005458 <HCD_RXQLVL_IRQHandler+0x46>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	2b05      	cmp	r3, #5
 8005452:	f000 80b6 	beq.w	80055c2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005456:	e0b7      	b.n	80055c8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80b3 	beq.w	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	332c      	adds	r3, #44	@ 0x2c
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a7 	beq.w	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	4613      	mov	r3, r2
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	3338      	adds	r3, #56	@ 0x38
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	18d1      	adds	r1, r2, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4613      	mov	r3, r2
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	3334      	adds	r3, #52	@ 0x34
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4299      	cmp	r1, r3
 80054a2:	f200 8083 	bhi.w	80055ac <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	6879      	ldr	r1, [r7, #4]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	4613      	mov	r3, r2
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	332c      	adds	r3, #44	@ 0x2c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	b292      	uxth	r2, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	f002 fb3b 	bl	8007b3c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	4613      	mov	r3, r2
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	1a9b      	subs	r3, r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	332c      	adds	r3, #44	@ 0x2c
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	18d1      	adds	r1, r2, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4403      	add	r3, r0
 80054ea:	332c      	adds	r3, #44	@ 0x2c
 80054ec:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80054ee:	6879      	ldr	r1, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	3338      	adds	r3, #56	@ 0x38
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	18d1      	adds	r1, r2, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	4613      	mov	r3, r2
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4403      	add	r3, r0
 8005512:	3338      	adds	r3, #56	@ 0x38
 8005514:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	0cdb      	lsrs	r3, r3, #19
 8005526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3328      	adds	r3, #40	@ 0x28
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	461a      	mov	r2, r3
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	4293      	cmp	r3, r2
 8005544:	d13f      	bne.n	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d03c      	beq.n	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005562:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800556a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005578:	461a      	mov	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	333c      	adds	r3, #60	@ 0x3c
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f083 0301 	eor.w	r3, r3, #1
 8005594:	b2d8      	uxtb	r0, r3
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	4613      	mov	r3, r2
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a9b      	subs	r3, r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	333c      	adds	r3, #60	@ 0x3c
 80055a6:	4602      	mov	r2, r0
 80055a8:	701a      	strb	r2, [r3, #0]
      break;
 80055aa:	e00c      	b.n	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80055ac:	6879      	ldr	r1, [r7, #4]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	334c      	adds	r3, #76	@ 0x4c
 80055bc:	2204      	movs	r2, #4
 80055be:	701a      	strb	r2, [r3, #0]
      break;
 80055c0:	e001      	b.n	80055c6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80055c6:	bf00      	nop
  }
}
 80055c8:	bf00      	nop
 80055ca:	3728      	adds	r7, #40	@ 0x28
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055fc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b02      	cmp	r3, #2
 8005606:	d10b      	bne.n	8005620 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f005 fbde 	bl	800add4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d132      	bne.n	8005690 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f043 0308 	orr.w	r3, r3, #8
 8005630:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d126      	bne.n	800568a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	7a5b      	ldrb	r3, [r3, #9]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d113      	bne.n	800566c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800564a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800564e:	d106      	bne.n	800565e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2102      	movs	r1, #2
 8005656:	4618      	mov	r0, r3
 8005658:	f002 fc00 	bl	8007e5c <USB_InitFSLSPClkSel>
 800565c:	e011      	b.n	8005682 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fbf9 	bl	8007e5c <USB_InitFSLSPClkSel>
 800566a:	e00a      	b.n	8005682 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	79db      	ldrb	r3, [r3, #7]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800567a:	461a      	mov	r2, r3
 800567c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005680:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f005 fbd0 	bl	800ae28 <HAL_HCD_PortEnabled_Callback>
 8005688:	e002      	b.n	8005690 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f005 fbda 	bl	800ae44 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b20      	cmp	r3, #32
 8005698:	d103      	bne.n	80056a2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 0320 	orr.w	r3, r3, #32
 80056a0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056a8:	461a      	mov	r2, r3
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6013      	str	r3, [r2, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e12b      	b.n	8005922 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fd f8ec 	bl	80028bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	@ 0x24
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0201 	bic.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800570a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800571a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800571c:	f001 fa20 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
 8005720:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	4a81      	ldr	r2, [pc, #516]	@ (800592c <HAL_I2C_Init+0x274>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d807      	bhi.n	800573c <HAL_I2C_Init+0x84>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a80      	ldr	r2, [pc, #512]	@ (8005930 <HAL_I2C_Init+0x278>)
 8005730:	4293      	cmp	r3, r2
 8005732:	bf94      	ite	ls
 8005734:	2301      	movls	r3, #1
 8005736:	2300      	movhi	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e006      	b.n	800574a <HAL_I2C_Init+0x92>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4a7d      	ldr	r2, [pc, #500]	@ (8005934 <HAL_I2C_Init+0x27c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	bf94      	ite	ls
 8005744:	2301      	movls	r3, #1
 8005746:	2300      	movhi	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e0e7      	b.n	8005922 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a78      	ldr	r2, [pc, #480]	@ (8005938 <HAL_I2C_Init+0x280>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a6a      	ldr	r2, [pc, #424]	@ (800592c <HAL_I2C_Init+0x274>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <HAL_I2C_Init+0xd4>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	3301      	adds	r3, #1
 800578a:	e009      	b.n	80057a0 <HAL_I2C_Init+0xe8>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005792:	fb02 f303 	mul.w	r3, r2, r3
 8005796:	4a69      	ldr	r2, [pc, #420]	@ (800593c <HAL_I2C_Init+0x284>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	099b      	lsrs	r3, r3, #6
 800579e:	3301      	adds	r3, #1
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	430b      	orrs	r3, r1
 80057a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80057b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	495c      	ldr	r1, [pc, #368]	@ (800592c <HAL_I2C_Init+0x274>)
 80057bc:	428b      	cmp	r3, r1
 80057be:	d819      	bhi.n	80057f4 <HAL_I2C_Init+0x13c>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	1e59      	subs	r1, r3, #1
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	005b      	lsls	r3, r3, #1
 80057ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80057ce:	1c59      	adds	r1, r3, #1
 80057d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057d4:	400b      	ands	r3, r1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_I2C_Init+0x138>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1e59      	subs	r1, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80057e8:	3301      	adds	r3, #1
 80057ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ee:	e051      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 80057f0:	2304      	movs	r3, #4
 80057f2:	e04f      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d111      	bne.n	8005820 <HAL_I2C_Init+0x168>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1e58      	subs	r0, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	005b      	lsls	r3, r3, #1
 8005808:	440b      	add	r3, r1
 800580a:	fbb0 f3f3 	udiv	r3, r0, r3
 800580e:	3301      	adds	r3, #1
 8005810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	e012      	b.n	8005846 <HAL_I2C_Init+0x18e>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1e58      	subs	r0, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6859      	ldr	r1, [r3, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	0099      	lsls	r1, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	fbb0 f3f3 	udiv	r3, r0, r3
 8005836:	3301      	adds	r3, #1
 8005838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf0c      	ite	eq
 8005840:	2301      	moveq	r3, #1
 8005842:	2300      	movne	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Init+0x196>
 800584a:	2301      	movs	r3, #1
 800584c:	e022      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10e      	bne.n	8005874 <HAL_I2C_Init+0x1bc>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1e58      	subs	r0, r3, #1
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	460b      	mov	r3, r1
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	440b      	add	r3, r1
 8005864:	fbb0 f3f3 	udiv	r3, r0, r3
 8005868:	3301      	adds	r3, #1
 800586a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800586e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005872:	e00f      	b.n	8005894 <HAL_I2C_Init+0x1dc>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	1e58      	subs	r0, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	0099      	lsls	r1, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	fbb0 f3f3 	udiv	r3, r0, r3
 800588a:	3301      	adds	r3, #1
 800588c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	6809      	ldr	r1, [r1, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	431a      	orrs	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6911      	ldr	r1, [r2, #16]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68d2      	ldr	r2, [r2, #12]
 80058ce:	4311      	orrs	r1, r2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	430b      	orrs	r3, r1
 80058d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f042 0201 	orr.w	r2, r2, #1
 8005902:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2220      	movs	r2, #32
 800590e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	000186a0 	.word	0x000186a0
 8005930:	001e847f 	.word	0x001e847f
 8005934:	003d08ff 	.word	0x003d08ff
 8005938:	431bde83 	.word	0x431bde83
 800593c:	10624dd3 	.word	0x10624dd3

08005940 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e128      	b.n	8005ba4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a90      	ldr	r2, [pc, #576]	@ (8005bac <HAL_I2S_Init+0x26c>)
 800596a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7fc ffed 	bl	800294c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005988:	f023 030f 	bic.w	r3, r3, #15
 800598c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2202      	movs	r2, #2
 8005994:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d060      	beq.n	8005a60 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80059a6:	2310      	movs	r3, #16
 80059a8:	617b      	str	r3, [r7, #20]
 80059aa:	e001      	b.n	80059b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80059ac:	2320      	movs	r3, #32
 80059ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d802      	bhi.n	80059be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059be:	2001      	movs	r0, #1
 80059c0:	f001 f9d8 	bl	8006d74 <HAL_RCCEx_GetPeriphCLKFreq>
 80059c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ce:	d125      	bne.n	8005a1c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d010      	beq.n	80059fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	461a      	mov	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	695b      	ldr	r3, [r3, #20]
 80059f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f4:	3305      	adds	r3, #5
 80059f6:	613b      	str	r3, [r7, #16]
 80059f8:	e01f      	b.n	8005a3a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	3305      	adds	r3, #5
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e00e      	b.n	8005a3a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a36:	3305      	adds	r3, #5
 8005a38:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	4a5c      	ldr	r2, [pc, #368]	@ (8005bb0 <HAL_I2S_Init+0x270>)
 8005a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a42:	08db      	lsrs	r3, r3, #3
 8005a44:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	e003      	b.n	8005a68 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a60:	2302      	movs	r3, #2
 8005a62:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d902      	bls.n	8005a74 <HAL_I2S_Init+0x134>
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	2bff      	cmp	r3, #255	@ 0xff
 8005a72:	d907      	bls.n	8005a84 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a78:	f043 0210 	orr.w	r2, r3, #16
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e08f      	b.n	8005ba4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	ea42 0103 	orr.w	r1, r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005aa2:	f023 030f 	bic.w	r3, r3, #15
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6851      	ldr	r1, [r2, #4]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	68d2      	ldr	r2, [r2, #12]
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	6992      	ldr	r2, [r2, #24]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ac6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d161      	bne.n	8005b94 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a38      	ldr	r2, [pc, #224]	@ (8005bb4 <HAL_I2S_Init+0x274>)
 8005ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a37      	ldr	r2, [pc, #220]	@ (8005bb8 <HAL_I2S_Init+0x278>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_I2S_Init+0x1a4>
 8005ae0:	4b36      	ldr	r3, [pc, #216]	@ (8005bbc <HAL_I2S_Init+0x27c>)
 8005ae2:	e001      	b.n	8005ae8 <HAL_I2S_Init+0x1a8>
 8005ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	4932      	ldr	r1, [pc, #200]	@ (8005bb8 <HAL_I2S_Init+0x278>)
 8005af0:	428a      	cmp	r2, r1
 8005af2:	d101      	bne.n	8005af8 <HAL_I2S_Init+0x1b8>
 8005af4:	4a31      	ldr	r2, [pc, #196]	@ (8005bbc <HAL_I2S_Init+0x27c>)
 8005af6:	e001      	b.n	8005afc <HAL_I2S_Init+0x1bc>
 8005af8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005afc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005b00:	f023 030f 	bic.w	r3, r3, #15
 8005b04:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb8 <HAL_I2S_Init+0x278>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <HAL_I2S_Init+0x1d4>
 8005b10:	4b2a      	ldr	r3, [pc, #168]	@ (8005bbc <HAL_I2S_Init+0x27c>)
 8005b12:	e001      	b.n	8005b18 <HAL_I2S_Init+0x1d8>
 8005b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b18:	2202      	movs	r2, #2
 8005b1a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a25      	ldr	r2, [pc, #148]	@ (8005bb8 <HAL_I2S_Init+0x278>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d101      	bne.n	8005b2a <HAL_I2S_Init+0x1ea>
 8005b26:	4b25      	ldr	r3, [pc, #148]	@ (8005bbc <HAL_I2S_Init+0x27c>)
 8005b28:	e001      	b.n	8005b2e <HAL_I2S_Init+0x1ee>
 8005b2a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b3a:	d003      	beq.n	8005b44 <HAL_I2S_Init+0x204>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d103      	bne.n	8005b4c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	e001      	b.n	8005b50 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b64:	4313      	orrs	r3, r2
 8005b66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	897b      	ldrh	r3, [r7, #10]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b7c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a0d      	ldr	r2, [pc, #52]	@ (8005bb8 <HAL_I2S_Init+0x278>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d101      	bne.n	8005b8c <HAL_I2S_Init+0x24c>
 8005b88:	4b0c      	ldr	r3, [pc, #48]	@ (8005bbc <HAL_I2S_Init+0x27c>)
 8005b8a:	e001      	b.n	8005b90 <HAL_I2S_Init+0x250>
 8005b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b90:	897a      	ldrh	r2, [r7, #10]
 8005b92:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	08005cb7 	.word	0x08005cb7
 8005bb0:	cccccccd 	.word	0xcccccccd
 8005bb4:	08005dcd 	.word	0x08005dcd
 8005bb8:	40003800 	.word	0x40003800
 8005bbc:	40003400 	.word	0x40003400

08005bc0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	881a      	ldrh	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10e      	bne.n	8005c50 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c40:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff ffb8 	bl	8005bc0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c50:	bf00      	nop
 8005c52:	3708      	adds	r7, #8
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	b292      	uxth	r2, r2
 8005c6c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	1c9a      	adds	r2, r3, #2
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10e      	bne.n	8005cae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c9e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ff93 	bl	8005bd4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b086      	sub	sp, #24
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d13a      	bne.n	8005d48 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d109      	bne.n	8005cf0 <I2S_IRQHandler+0x3a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce6:	2b40      	cmp	r3, #64	@ 0x40
 8005ce8:	d102      	bne.n	8005cf0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff ffb4 	bl	8005c58 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf6:	2b40      	cmp	r3, #64	@ 0x40
 8005cf8:	d126      	bne.n	8005d48 <I2S_IRQHandler+0x92>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b20      	cmp	r3, #32
 8005d06:	d11f      	bne.n	8005d48 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685a      	ldr	r2, [r3, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d16:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	613b      	str	r3, [r7, #16]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	613b      	str	r3, [r7, #16]
 8005d2c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3a:	f043 0202 	orr.w	r2, r3, #2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f7ff ff50 	bl	8005be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d136      	bne.n	8005dc2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d109      	bne.n	8005d72 <I2S_IRQHandler+0xbc>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d68:	2b80      	cmp	r3, #128	@ 0x80
 8005d6a:	d102      	bne.n	8005d72 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff ff45 	bl	8005bfc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	d122      	bne.n	8005dc2 <I2S_IRQHandler+0x10c>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f003 0320 	and.w	r3, r3, #32
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d11b      	bne.n	8005dc2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d98:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005db4:	f043 0204 	orr.w	r2, r3, #4
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff13 	bl	8005be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
	...

08005dcc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a92      	ldr	r2, [pc, #584]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d101      	bne.n	8005dea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005de6:	4b92      	ldr	r3, [pc, #584]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de8:	e001      	b.n	8005dee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005dea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a8b      	ldr	r2, [pc, #556]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005e04:	4b8a      	ldr	r3, [pc, #552]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e06:	e001      	b.n	8005e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005e08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e18:	d004      	beq.n	8005e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 8099 	bne.w	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d107      	bne.n	8005e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d002      	beq.n	8005e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f925 	bl	8006088 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d107      	bne.n	8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f9c8 	bl	80061e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e5e:	2b40      	cmp	r3, #64	@ 0x40
 8005e60:	d13a      	bne.n	8005ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d035      	beq.n	8005ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a6e      	ldr	r2, [pc, #440]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d101      	bne.n	8005e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e76:	4b6e      	ldr	r3, [pc, #440]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e78:	e001      	b.n	8005e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4969      	ldr	r1, [pc, #420]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e86:	428b      	cmp	r3, r1
 8005e88:	d101      	bne.n	8005e8e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e8a:	4b69      	ldr	r3, [pc, #420]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e8c:	e001      	b.n	8005e92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e92:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e96:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ea6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f043 0202 	orr.w	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff fe88 	bl	8005be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	f040 80c3 	bne.w	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 80bd 	beq.w	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005efe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a49      	ldr	r2, [pc, #292]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d101      	bne.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005f0a:	4b49      	ldr	r3, [pc, #292]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f0c:	e001      	b.n	8005f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005f0e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4944      	ldr	r1, [pc, #272]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f1a:	428b      	cmp	r3, r1
 8005f1c:	d101      	bne.n	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f1e:	4b44      	ldr	r3, [pc, #272]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f20:	e001      	b.n	8005f26 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f2a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60bb      	str	r3, [r7, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f46:	f043 0204 	orr.w	r2, r3, #4
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff fe4a 	bl	8005be8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f54:	e089      	b.n	800606a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d107      	bne.n	8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d002      	beq.n	8005f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f8be 	bl	80060ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f8fd 	bl	8006184 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f90:	2b40      	cmp	r3, #64	@ 0x40
 8005f92:	d12f      	bne.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d02a      	beq.n	8005ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005fac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1e      	ldr	r2, [pc, #120]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d101      	bne.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fba:	e001      	b.n	8005fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005fbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4919      	ldr	r1, [pc, #100]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fc8:	428b      	cmp	r3, r1
 8005fca:	d101      	bne.n	8005fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005fcc:	4b18      	ldr	r3, [pc, #96]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fce:	e001      	b.n	8005fd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005fd0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe6:	f043 0202 	orr.w	r2, r3, #2
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff fdfa 	bl	8005be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d136      	bne.n	800606c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d031      	beq.n	800606c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a07      	ldr	r2, [pc, #28]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d101      	bne.n	8006016 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006012:	4b07      	ldr	r3, [pc, #28]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006014:	e001      	b.n	800601a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006016:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4902      	ldr	r1, [pc, #8]	@ (800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006022:	428b      	cmp	r3, r1
 8006024:	d106      	bne.n	8006034 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006026:	4b02      	ldr	r3, [pc, #8]	@ (8006030 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006028:	e006      	b.n	8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800602a:	bf00      	nop
 800602c:	40003800 	.word	0x40003800
 8006030:	40003400 	.word	0x40003400
 8006034:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006038:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800603c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800604c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800605a:	f043 0204 	orr.w	r2, r3, #4
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7ff fdc0 	bl	8005be8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006068:	e000      	b.n	800606c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800606a:	bf00      	nop
}
 800606c:	bf00      	nop
 800606e:	3720      	adds	r7, #32
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006094:	1c99      	adds	r1, r3, #2
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	6251      	str	r1, [r2, #36]	@ 0x24
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d113      	bne.n	80060e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d106      	bne.n	80060e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff ffc9 	bl	8006074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060e2:	bf00      	nop
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
	...

080060ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	1c99      	adds	r1, r3, #2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80060fe:	8819      	ldrh	r1, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a1d      	ldr	r2, [pc, #116]	@ (800617c <I2SEx_TxISR_I2SExt+0x90>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d101      	bne.n	800610e <I2SEx_TxISR_I2SExt+0x22>
 800610a:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <I2SEx_TxISR_I2SExt+0x94>)
 800610c:	e001      	b.n	8006112 <I2SEx_TxISR_I2SExt+0x26>
 800610e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006112:	460a      	mov	r2, r1
 8006114:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611a:	b29b      	uxth	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b29a      	uxth	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006128:	b29b      	uxth	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d121      	bne.n	8006172 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a12      	ldr	r2, [pc, #72]	@ (800617c <I2SEx_TxISR_I2SExt+0x90>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d101      	bne.n	800613c <I2SEx_TxISR_I2SExt+0x50>
 8006138:	4b11      	ldr	r3, [pc, #68]	@ (8006180 <I2SEx_TxISR_I2SExt+0x94>)
 800613a:	e001      	b.n	8006140 <I2SEx_TxISR_I2SExt+0x54>
 800613c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006140:	685a      	ldr	r2, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	490d      	ldr	r1, [pc, #52]	@ (800617c <I2SEx_TxISR_I2SExt+0x90>)
 8006148:	428b      	cmp	r3, r1
 800614a:	d101      	bne.n	8006150 <I2SEx_TxISR_I2SExt+0x64>
 800614c:	4b0c      	ldr	r3, [pc, #48]	@ (8006180 <I2SEx_TxISR_I2SExt+0x94>)
 800614e:	e001      	b.n	8006154 <I2SEx_TxISR_I2SExt+0x68>
 8006150:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006154:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006158:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d106      	bne.n	8006172 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff81 	bl	8006074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40003800 	.word	0x40003800
 8006180:	40003400 	.word	0x40003400

08006184 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68d8      	ldr	r0, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006196:	1c99      	adds	r1, r3, #2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800619c:	b282      	uxth	r2, r0
 800619e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d113      	bne.n	80061e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ff4a 	bl	8006074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a20      	ldr	r2, [pc, #128]	@ (8006278 <I2SEx_RxISR_I2SExt+0x90>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <I2SEx_RxISR_I2SExt+0x16>
 80061fa:	4b20      	ldr	r3, [pc, #128]	@ (800627c <I2SEx_RxISR_I2SExt+0x94>)
 80061fc:	e001      	b.n	8006202 <I2SEx_RxISR_I2SExt+0x1a>
 80061fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006202:	68d8      	ldr	r0, [r3, #12]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006208:	1c99      	adds	r1, r3, #2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800620e:	b282      	uxth	r2, r0
 8006210:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d121      	bne.n	800626e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a12      	ldr	r2, [pc, #72]	@ (8006278 <I2SEx_RxISR_I2SExt+0x90>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d101      	bne.n	8006238 <I2SEx_RxISR_I2SExt+0x50>
 8006234:	4b11      	ldr	r3, [pc, #68]	@ (800627c <I2SEx_RxISR_I2SExt+0x94>)
 8006236:	e001      	b.n	800623c <I2SEx_RxISR_I2SExt+0x54>
 8006238:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	490d      	ldr	r1, [pc, #52]	@ (8006278 <I2SEx_RxISR_I2SExt+0x90>)
 8006244:	428b      	cmp	r3, r1
 8006246:	d101      	bne.n	800624c <I2SEx_RxISR_I2SExt+0x64>
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <I2SEx_RxISR_I2SExt+0x94>)
 800624a:	e001      	b.n	8006250 <I2SEx_RxISR_I2SExt+0x68>
 800624c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006250:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006254:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d106      	bne.n	800626e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f7ff ff03 	bl	8006074 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	40003800 	.word	0x40003800
 800627c:	40003400 	.word	0x40003400

08006280 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e267      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d075      	beq.n	800638a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800629e:	4b88      	ldr	r3, [pc, #544]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d00c      	beq.n	80062c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062aa:	4b85      	ldr	r3, [pc, #532]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d112      	bne.n	80062dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062b6:	4b82      	ldr	r3, [pc, #520]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062c2:	d10b      	bne.n	80062dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062c4:	4b7e      	ldr	r3, [pc, #504]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d05b      	beq.n	8006388 <HAL_RCC_OscConfig+0x108>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d157      	bne.n	8006388 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e242      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062e4:	d106      	bne.n	80062f4 <HAL_RCC_OscConfig+0x74>
 80062e6:	4b76      	ldr	r3, [pc, #472]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a75      	ldr	r2, [pc, #468]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80062ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e01d      	b.n	8006330 <HAL_RCC_OscConfig+0xb0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062fc:	d10c      	bne.n	8006318 <HAL_RCC_OscConfig+0x98>
 80062fe:	4b70      	ldr	r3, [pc, #448]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a6f      	ldr	r2, [pc, #444]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006304:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	4b6d      	ldr	r3, [pc, #436]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a6c      	ldr	r2, [pc, #432]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e00b      	b.n	8006330 <HAL_RCC_OscConfig+0xb0>
 8006318:	4b69      	ldr	r3, [pc, #420]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a68      	ldr	r2, [pc, #416]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800631e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4b66      	ldr	r3, [pc, #408]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a65      	ldr	r2, [pc, #404]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800632a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800632e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d013      	beq.n	8006360 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006338:	f7fc fd92 	bl	8002e60 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006340:	f7fc fd8e 	bl	8002e60 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b64      	cmp	r3, #100	@ 0x64
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e207      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006352:	4b5b      	ldr	r3, [pc, #364]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0xc0>
 800635e:	e014      	b.n	800638a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fc fd7e 	bl	8002e60 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006368:	f7fc fd7a 	bl	8002e60 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b64      	cmp	r3, #100	@ 0x64
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e1f3      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800637a:	4b51      	ldr	r3, [pc, #324]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0xe8>
 8006386:	e000      	b.n	800638a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006388:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d063      	beq.n	800645e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006396:	4b4a      	ldr	r3, [pc, #296]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f003 030c 	and.w	r3, r3, #12
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00b      	beq.n	80063ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063a2:	4b47      	ldr	r3, [pc, #284]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063aa:	2b08      	cmp	r3, #8
 80063ac:	d11c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063ae:	4b44      	ldr	r3, [pc, #272]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d116      	bne.n	80063e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ba:	4b41      	ldr	r3, [pc, #260]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <HAL_RCC_OscConfig+0x152>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d001      	beq.n	80063d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e1c7      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d2:	4b3b      	ldr	r3, [pc, #236]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4937      	ldr	r1, [pc, #220]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063e6:	e03a      	b.n	800645e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d020      	beq.n	8006432 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f0:	4b34      	ldr	r3, [pc, #208]	@ (80064c4 <HAL_RCC_OscConfig+0x244>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f6:	f7fc fd33 	bl	8002e60 <HAL_GetTick>
 80063fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fc:	e008      	b.n	8006410 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063fe:	f7fc fd2f 	bl	8002e60 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	2b02      	cmp	r3, #2
 800640a:	d901      	bls.n	8006410 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800640c:	2303      	movs	r3, #3
 800640e:	e1a8      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006410:	4b2b      	ldr	r3, [pc, #172]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	2b00      	cmp	r3, #0
 800641a:	d0f0      	beq.n	80063fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800641c:	4b28      	ldr	r3, [pc, #160]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4925      	ldr	r1, [pc, #148]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 800642c:	4313      	orrs	r3, r2
 800642e:	600b      	str	r3, [r1, #0]
 8006430:	e015      	b.n	800645e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006432:	4b24      	ldr	r3, [pc, #144]	@ (80064c4 <HAL_RCC_OscConfig+0x244>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fc fd12 	bl	8002e60 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006440:	f7fc fd0e 	bl	8002e60 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e187      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006452:	4b1b      	ldr	r3, [pc, #108]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1f0      	bne.n	8006440 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0308 	and.w	r3, r3, #8
 8006466:	2b00      	cmp	r3, #0
 8006468:	d036      	beq.n	80064d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006472:	4b15      	ldr	r3, [pc, #84]	@ (80064c8 <HAL_RCC_OscConfig+0x248>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006478:	f7fc fcf2 	bl	8002e60 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006480:	f7fc fcee 	bl	8002e60 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e167      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006492:	4b0b      	ldr	r3, [pc, #44]	@ (80064c0 <HAL_RCC_OscConfig+0x240>)
 8006494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x200>
 800649e:	e01b      	b.n	80064d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a0:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <HAL_RCC_OscConfig+0x248>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064a6:	f7fc fcdb 	bl	8002e60 <HAL_GetTick>
 80064aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064ac:	e00e      	b.n	80064cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064ae:	f7fc fcd7 	bl	8002e60 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d907      	bls.n	80064cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e150      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
 80064c0:	40023800 	.word	0x40023800
 80064c4:	42470000 	.word	0x42470000
 80064c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064cc:	4b88      	ldr	r3, [pc, #544]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1ea      	bne.n	80064ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 8097 	beq.w	8006614 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064e6:	2300      	movs	r3, #0
 80064e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ea:	4b81      	ldr	r3, [pc, #516]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10f      	bne.n	8006516 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f6:	2300      	movs	r3, #0
 80064f8:	60bb      	str	r3, [r7, #8]
 80064fa:	4b7d      	ldr	r3, [pc, #500]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	4a7c      	ldr	r2, [pc, #496]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006504:	6413      	str	r3, [r2, #64]	@ 0x40
 8006506:	4b7a      	ldr	r3, [pc, #488]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800650e:	60bb      	str	r3, [r7, #8]
 8006510:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006512:	2301      	movs	r3, #1
 8006514:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006516:	4b77      	ldr	r3, [pc, #476]	@ (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651e:	2b00      	cmp	r3, #0
 8006520:	d118      	bne.n	8006554 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006522:	4b74      	ldr	r3, [pc, #464]	@ (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a73      	ldr	r2, [pc, #460]	@ (80066f4 <HAL_RCC_OscConfig+0x474>)
 8006528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800652c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652e:	f7fc fc97 	bl	8002e60 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006536:	f7fc fc93 	bl	8002e60 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e10c      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006548:	4b6a      	ldr	r3, [pc, #424]	@ (80066f4 <HAL_RCC_OscConfig+0x474>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <HAL_RCC_OscConfig+0x2ea>
 800655c:	4b64      	ldr	r3, [pc, #400]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006560:	4a63      	ldr	r2, [pc, #396]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006562:	f043 0301 	orr.w	r3, r3, #1
 8006566:	6713      	str	r3, [r2, #112]	@ 0x70
 8006568:	e01c      	b.n	80065a4 <HAL_RCC_OscConfig+0x324>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	2b05      	cmp	r3, #5
 8006570:	d10c      	bne.n	800658c <HAL_RCC_OscConfig+0x30c>
 8006572:	4b5f      	ldr	r3, [pc, #380]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006576:	4a5e      	ldr	r2, [pc, #376]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006578:	f043 0304 	orr.w	r3, r3, #4
 800657c:	6713      	str	r3, [r2, #112]	@ 0x70
 800657e:	4b5c      	ldr	r3, [pc, #368]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	4a5b      	ldr	r2, [pc, #364]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	6713      	str	r3, [r2, #112]	@ 0x70
 800658a:	e00b      	b.n	80065a4 <HAL_RCC_OscConfig+0x324>
 800658c:	4b58      	ldr	r3, [pc, #352]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006590:	4a57      	ldr	r2, [pc, #348]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006592:	f023 0301 	bic.w	r3, r3, #1
 8006596:	6713      	str	r3, [r2, #112]	@ 0x70
 8006598:	4b55      	ldr	r3, [pc, #340]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800659a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800659c:	4a54      	ldr	r2, [pc, #336]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800659e:	f023 0304 	bic.w	r3, r3, #4
 80065a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fc fc58 	bl	8002e60 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fc fc54 	bl	8002e60 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e0cb      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ca:	4b49      	ldr	r3, [pc, #292]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80065cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d0ee      	beq.n	80065b4 <HAL_RCC_OscConfig+0x334>
 80065d6:	e014      	b.n	8006602 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d8:	f7fc fc42 	bl	8002e60 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065de:	e00a      	b.n	80065f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e0:	f7fc fc3e 	bl	8002e60 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e0b5      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065f6:	4b3e      	ldr	r3, [pc, #248]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fa:	f003 0302 	and.w	r3, r3, #2
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1ee      	bne.n	80065e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d105      	bne.n	8006614 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006608:	4b39      	ldr	r3, [pc, #228]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	4a38      	ldr	r2, [pc, #224]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 800660e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006612:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a1 	beq.w	8006760 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800661e:	4b34      	ldr	r3, [pc, #208]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 030c 	and.w	r3, r3, #12
 8006626:	2b08      	cmp	r3, #8
 8006628:	d05c      	beq.n	80066e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b02      	cmp	r3, #2
 8006630:	d141      	bne.n	80066b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006632:	4b31      	ldr	r3, [pc, #196]	@ (80066f8 <HAL_RCC_OscConfig+0x478>)
 8006634:	2200      	movs	r2, #0
 8006636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006638:	f7fc fc12 	bl	8002e60 <HAL_GetTick>
 800663c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006640:	f7fc fc0e 	bl	8002e60 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e087      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006652:	4b27      	ldr	r3, [pc, #156]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69da      	ldr	r2, [r3, #28]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	019b      	lsls	r3, r3, #6
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	085b      	lsrs	r3, r3, #1
 8006676:	3b01      	subs	r3, #1
 8006678:	041b      	lsls	r3, r3, #16
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006680:	061b      	lsls	r3, r3, #24
 8006682:	491b      	ldr	r1, [pc, #108]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 8006684:	4313      	orrs	r3, r2
 8006686:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006688:	4b1b      	ldr	r3, [pc, #108]	@ (80066f8 <HAL_RCC_OscConfig+0x478>)
 800668a:	2201      	movs	r2, #1
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fc fbe7 	bl	8002e60 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006696:	f7fc fbe3 	bl	8002e60 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e05c      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0f0      	beq.n	8006696 <HAL_RCC_OscConfig+0x416>
 80066b4:	e054      	b.n	8006760 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <HAL_RCC_OscConfig+0x478>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066bc:	f7fc fbd0 	bl	8002e60 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fc fbcc 	bl	8002e60 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e045      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d6:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <HAL_RCC_OscConfig+0x470>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x444>
 80066e2:	e03d      	b.n	8006760 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d107      	bne.n	80066fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e038      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
 80066f0:	40023800 	.word	0x40023800
 80066f4:	40007000 	.word	0x40007000
 80066f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066fc:	4b1b      	ldr	r3, [pc, #108]	@ (800676c <HAL_RCC_OscConfig+0x4ec>)
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d028      	beq.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006714:	429a      	cmp	r2, r3
 8006716:	d121      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006722:	429a      	cmp	r2, r3
 8006724:	d11a      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800672c:	4013      	ands	r3, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006732:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006734:	4293      	cmp	r3, r2
 8006736:	d111      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006742:	085b      	lsrs	r3, r3, #1
 8006744:	3b01      	subs	r3, #1
 8006746:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006748:	429a      	cmp	r2, r3
 800674a:	d107      	bne.n	800675c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006756:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d001      	beq.n	8006760 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40023800 	.word	0x40023800

08006770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0cc      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006784:	4b68      	ldr	r3, [pc, #416]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	429a      	cmp	r2, r3
 8006790:	d90c      	bls.n	80067ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006792:	4b65      	ldr	r3, [pc, #404]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	b2d2      	uxtb	r2, r2
 8006798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800679a:	4b63      	ldr	r3, [pc, #396]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d001      	beq.n	80067ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e0b8      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d020      	beq.n	80067fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067c4:	4b59      	ldr	r3, [pc, #356]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a58      	ldr	r2, [pc, #352]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0308 	and.w	r3, r3, #8
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067dc:	4b53      	ldr	r3, [pc, #332]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4a52      	ldr	r2, [pc, #328]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067e8:	4b50      	ldr	r3, [pc, #320]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	494d      	ldr	r1, [pc, #308]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	2b00      	cmp	r3, #0
 8006804:	d044      	beq.n	8006890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d107      	bne.n	800681e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800680e:	4b47      	ldr	r3, [pc, #284]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d119      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e07f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d003      	beq.n	800682e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800682a:	2b03      	cmp	r3, #3
 800682c:	d107      	bne.n	800683e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800682e:	4b3f      	ldr	r3, [pc, #252]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e06f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800683e:	4b3b      	ldr	r3, [pc, #236]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e067      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800684e:	4b37      	ldr	r3, [pc, #220]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f023 0203 	bic.w	r2, r3, #3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	4934      	ldr	r1, [pc, #208]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 800685c:	4313      	orrs	r3, r2
 800685e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006860:	f7fc fafe 	bl	8002e60 <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	e00a      	b.n	800687e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006868:	f7fc fafa 	bl	8002e60 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006876:	4293      	cmp	r3, r2
 8006878:	d901      	bls.n	800687e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e04f      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	4b2b      	ldr	r3, [pc, #172]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 020c 	and.w	r2, r3, #12
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	429a      	cmp	r2, r3
 800688e:	d1eb      	bne.n	8006868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006890:	4b25      	ldr	r3, [pc, #148]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	429a      	cmp	r2, r3
 800689c:	d20c      	bcs.n	80068b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689e:	4b22      	ldr	r3, [pc, #136]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a6:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <HAL_RCC_ClockConfig+0x1b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d001      	beq.n	80068b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e032      	b.n	800691e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0304 	and.w	r3, r3, #4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068c4:	4b19      	ldr	r3, [pc, #100]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	4916      	ldr	r1, [pc, #88]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0308 	and.w	r3, r3, #8
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d009      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068e2:	4b12      	ldr	r3, [pc, #72]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	490e      	ldr	r1, [pc, #56]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068f6:	f000 f821 	bl	800693c <HAL_RCC_GetSysClockFreq>
 80068fa:	4602      	mov	r2, r0
 80068fc:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	490a      	ldr	r1, [pc, #40]	@ (8006930 <HAL_RCC_ClockConfig+0x1c0>)
 8006908:	5ccb      	ldrb	r3, [r1, r3]
 800690a:	fa22 f303 	lsr.w	r3, r2, r3
 800690e:	4a09      	ldr	r2, [pc, #36]	@ (8006934 <HAL_RCC_ClockConfig+0x1c4>)
 8006910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006912:	4b09      	ldr	r3, [pc, #36]	@ (8006938 <HAL_RCC_ClockConfig+0x1c8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f7fc fa5e 	bl	8002dd8 <HAL_InitTick>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40023c00 	.word	0x40023c00
 800692c:	40023800 	.word	0x40023800
 8006930:	0800c3e4 	.word	0x0800c3e4
 8006934:	20000000 	.word	0x20000000
 8006938:	20000004 	.word	0x20000004

0800693c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b094      	sub	sp, #80	@ 0x50
 8006942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006954:	4b79      	ldr	r3, [pc, #484]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 030c 	and.w	r3, r3, #12
 800695c:	2b08      	cmp	r3, #8
 800695e:	d00d      	beq.n	800697c <HAL_RCC_GetSysClockFreq+0x40>
 8006960:	2b08      	cmp	r3, #8
 8006962:	f200 80e1 	bhi.w	8006b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_RCC_GetSysClockFreq+0x34>
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_RCC_GetSysClockFreq+0x3a>
 800696e:	e0db      	b.n	8006b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006970:	4b73      	ldr	r3, [pc, #460]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006974:	e0db      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006976:	4b73      	ldr	r3, [pc, #460]	@ (8006b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8006978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800697a:	e0d8      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800697c:	4b6f      	ldr	r3, [pc, #444]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006984:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006986:	4b6d      	ldr	r3, [pc, #436]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d063      	beq.n	8006a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006992:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	2200      	movs	r2, #0
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800699c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a6:	2300      	movs	r3, #0
 80069a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80069ae:	4622      	mov	r2, r4
 80069b0:	462b      	mov	r3, r5
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f04f 0100 	mov.w	r1, #0
 80069ba:	0159      	lsls	r1, r3, #5
 80069bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c0:	0150      	lsls	r0, r2, #5
 80069c2:	4602      	mov	r2, r0
 80069c4:	460b      	mov	r3, r1
 80069c6:	4621      	mov	r1, r4
 80069c8:	1a51      	subs	r1, r2, r1
 80069ca:	6139      	str	r1, [r7, #16]
 80069cc:	4629      	mov	r1, r5
 80069ce:	eb63 0301 	sbc.w	r3, r3, r1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e0:	4659      	mov	r1, fp
 80069e2:	018b      	lsls	r3, r1, #6
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069ea:	4651      	mov	r1, sl
 80069ec:	018a      	lsls	r2, r1, #6
 80069ee:	4651      	mov	r1, sl
 80069f0:	ebb2 0801 	subs.w	r8, r2, r1
 80069f4:	4659      	mov	r1, fp
 80069f6:	eb63 0901 	sbc.w	r9, r3, r1
 80069fa:	f04f 0200 	mov.w	r2, #0
 80069fe:	f04f 0300 	mov.w	r3, #0
 8006a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a0e:	4690      	mov	r8, r2
 8006a10:	4699      	mov	r9, r3
 8006a12:	4623      	mov	r3, r4
 8006a14:	eb18 0303 	adds.w	r3, r8, r3
 8006a18:	60bb      	str	r3, [r7, #8]
 8006a1a:	462b      	mov	r3, r5
 8006a1c:	eb49 0303 	adc.w	r3, r9, r3
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a2e:	4629      	mov	r1, r5
 8006a30:	024b      	lsls	r3, r1, #9
 8006a32:	4621      	mov	r1, r4
 8006a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a38:	4621      	mov	r1, r4
 8006a3a:	024a      	lsls	r2, r1, #9
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4619      	mov	r1, r3
 8006a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a42:	2200      	movs	r2, #0
 8006a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a4c:	f7f9 fc18 	bl	8000280 <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4613      	mov	r3, r2
 8006a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a58:	e058      	b.n	8006b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a5a:	4b38      	ldr	r3, [pc, #224]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	099b      	lsrs	r3, r3, #6
 8006a60:	2200      	movs	r2, #0
 8006a62:	4618      	mov	r0, r3
 8006a64:	4611      	mov	r1, r2
 8006a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a6a:	623b      	str	r3, [r7, #32]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a74:	4642      	mov	r2, r8
 8006a76:	464b      	mov	r3, r9
 8006a78:	f04f 0000 	mov.w	r0, #0
 8006a7c:	f04f 0100 	mov.w	r1, #0
 8006a80:	0159      	lsls	r1, r3, #5
 8006a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a86:	0150      	lsls	r0, r2, #5
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a92:	4649      	mov	r1, r9
 8006a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006aac:	ebb2 040a 	subs.w	r4, r2, sl
 8006ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	00eb      	lsls	r3, r5, #3
 8006abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ac2:	00e2      	lsls	r2, r4, #3
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	4643      	mov	r3, r8
 8006aca:	18e3      	adds	r3, r4, r3
 8006acc:	603b      	str	r3, [r7, #0]
 8006ace:	464b      	mov	r3, r9
 8006ad0:	eb45 0303 	adc.w	r3, r5, r3
 8006ad4:	607b      	str	r3, [r7, #4]
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	028b      	lsls	r3, r1, #10
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006aec:	4621      	mov	r1, r4
 8006aee:	028a      	lsls	r2, r1, #10
 8006af0:	4610      	mov	r0, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af6:	2200      	movs	r2, #0
 8006af8:	61bb      	str	r3, [r7, #24]
 8006afa:	61fa      	str	r2, [r7, #28]
 8006afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b00:	f7f9 fbbe 	bl	8000280 <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	3301      	adds	r3, #1
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b26:	e002      	b.n	8006b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b28:	4b05      	ldr	r3, [pc, #20]	@ (8006b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3750      	adds	r7, #80	@ 0x50
 8006b34:	46bd      	mov	sp, r7
 8006b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b3a:	bf00      	nop
 8006b3c:	40023800 	.word	0x40023800
 8006b40:	00f42400 	.word	0x00f42400
 8006b44:	007a1200 	.word	0x007a1200

08006b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b4c:	4b03      	ldr	r3, [pc, #12]	@ (8006b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	20000000 	.word	0x20000000

08006b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b64:	f7ff fff0 	bl	8006b48 <HAL_RCC_GetHCLKFreq>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	4b05      	ldr	r3, [pc, #20]	@ (8006b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	0a9b      	lsrs	r3, r3, #10
 8006b70:	f003 0307 	and.w	r3, r3, #7
 8006b74:	4903      	ldr	r1, [pc, #12]	@ (8006b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b76:	5ccb      	ldrb	r3, [r1, r3]
 8006b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40023800 	.word	0x40023800
 8006b84:	0800c3f4 	.word	0x0800c3f4

08006b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b8c:	f7ff ffdc 	bl	8006b48 <HAL_RCC_GetHCLKFreq>
 8006b90:	4602      	mov	r2, r0
 8006b92:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	0b5b      	lsrs	r3, r3, #13
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	4903      	ldr	r1, [pc, #12]	@ (8006bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b9e:	5ccb      	ldrb	r3, [r1, r3]
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	40023800 	.word	0x40023800
 8006bac:	0800c3f4 	.word	0x0800c3f4

08006bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d105      	bne.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d035      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bd8:	4b62      	ldr	r3, [pc, #392]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bde:	f7fc f93f 	bl	8002e60 <HAL_GetTick>
 8006be2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be4:	e008      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006be6:	f7fc f93b 	bl	8002e60 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d901      	bls.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e0b0      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1f0      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	019a      	lsls	r2, r3, #6
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	071b      	lsls	r3, r3, #28
 8006c10:	4955      	ldr	r1, [pc, #340]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c18:	4b52      	ldr	r3, [pc, #328]	@ (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c1e:	f7fc f91f 	bl	8002e60 <HAL_GetTick>
 8006c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c26:	f7fc f91b 	bl	8002e60 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e090      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c38:	4b4b      	ldr	r3, [pc, #300]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8083 	beq.w	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	4b44      	ldr	r3, [pc, #272]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5a:	4a43      	ldr	r2, [pc, #268]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c62:	4b41      	ldr	r3, [pc, #260]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a3e      	ldr	r2, [pc, #248]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c7a:	f7fc f8f1 	bl	8002e60 <HAL_GetTick>
 8006c7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c80:	e008      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c82:	f7fc f8ed 	bl	8002e60 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d901      	bls.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e062      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c94:	4b35      	ldr	r3, [pc, #212]	@ (8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d0f0      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ca0:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02f      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d028      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cc8:	4b29      	ldr	r3, [pc, #164]	@ (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cce:	4b28      	ldr	r3, [pc, #160]	@ (8006d70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cd4:	4a24      	ldr	r2, [pc, #144]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cda:	4b23      	ldr	r3, [pc, #140]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d114      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ce6:	f7fc f8bb 	bl	8002e60 <HAL_GetTick>
 8006cea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fc f8b7 	bl	8002e60 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e02a      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	4b18      	ldr	r3, [pc, #96]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d1c:	d10d      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d1e:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d32:	490d      	ldr	r1, [pc, #52]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	e005      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d40:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d44:	6093      	str	r3, [r2, #8]
 8006d46:	4b08      	ldr	r3, [pc, #32]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d48:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d52:	4905      	ldr	r1, [pc, #20]	@ (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3718      	adds	r7, #24
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	42470068 	.word	0x42470068
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	42470e40 	.word	0x42470e40

08006d74 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d13f      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d92:	4b24      	ldr	r3, [pc, #144]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d9a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d006      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006da8:	d12f      	bne.n	8006e0a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006daa:	4b1f      	ldr	r3, [pc, #124]	@ (8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006dac:	617b      	str	r3, [r7, #20]
          break;
 8006dae:	e02f      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006db0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dbe:	4b19      	ldr	r3, [pc, #100]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dc6:	4a19      	ldr	r2, [pc, #100]	@ (8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	e007      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006dd0:	4b14      	ldr	r3, [pc, #80]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd8:	4a15      	ldr	r2, [pc, #84]	@ (8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006de0:	4b10      	ldr	r3, [pc, #64]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006df6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dfa:	0f1b      	lsrs	r3, r3, #28
 8006dfc:	f003 0307 	and.w	r3, r3, #7
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e06:	617b      	str	r3, [r7, #20]
          break;
 8006e08:	e002      	b.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
          break;
 8006e0e:	bf00      	nop
        }
      }
      break;
 8006e10:	e000      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006e12:	bf00      	nop
    }
  }
  return frequency;
 8006e14:	697b      	ldr	r3, [r7, #20]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40023800 	.word	0x40023800
 8006e28:	00bb8000 	.word	0x00bb8000
 8006e2c:	007a1200 	.word	0x007a1200
 8006e30:	00f42400 	.word	0x00f42400

08006e34 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e01c      	b.n	8006e80 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	795b      	ldrb	r3, [r3, #5]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d105      	bne.n	8006e5c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb fdf8 	bl	8002a4c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0204 	orr.w	r2, r2, #4
 8006e70:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	791b      	ldrb	r3, [r3, #4]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	e044      	b.n	8006f2c <HAL_RNG_GenerateRandomNumber+0xa4>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	795b      	ldrb	r3, [r3, #5]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d133      	bne.n	8006f1a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006eb8:	f7fb ffd2 	bl	8002e60 <HAL_GetTick>
 8006ebc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006ebe:	e018      	b.n	8006ef2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006ec0:	f7fb ffce 	bl	8002e60 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d911      	bls.n	8006ef2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d00a      	beq.n	8006ef2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2202      	movs	r2, #2
 8006ee6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e01c      	b.n	8006f2c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d1df      	bne.n	8006ec0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689a      	ldr	r2, [r3, #8]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	715a      	strb	r2, [r3, #5]
 8006f18:	e004      	b.n	8006f24 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2204      	movs	r2, #4
 8006f1e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	711a      	strb	r2, [r3, #4]

  return status;
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3710      	adds	r7, #16
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e07b      	b.n	800703e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d108      	bne.n	8006f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f56:	d009      	beq.n	8006f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	61da      	str	r2, [r3, #28]
 8006f5e:	e005      	b.n	8006f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d106      	bne.n	8006f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7fb fd82 	bl	8002a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fbe:	431a      	orrs	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff0:	ea42 0103 	orr.w	r1, r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	f003 0104 	and.w	r1, r3, #4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007012:	f003 0210 	and.w	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	430a      	orrs	r2, r1
 800701c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69da      	ldr	r2, [r3, #28]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800702c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e042      	b.n	80070de <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b00      	cmp	r3, #0
 8007062:	d106      	bne.n	8007072 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7fb fd57 	bl	8002b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2224      	movs	r2, #36	@ 0x24
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68da      	ldr	r2, [r3, #12]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007088:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f972 	bl	8007374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800709e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b08a      	sub	sp, #40	@ 0x28
 80070ea:	af02      	add	r7, sp, #8
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b20      	cmp	r3, #32
 8007104:	d175      	bne.n	80071f2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d002      	beq.n	8007112 <HAL_UART_Transmit+0x2c>
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d101      	bne.n	8007116 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e06e      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2221      	movs	r2, #33	@ 0x21
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007124:	f7fb fe9c 	bl	8002e60 <HAL_GetTick>
 8007128:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	88fa      	ldrh	r2, [r7, #6]
 800712e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	88fa      	ldrh	r2, [r7, #6]
 8007134:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713e:	d108      	bne.n	8007152 <HAL_UART_Transmit+0x6c>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d104      	bne.n	8007152 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	61bb      	str	r3, [r7, #24]
 8007150:	e003      	b.n	800715a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007156:	2300      	movs	r3, #0
 8007158:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800715a:	e02e      	b.n	80071ba <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	2200      	movs	r2, #0
 8007164:	2180      	movs	r1, #128	@ 0x80
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 f848 	bl	80071fc <UART_WaitOnFlagUntilTimeout>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2220      	movs	r2, #32
 8007176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e03a      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10b      	bne.n	800719c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007184:	69bb      	ldr	r3, [r7, #24]
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	461a      	mov	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007192:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3302      	adds	r3, #2
 8007198:	61bb      	str	r3, [r7, #24]
 800719a:	e007      	b.n	80071ac <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	781a      	ldrb	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	3b01      	subs	r3, #1
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1cb      	bne.n	800715c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	2140      	movs	r1, #64	@ 0x40
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 f814 	bl	80071fc <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2220      	movs	r2, #32
 80071de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e006      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e000      	b.n	80071f4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071f2:	2302      	movs	r3, #2
  }
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3720      	adds	r7, #32
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720c:	e03b      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d037      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007216:	f7fb fe23 	bl	8002e60 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	6a3a      	ldr	r2, [r7, #32]
 8007222:	429a      	cmp	r2, r3
 8007224:	d302      	bcc.n	800722c <UART_WaitOnFlagUntilTimeout+0x30>
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e03a      	b.n	80072a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d023      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b80      	cmp	r3, #128	@ 0x80
 8007242:	d020      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b40      	cmp	r3, #64	@ 0x40
 8007248:	d01d      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b08      	cmp	r3, #8
 8007256:	d116      	bne.n	8007286 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 f81d 	bl	80072ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2208      	movs	r2, #8
 8007278:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e00f      	b.n	80072a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4013      	ands	r3, r2
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	bf0c      	ite	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	2300      	movne	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d0b4      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b095      	sub	sp, #84	@ 0x54
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072c0:	e853 3f00 	ldrex	r3, [r3]
 80072c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	330c      	adds	r3, #12
 80072d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072de:	e841 2300 	strex	r3, r2, [r1]
 80072e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1e5      	bne.n	80072b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3314      	adds	r3, #20
 80072f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	f023 0301 	bic.w	r3, r3, #1
 8007300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	3314      	adds	r3, #20
 8007308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800730a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800730c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007312:	e841 2300 	strex	r3, r2, [r1]
 8007316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1e5      	bne.n	80072ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007322:	2b01      	cmp	r3, #1
 8007324:	d119      	bne.n	800735a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	e853 3f00 	ldrex	r3, [r3]
 8007334:	60bb      	str	r3, [r7, #8]
   return(result);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f023 0310 	bic.w	r3, r3, #16
 800733c:	647b      	str	r3, [r7, #68]	@ 0x44
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	330c      	adds	r3, #12
 8007344:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007346:	61ba      	str	r2, [r7, #24]
 8007348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6979      	ldr	r1, [r7, #20]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	613b      	str	r3, [r7, #16]
   return(result);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e5      	bne.n	8007326 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007368:	bf00      	nop
 800736a:	3754      	adds	r7, #84	@ 0x54
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007374:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007378:	b0c0      	sub	sp, #256	@ 0x100
 800737a:	af00      	add	r7, sp, #0
 800737c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	68d9      	ldr	r1, [r3, #12]
 8007392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	ea40 0301 	orr.w	r3, r0, r1
 800739c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	431a      	orrs	r2, r3
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073cc:	f021 010c 	bic.w	r1, r1, #12
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073da:	430b      	orrs	r3, r1
 80073dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ee:	6999      	ldr	r1, [r3, #24]
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	ea40 0301 	orr.w	r3, r0, r1
 80073fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	4b8f      	ldr	r3, [pc, #572]	@ (8007640 <UART_SetConfig+0x2cc>)
 8007404:	429a      	cmp	r2, r3
 8007406:	d005      	beq.n	8007414 <UART_SetConfig+0xa0>
 8007408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	4b8d      	ldr	r3, [pc, #564]	@ (8007644 <UART_SetConfig+0x2d0>)
 8007410:	429a      	cmp	r2, r3
 8007412:	d104      	bne.n	800741e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007414:	f7ff fbb8 	bl	8006b88 <HAL_RCC_GetPCLK2Freq>
 8007418:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800741c:	e003      	b.n	8007426 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800741e:	f7ff fb9f 	bl	8006b60 <HAL_RCC_GetPCLK1Freq>
 8007422:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007430:	f040 810c 	bne.w	800764c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007438:	2200      	movs	r2, #0
 800743a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800743e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007442:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	1891      	adds	r1, r2, r2
 800744c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800744e:	415b      	adcs	r3, r3
 8007450:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007452:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007456:	4621      	mov	r1, r4
 8007458:	eb12 0801 	adds.w	r8, r2, r1
 800745c:	4629      	mov	r1, r5
 800745e:	eb43 0901 	adc.w	r9, r3, r1
 8007462:	f04f 0200 	mov.w	r2, #0
 8007466:	f04f 0300 	mov.w	r3, #0
 800746a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800746e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007476:	4690      	mov	r8, r2
 8007478:	4699      	mov	r9, r3
 800747a:	4623      	mov	r3, r4
 800747c:	eb18 0303 	adds.w	r3, r8, r3
 8007480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007484:	462b      	mov	r3, r5
 8007486:	eb49 0303 	adc.w	r3, r9, r3
 800748a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800749a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800749e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80074a2:	460b      	mov	r3, r1
 80074a4:	18db      	adds	r3, r3, r3
 80074a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a8:	4613      	mov	r3, r2
 80074aa:	eb42 0303 	adc.w	r3, r2, r3
 80074ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80074b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80074b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074b8:	f7f8 fee2 	bl	8000280 <__aeabi_uldivmod>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4b61      	ldr	r3, [pc, #388]	@ (8007648 <UART_SetConfig+0x2d4>)
 80074c2:	fba3 2302 	umull	r2, r3, r3, r2
 80074c6:	095b      	lsrs	r3, r3, #5
 80074c8:	011c      	lsls	r4, r3, #4
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	1891      	adds	r1, r2, r2
 80074e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074e4:	415b      	adcs	r3, r3
 80074e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074ec:	4641      	mov	r1, r8
 80074ee:	eb12 0a01 	adds.w	sl, r2, r1
 80074f2:	4649      	mov	r1, r9
 80074f4:	eb43 0b01 	adc.w	fp, r3, r1
 80074f8:	f04f 0200 	mov.w	r2, #0
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007504:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007508:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800750c:	4692      	mov	sl, r2
 800750e:	469b      	mov	fp, r3
 8007510:	4643      	mov	r3, r8
 8007512:	eb1a 0303 	adds.w	r3, sl, r3
 8007516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800751a:	464b      	mov	r3, r9
 800751c:	eb4b 0303 	adc.w	r3, fp, r3
 8007520:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007530:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007534:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007538:	460b      	mov	r3, r1
 800753a:	18db      	adds	r3, r3, r3
 800753c:	643b      	str	r3, [r7, #64]	@ 0x40
 800753e:	4613      	mov	r3, r2
 8007540:	eb42 0303 	adc.w	r3, r2, r3
 8007544:	647b      	str	r3, [r7, #68]	@ 0x44
 8007546:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800754a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800754e:	f7f8 fe97 	bl	8000280 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4611      	mov	r1, r2
 8007558:	4b3b      	ldr	r3, [pc, #236]	@ (8007648 <UART_SetConfig+0x2d4>)
 800755a:	fba3 2301 	umull	r2, r3, r3, r1
 800755e:	095b      	lsrs	r3, r3, #5
 8007560:	2264      	movs	r2, #100	@ 0x64
 8007562:	fb02 f303 	mul.w	r3, r2, r3
 8007566:	1acb      	subs	r3, r1, r3
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800756e:	4b36      	ldr	r3, [pc, #216]	@ (8007648 <UART_SetConfig+0x2d4>)
 8007570:	fba3 2302 	umull	r2, r3, r3, r2
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800757c:	441c      	add	r4, r3
 800757e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007582:	2200      	movs	r2, #0
 8007584:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007588:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800758c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007590:	4642      	mov	r2, r8
 8007592:	464b      	mov	r3, r9
 8007594:	1891      	adds	r1, r2, r2
 8007596:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007598:	415b      	adcs	r3, r3
 800759a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800759c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80075a0:	4641      	mov	r1, r8
 80075a2:	1851      	adds	r1, r2, r1
 80075a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80075a6:	4649      	mov	r1, r9
 80075a8:	414b      	adcs	r3, r1
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80075ac:	f04f 0200 	mov.w	r2, #0
 80075b0:	f04f 0300 	mov.w	r3, #0
 80075b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075b8:	4659      	mov	r1, fp
 80075ba:	00cb      	lsls	r3, r1, #3
 80075bc:	4651      	mov	r1, sl
 80075be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075c2:	4651      	mov	r1, sl
 80075c4:	00ca      	lsls	r2, r1, #3
 80075c6:	4610      	mov	r0, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	4603      	mov	r3, r0
 80075cc:	4642      	mov	r2, r8
 80075ce:	189b      	adds	r3, r3, r2
 80075d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075d4:	464b      	mov	r3, r9
 80075d6:	460a      	mov	r2, r1
 80075d8:	eb42 0303 	adc.w	r3, r2, r3
 80075dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075f4:	460b      	mov	r3, r1
 80075f6:	18db      	adds	r3, r3, r3
 80075f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075fa:	4613      	mov	r3, r2
 80075fc:	eb42 0303 	adc.w	r3, r2, r3
 8007600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007602:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007606:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800760a:	f7f8 fe39 	bl	8000280 <__aeabi_uldivmod>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	4b0d      	ldr	r3, [pc, #52]	@ (8007648 <UART_SetConfig+0x2d4>)
 8007614:	fba3 1302 	umull	r1, r3, r3, r2
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	2164      	movs	r1, #100	@ 0x64
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	3332      	adds	r3, #50	@ 0x32
 8007626:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <UART_SetConfig+0x2d4>)
 8007628:	fba2 2303 	umull	r2, r3, r2, r3
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f003 0207 	and.w	r2, r3, #7
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4422      	add	r2, r4
 800763a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800763c:	e106      	b.n	800784c <UART_SetConfig+0x4d8>
 800763e:	bf00      	nop
 8007640:	40011000 	.word	0x40011000
 8007644:	40011400 	.word	0x40011400
 8007648:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800764c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007650:	2200      	movs	r2, #0
 8007652:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007656:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800765a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800765e:	4642      	mov	r2, r8
 8007660:	464b      	mov	r3, r9
 8007662:	1891      	adds	r1, r2, r2
 8007664:	6239      	str	r1, [r7, #32]
 8007666:	415b      	adcs	r3, r3
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
 800766a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800766e:	4641      	mov	r1, r8
 8007670:	1854      	adds	r4, r2, r1
 8007672:	4649      	mov	r1, r9
 8007674:	eb43 0501 	adc.w	r5, r3, r1
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	f04f 0300 	mov.w	r3, #0
 8007680:	00eb      	lsls	r3, r5, #3
 8007682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007686:	00e2      	lsls	r2, r4, #3
 8007688:	4614      	mov	r4, r2
 800768a:	461d      	mov	r5, r3
 800768c:	4643      	mov	r3, r8
 800768e:	18e3      	adds	r3, r4, r3
 8007690:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007694:	464b      	mov	r3, r9
 8007696:	eb45 0303 	adc.w	r3, r5, r3
 800769a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076ba:	4629      	mov	r1, r5
 80076bc:	008b      	lsls	r3, r1, #2
 80076be:	4621      	mov	r1, r4
 80076c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c4:	4621      	mov	r1, r4
 80076c6:	008a      	lsls	r2, r1, #2
 80076c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076cc:	f7f8 fdd8 	bl	8000280 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4b60      	ldr	r3, [pc, #384]	@ (8007858 <UART_SetConfig+0x4e4>)
 80076d6:	fba3 2302 	umull	r2, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	011c      	lsls	r4, r3, #4
 80076de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076e2:	2200      	movs	r2, #0
 80076e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076f0:	4642      	mov	r2, r8
 80076f2:	464b      	mov	r3, r9
 80076f4:	1891      	adds	r1, r2, r2
 80076f6:	61b9      	str	r1, [r7, #24]
 80076f8:	415b      	adcs	r3, r3
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007700:	4641      	mov	r1, r8
 8007702:	1851      	adds	r1, r2, r1
 8007704:	6139      	str	r1, [r7, #16]
 8007706:	4649      	mov	r1, r9
 8007708:	414b      	adcs	r3, r1
 800770a:	617b      	str	r3, [r7, #20]
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007718:	4659      	mov	r1, fp
 800771a:	00cb      	lsls	r3, r1, #3
 800771c:	4651      	mov	r1, sl
 800771e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007722:	4651      	mov	r1, sl
 8007724:	00ca      	lsls	r2, r1, #3
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	4603      	mov	r3, r0
 800772c:	4642      	mov	r2, r8
 800772e:	189b      	adds	r3, r3, r2
 8007730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007734:	464b      	mov	r3, r9
 8007736:	460a      	mov	r2, r1
 8007738:	eb42 0303 	adc.w	r3, r2, r3
 800773c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	67bb      	str	r3, [r7, #120]	@ 0x78
 800774a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007758:	4649      	mov	r1, r9
 800775a:	008b      	lsls	r3, r1, #2
 800775c:	4641      	mov	r1, r8
 800775e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007762:	4641      	mov	r1, r8
 8007764:	008a      	lsls	r2, r1, #2
 8007766:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800776a:	f7f8 fd89 	bl	8000280 <__aeabi_uldivmod>
 800776e:	4602      	mov	r2, r0
 8007770:	460b      	mov	r3, r1
 8007772:	4611      	mov	r1, r2
 8007774:	4b38      	ldr	r3, [pc, #224]	@ (8007858 <UART_SetConfig+0x4e4>)
 8007776:	fba3 2301 	umull	r2, r3, r3, r1
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	2264      	movs	r2, #100	@ 0x64
 800777e:	fb02 f303 	mul.w	r3, r2, r3
 8007782:	1acb      	subs	r3, r1, r3
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	3332      	adds	r3, #50	@ 0x32
 8007788:	4a33      	ldr	r2, [pc, #204]	@ (8007858 <UART_SetConfig+0x4e4>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007794:	441c      	add	r4, r3
 8007796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800779a:	2200      	movs	r2, #0
 800779c:	673b      	str	r3, [r7, #112]	@ 0x70
 800779e:	677a      	str	r2, [r7, #116]	@ 0x74
 80077a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80077a4:	4642      	mov	r2, r8
 80077a6:	464b      	mov	r3, r9
 80077a8:	1891      	adds	r1, r2, r2
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	415b      	adcs	r3, r3
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077b4:	4641      	mov	r1, r8
 80077b6:	1851      	adds	r1, r2, r1
 80077b8:	6039      	str	r1, [r7, #0]
 80077ba:	4649      	mov	r1, r9
 80077bc:	414b      	adcs	r3, r1
 80077be:	607b      	str	r3, [r7, #4]
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077cc:	4659      	mov	r1, fp
 80077ce:	00cb      	lsls	r3, r1, #3
 80077d0:	4651      	mov	r1, sl
 80077d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077d6:	4651      	mov	r1, sl
 80077d8:	00ca      	lsls	r2, r1, #3
 80077da:	4610      	mov	r0, r2
 80077dc:	4619      	mov	r1, r3
 80077de:	4603      	mov	r3, r0
 80077e0:	4642      	mov	r2, r8
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077e6:	464b      	mov	r3, r9
 80077e8:	460a      	mov	r2, r1
 80077ea:	eb42 0303 	adc.w	r3, r2, r3
 80077ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007808:	4649      	mov	r1, r9
 800780a:	008b      	lsls	r3, r1, #2
 800780c:	4641      	mov	r1, r8
 800780e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007812:	4641      	mov	r1, r8
 8007814:	008a      	lsls	r2, r1, #2
 8007816:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800781a:	f7f8 fd31 	bl	8000280 <__aeabi_uldivmod>
 800781e:	4602      	mov	r2, r0
 8007820:	460b      	mov	r3, r1
 8007822:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <UART_SetConfig+0x4e4>)
 8007824:	fba3 1302 	umull	r1, r3, r3, r2
 8007828:	095b      	lsrs	r3, r3, #5
 800782a:	2164      	movs	r1, #100	@ 0x64
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	011b      	lsls	r3, r3, #4
 8007834:	3332      	adds	r3, #50	@ 0x32
 8007836:	4a08      	ldr	r2, [pc, #32]	@ (8007858 <UART_SetConfig+0x4e4>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	095b      	lsrs	r3, r3, #5
 800783e:	f003 020f 	and.w	r2, r3, #15
 8007842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4422      	add	r2, r4
 800784a:	609a      	str	r2, [r3, #8]
}
 800784c:	bf00      	nop
 800784e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007852:	46bd      	mov	sp, r7
 8007854:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007858:	51eb851f 	.word	0x51eb851f

0800785c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800785c:	b084      	sub	sp, #16
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
 8007866:	f107 001c 	add.w	r0, r7, #28
 800786a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800786e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007872:	2b01      	cmp	r3, #1
 8007874:	d123      	bne.n	80078be <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800787a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800788a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800789e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d105      	bne.n	80078b2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9dc 	bl	8007c70 <USB_CoreReset>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]
 80078bc:	e01b      	b.n	80078f6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f9d0 	bl	8007c70 <USB_CoreReset>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078d4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d106      	bne.n	80078ea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80078e8:	e005      	b.n	80078f6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078f6:	7fbb      	ldrb	r3, [r7, #30]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d10b      	bne.n	8007914 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	f043 0206 	orr.w	r2, r3, #6
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f043 0220 	orr.w	r2, r3, #32
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007914:	7bfb      	ldrb	r3, [r7, #15]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007920:	b004      	add	sp, #16
 8007922:	4770      	bx	lr

08007924 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f043 0201 	orr.w	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f023 0201 	bic.w	r2, r3, #1
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007984:	78fb      	ldrb	r3, [r7, #3]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d115      	bne.n	80079b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007996:	200a      	movs	r0, #10
 8007998:	f7fb fa6e 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	330a      	adds	r3, #10
 80079a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f956 	bl	8007c54 <USB_GetMode>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d01e      	beq.n	80079ec <USB_SetCurrentMode+0x84>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80079b2:	d9f0      	bls.n	8007996 <USB_SetCurrentMode+0x2e>
 80079b4:	e01a      	b.n	80079ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079b6:	78fb      	ldrb	r3, [r7, #3]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d115      	bne.n	80079e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079c8:	200a      	movs	r0, #10
 80079ca:	f7fb fa55 	bl	8002e78 <HAL_Delay>
      ms += 10U;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	330a      	adds	r3, #10
 80079d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 f93d 	bl	8007c54 <USB_GetMode>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <USB_SetCurrentMode+0x84>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80079e4:	d9f0      	bls.n	80079c8 <USB_SetCurrentMode+0x60>
 80079e6:	e001      	b.n	80079ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e005      	b.n	80079f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80079f0:	d101      	bne.n	80079f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3301      	adds	r3, #1
 8007a12:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a1a:	d901      	bls.n	8007a20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e01b      	b.n	8007a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	daf2      	bge.n	8007a0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	019b      	lsls	r3, r3, #6
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a44:	d901      	bls.n	8007a4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e006      	b.n	8007a58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d0f0      	beq.n	8007a38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a7c:	d901      	bls.n	8007a82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e018      	b.n	8007ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	daf2      	bge.n	8007a70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2210      	movs	r2, #16
 8007a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007aa0:	d901      	bls.n	8007aa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e006      	b.n	8007ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0310 	and.w	r3, r3, #16
 8007aae:	2b10      	cmp	r3, #16
 8007ab0:	d0f0      	beq.n	8007a94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b089      	sub	sp, #36	@ 0x24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	4611      	mov	r1, r2
 8007acc:	461a      	mov	r2, r3
 8007ace:	460b      	mov	r3, r1
 8007ad0:	71fb      	strb	r3, [r7, #7]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ade:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d123      	bne.n	8007b2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ae6:	88bb      	ldrh	r3, [r7, #4]
 8007ae8:	3303      	adds	r3, #3
 8007aea:	089b      	lsrs	r3, r3, #2
 8007aec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
 8007af2:	e018      	b.n	8007b26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	031a      	lsls	r2, r3, #12
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	4413      	add	r3, r2
 8007afc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b00:	461a      	mov	r2, r3
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	3301      	adds	r3, #1
 8007b12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	3301      	adds	r3, #1
 8007b18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	3301      	adds	r3, #1
 8007b24:	61bb      	str	r3, [r7, #24]
 8007b26:	69ba      	ldr	r2, [r7, #24]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d3e2      	bcc.n	8007af4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3724      	adds	r7, #36	@ 0x24
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b08b      	sub	sp, #44	@ 0x2c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	089b      	lsrs	r3, r3, #2
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	e014      	b.n	8007b92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	3301      	adds	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	3301      	adds	r3, #1
 8007b84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b88:	3301      	adds	r3, #1
 8007b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	623b      	str	r3, [r7, #32]
 8007b92:	6a3a      	ldr	r2, [r7, #32]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d3e6      	bcc.n	8007b68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b9a:	8bfb      	ldrh	r3, [r7, #30]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d01e      	beq.n	8007bde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007baa:	461a      	mov	r2, r3
 8007bac:	f107 0310 	add.w	r3, r7, #16
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	701a      	strb	r2, [r3, #0]
      i++;
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	3301      	adds	r3, #1
 8007bca:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bce:	3301      	adds	r3, #1
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bd2:	8bfb      	ldrh	r3, [r7, #30]
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bd8:	8bfb      	ldrh	r3, [r7, #30]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1ea      	bne.n	8007bb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	372c      	adds	r7, #44	@ 0x2c
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4013      	ands	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c04:	68fb      	ldr	r3, [r7, #12]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b085      	sub	sp, #20
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c22:	78fb      	ldrb	r3, [r7, #3]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	68ba      	ldr	r2, [r7, #8]
 8007c42:	4013      	ands	r3, r2
 8007c44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c46:	68bb      	ldr	r3, [r7, #8]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0301 	and.w	r3, r3, #1
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c88:	d901      	bls.n	8007c8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e01b      	b.n	8007cc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	daf2      	bge.n	8007c7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f043 0201 	orr.w	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cb2:	d901      	bls.n	8007cb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e006      	b.n	8007cc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d0f0      	beq.n	8007ca6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
	...

08007cd4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
 8007cde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d16:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d119      	bne.n	8007d5e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d10a      	bne.n	8007d48 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d40:	f043 0304 	orr.w	r3, r3, #4
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	e014      	b.n	8007d72 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d56:	f023 0304 	bic.w	r3, r3, #4
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	e009      	b.n	8007d72 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d6c:	f023 0304 	bic.w	r3, r3, #4
 8007d70:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d72:	2110      	movs	r1, #16
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f7ff fe43 	bl	8007a00 <USB_FlushTxFifo>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7ff fe6d 	bl	8007a64 <USB_FlushRxFifo>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d94:	2300      	movs	r3, #0
 8007d96:	613b      	str	r3, [r7, #16]
 8007d98:	e015      	b.n	8007dc6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da6:	461a      	mov	r2, r3
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dca:	461a      	mov	r2, r3
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d3e3      	bcc.n	8007d9a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f04f 32ff 	mov.w	r2, #4294967295
 8007dde:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <USB_HostInit+0x170>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d10b      	bne.n	8007e00 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a15      	ldr	r2, [pc, #84]	@ (8007e48 <USB_HostInit+0x174>)
 8007df4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a14      	ldr	r2, [pc, #80]	@ (8007e4c <USB_HostInit+0x178>)
 8007dfa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007dfe:	e009      	b.n	8007e14 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2280      	movs	r2, #128	@ 0x80
 8007e04:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a11      	ldr	r2, [pc, #68]	@ (8007e50 <USB_HostInit+0x17c>)
 8007e0a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a11      	ldr	r2, [pc, #68]	@ (8007e54 <USB_HostInit+0x180>)
 8007e10:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d105      	bne.n	8007e28 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f043 0210 	orr.w	r2, r3, #16
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e58 <USB_HostInit+0x184>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e40:	b004      	add	sp, #16
 8007e42:	4770      	bx	lr
 8007e44:	40040000 	.word	0x40040000
 8007e48:	01000200 	.word	0x01000200
 8007e4c:	00e00300 	.word	0x00e00300
 8007e50:	00600080 	.word	0x00600080
 8007e54:	004000e0 	.word	0x004000e0
 8007e58:	a3200008 	.word	0xa3200008

08007e5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e94:	4313      	orrs	r3, r2
 8007e96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d107      	bne.n	8007eae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007eaa:	6053      	str	r3, [r2, #4]
 8007eac:	e00c      	b.n	8007ec8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d107      	bne.n	8007ec4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007ec0:	6053      	str	r3, [r2, #4]
 8007ec2:	e001      	b.n	8007ec8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007ef6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f04:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f06:	2064      	movs	r0, #100	@ 0x64
 8007f08:	f7fa ffb6 	bl	8002e78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f18:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f1a:	200a      	movs	r0, #10
 8007f1c:	f7fa ffac 	bl	8002e78 <HAL_Delay>

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3710      	adds	r7, #16
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	460b      	mov	r3, r1
 8007f34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f4e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d109      	bne.n	8007f6e <USB_DriveVbus+0x44>
 8007f5a:	78fb      	ldrb	r3, [r7, #3]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d106      	bne.n	8007f6e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f6c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f78:	d109      	bne.n	8007f8e <USB_DriveVbus+0x64>
 8007f7a:	78fb      	ldrb	r3, [r7, #3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d106      	bne.n	8007f8e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f8c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3714      	adds	r7, #20
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	0c5b      	lsrs	r3, r3, #17
 8007fba:	f003 0303 	and.w	r3, r3, #3
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b085      	sub	sp, #20
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	b29b      	uxth	r3, r3
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b088      	sub	sp, #32
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	4608      	mov	r0, r1
 8007ff6:	4611      	mov	r1, r2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	70fb      	strb	r3, [r7, #3]
 8007ffe:	460b      	mov	r3, r1
 8008000:	70bb      	strb	r3, [r7, #2]
 8008002:	4613      	mov	r3, r2
 8008004:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	015a      	lsls	r2, r3, #5
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4413      	add	r3, r2
 8008016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800801a:	461a      	mov	r2, r3
 800801c:	f04f 33ff 	mov.w	r3, #4294967295
 8008020:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008022:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008026:	2b03      	cmp	r3, #3
 8008028:	d87c      	bhi.n	8008124 <USB_HC_Init+0x138>
 800802a:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <USB_HC_Init+0x44>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	08008041 	.word	0x08008041
 8008034:	080080e7 	.word	0x080080e7
 8008038:	08008041 	.word	0x08008041
 800803c:	080080a9 	.word	0x080080a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804c:	461a      	mov	r2, r3
 800804e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008052:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008054:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	da10      	bge.n	800807e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	78fa      	ldrb	r2, [r7, #3]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	440a      	add	r2, r1
 8008072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800807a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800807c:	e055      	b.n	800812a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a6f      	ldr	r2, [pc, #444]	@ (8008240 <USB_HC_Init+0x254>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d151      	bne.n	800812a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	440a      	add	r2, r1
 800809c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80080a4:	60d3      	str	r3, [r2, #12]
      break;
 80080a6:	e040      	b.n	800812a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b4:	461a      	mov	r2, r3
 80080b6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80080ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da34      	bge.n	800812e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080e4:	e023      	b.n	800812e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f2:	461a      	mov	r2, r3
 80080f4:	f240 2325 	movw	r3, #549	@ 0x225
 80080f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da17      	bge.n	8008132 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4413      	add	r3, r2
 800810a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	440a      	add	r2, r1
 8008118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800811c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008120:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008122:	e006      	b.n	8008132 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	77fb      	strb	r3, [r7, #31]
      break;
 8008128:	e004      	b.n	8008134 <USB_HC_Init+0x148>
      break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <USB_HC_Init+0x148>
      break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <USB_HC_Init+0x148>
      break;
 8008132:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4413      	add	r3, r2
 800813c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008140:	461a      	mov	r2, r3
 8008142:	2300      	movs	r3, #0
 8008144:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	78fa      	ldrb	r2, [r7, #3]
 8008156:	0151      	lsls	r1, r2, #5
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	440a      	add	r2, r1
 800815c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008160:	f043 0302 	orr.w	r3, r3, #2
 8008164:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	78fb      	ldrb	r3, [r7, #3]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	6939      	ldr	r1, [r7, #16]
 800817c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008180:	4313      	orrs	r3, r2
 8008182:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008190:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008194:	2b00      	cmp	r3, #0
 8008196:	da03      	bge.n	80081a0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008198:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819c:	61bb      	str	r3, [r7, #24]
 800819e:	e001      	b.n	80081a4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fef9 	bl	8007f9c <USB_GetHostSpeed>
 80081aa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80081ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80081b0:	2b02      	cmp	r3, #2
 80081b2:	d106      	bne.n	80081c2 <USB_HC_Init+0x1d6>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d003      	beq.n	80081c2 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	e001      	b.n	80081c6 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081c6:	787b      	ldrb	r3, [r7, #1]
 80081c8:	059b      	lsls	r3, r3, #22
 80081ca:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081ce:	78bb      	ldrb	r3, [r7, #2]
 80081d0:	02db      	lsls	r3, r3, #11
 80081d2:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081d6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081dc:	049b      	lsls	r3, r3, #18
 80081de:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081e2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80081e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80081e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081ea:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081f4:	78fa      	ldrb	r2, [r7, #3]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008204:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008206:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800820a:	2b03      	cmp	r3, #3
 800820c:	d003      	beq.n	8008216 <USB_HC_Init+0x22a>
 800820e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008212:	2b01      	cmp	r3, #1
 8008214:	d10f      	bne.n	8008236 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008216:	78fb      	ldrb	r3, [r7, #3]
 8008218:	015a      	lsls	r2, r3, #5
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	4413      	add	r3, r2
 800821e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	78fa      	ldrb	r2, [r7, #3]
 8008226:	0151      	lsls	r1, r2, #5
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	440a      	add	r2, r1
 800822c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008230:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008234:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008236:	7ffb      	ldrb	r3, [r7, #31]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3720      	adds	r7, #32
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	40040000 	.word	0x40040000

08008244 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	@ 0x30
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	785b      	ldrb	r3, [r3, #1]
 800825a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800825c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008260:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4a5d      	ldr	r2, [pc, #372]	@ (80083dc <USB_HC_StartXfer+0x198>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d12f      	bne.n	80082ca <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d11c      	bne.n	80082aa <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	7c9b      	ldrb	r3, [r3, #18]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d003      	beq.n	8008280 <USB_HC_StartXfer+0x3c>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	7c9b      	ldrb	r3, [r3, #18]
 800827c:	2b02      	cmp	r3, #2
 800827e:	d124      	bne.n	80082ca <USB_HC_StartXfer+0x86>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	799b      	ldrb	r3, [r3, #6]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d120      	bne.n	80082ca <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	4413      	add	r3, r2
 8008290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	69fa      	ldr	r2, [r7, #28]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	6a3a      	ldr	r2, [r7, #32]
 800829c:	440a      	add	r2, r1
 800829e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082a6:	60d3      	str	r3, [r2, #12]
 80082a8:	e00f      	b.n	80082ca <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10b      	bne.n	80082ca <USB_HC_StartXfer+0x86>
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	795b      	ldrb	r3, [r3, #5]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d107      	bne.n	80082ca <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	4619      	mov	r1, r3
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fb6b 	bl	800899c <USB_DoPing>
        return HAL_OK;
 80082c6:	2300      	movs	r3, #0
 80082c8:	e232      	b.n	8008730 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	799b      	ldrb	r3, [r3, #6]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d158      	bne.n	8008384 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80082d2:	2301      	movs	r3, #1
 80082d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	78db      	ldrb	r3, [r3, #3]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	8a92      	ldrh	r2, [r2, #20]
 80082e4:	fb03 f202 	mul.w	r2, r3, r2
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	61da      	str	r2, [r3, #28]
 80082ec:	e07c      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	7c9b      	ldrb	r3, [r3, #18]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d130      	bne.n	8008358 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80082fc:	d918      	bls.n	8008330 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	8a9b      	ldrh	r3, [r3, #20]
 8008302:	461a      	mov	r2, r3
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	69da      	ldr	r2, [r3, #28]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d003      	beq.n	8008320 <USB_HC_StartXfer+0xdc>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d103      	bne.n	8008328 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	2202      	movs	r2, #2
 8008324:	60da      	str	r2, [r3, #12]
 8008326:	e05f      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2201      	movs	r2, #1
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	e05b      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	6a1a      	ldr	r2, [r3, #32]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d007      	beq.n	8008350 <USB_HC_StartXfer+0x10c>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d003      	beq.n	8008350 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2204      	movs	r2, #4
 800834c:	60da      	str	r2, [r3, #12]
 800834e:	e04b      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	2203      	movs	r2, #3
 8008354:	60da      	str	r2, [r3, #12]
 8008356:	e047      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008358:	79fb      	ldrb	r3, [r7, #7]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10d      	bne.n	800837a <USB_HC_StartXfer+0x136>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	8a92      	ldrh	r2, [r2, #20]
 8008366:	4293      	cmp	r3, r2
 8008368:	d907      	bls.n	800837a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800836a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	8a92      	ldrh	r2, [r2, #20]
 8008370:	fb03 f202 	mul.w	r2, r3, r2
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	61da      	str	r2, [r3, #28]
 8008378:	e036      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	6a1a      	ldr	r2, [r3, #32]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	61da      	str	r2, [r3, #28]
 8008382:	e031      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	6a1b      	ldr	r3, [r3, #32]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d018      	beq.n	80083be <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	8a92      	ldrh	r2, [r2, #20]
 8008394:	4413      	add	r3, r2
 8008396:	3b01      	subs	r3, #1
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	8a92      	ldrh	r2, [r2, #20]
 800839c:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80083a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80083a4:	8b7b      	ldrh	r3, [r7, #26]
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d90b      	bls.n	80083c2 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80083aa:	8b7b      	ldrh	r3, [r7, #26]
 80083ac:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	8a92      	ldrh	r2, [r2, #20]
 80083b4:	fb03 f202 	mul.w	r2, r3, r2
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	61da      	str	r2, [r3, #28]
 80083bc:	e001      	b.n	80083c2 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80083be:	2301      	movs	r3, #1
 80083c0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	78db      	ldrb	r3, [r3, #3]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083ca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	8a92      	ldrh	r2, [r2, #20]
 80083d0:	fb03 f202 	mul.w	r2, r3, r2
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	61da      	str	r2, [r3, #28]
 80083d8:	e006      	b.n	80083e8 <USB_HC_StartXfer+0x1a4>
 80083da:	bf00      	nop
 80083dc:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083f2:	04d9      	lsls	r1, r3, #19
 80083f4:	4ba3      	ldr	r3, [pc, #652]	@ (8008684 <USB_HC_StartXfer+0x440>)
 80083f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	7d9b      	ldrb	r3, [r3, #22]
 80083fe:	075b      	lsls	r3, r3, #29
 8008400:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008404:	69f9      	ldr	r1, [r7, #28]
 8008406:	0148      	lsls	r0, r1, #5
 8008408:	6a39      	ldr	r1, [r7, #32]
 800840a:	4401      	add	r1, r0
 800840c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008410:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008412:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	6a3b      	ldr	r3, [r7, #32]
 8008424:	4413      	add	r3, r2
 8008426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800842a:	460a      	mov	r2, r1
 800842c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800842e:	6a3b      	ldr	r3, [r7, #32]
 8008430:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	f003 0301 	and.w	r3, r3, #1
 800843a:	2b00      	cmp	r3, #0
 800843c:	bf0c      	ite	eq
 800843e:	2301      	moveq	r3, #1
 8008440:	2300      	movne	r3, #0
 8008442:	b2db      	uxtb	r3, r3
 8008444:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	6a3a      	ldr	r2, [r7, #32]
 800845a:	440a      	add	r2, r1
 800845c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008460:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008464:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	6a3b      	ldr	r3, [r7, #32]
 800846c:	4413      	add	r3, r2
 800846e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	7e7b      	ldrb	r3, [r7, #25]
 8008476:	075b      	lsls	r3, r3, #29
 8008478:	69f9      	ldr	r1, [r7, #28]
 800847a:	0148      	lsls	r0, r1, #5
 800847c:	6a39      	ldr	r1, [r7, #32]
 800847e:	4401      	add	r1, r0
 8008480:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008484:	4313      	orrs	r3, r2
 8008486:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	799b      	ldrb	r3, [r3, #6]
 800848c:	2b01      	cmp	r3, #1
 800848e:	f040 80c3 	bne.w	8008618 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7c5b      	ldrb	r3, [r3, #17]
 8008496:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800849c:	4313      	orrs	r3, r2
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80084aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80084ae:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	015a      	lsls	r2, r3, #5
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	4413      	add	r3, r2
 80084b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	69fa      	ldr	r2, [r7, #28]
 80084c0:	0151      	lsls	r1, r2, #5
 80084c2:	6a3a      	ldr	r2, [r7, #32]
 80084c4:	440a      	add	r2, r1
 80084c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80084ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	79db      	ldrb	r3, [r3, #7]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d123      	bne.n	8008520 <USB_HC_StartXfer+0x2dc>
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	78db      	ldrb	r3, [r3, #3]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d11f      	bne.n	8008520 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	015a      	lsls	r2, r3, #5
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	4413      	add	r3, r2
 80084e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	69fa      	ldr	r2, [r7, #28]
 80084f0:	0151      	lsls	r1, r2, #5
 80084f2:	6a3a      	ldr	r2, [r7, #32]
 80084f4:	440a      	add	r2, r1
 80084f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084fe:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	4413      	add	r3, r2
 8008508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	69fa      	ldr	r2, [r7, #28]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	6a3a      	ldr	r2, [r7, #32]
 8008514:	440a      	add	r2, r1
 8008516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800851a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800851e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	7c9b      	ldrb	r3, [r3, #18]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d003      	beq.n	8008530 <USB_HC_StartXfer+0x2ec>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	7c9b      	ldrb	r3, [r3, #18]
 800852c:	2b03      	cmp	r3, #3
 800852e:	d117      	bne.n	8008560 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008534:	2b01      	cmp	r3, #1
 8008536:	d113      	bne.n	8008560 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	78db      	ldrb	r3, [r3, #3]
 800853c:	2b01      	cmp	r3, #1
 800853e:	d10f      	bne.n	8008560 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	6a3a      	ldr	r2, [r7, #32]
 8008554:	440a      	add	r2, r1
 8008556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800855a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800855e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	7c9b      	ldrb	r3, [r3, #18]
 8008564:	2b01      	cmp	r3, #1
 8008566:	d162      	bne.n	800862e <USB_HC_StartXfer+0x3ea>
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	78db      	ldrb	r3, [r3, #3]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d15e      	bne.n	800862e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	3b01      	subs	r3, #1
 8008576:	2b03      	cmp	r3, #3
 8008578:	d858      	bhi.n	800862c <USB_HC_StartXfer+0x3e8>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <USB_HC_StartXfer+0x33c>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	08008591 	.word	0x08008591
 8008584:	080085b3 	.word	0x080085b3
 8008588:	080085d5 	.word	0x080085d5
 800858c:	080085f7 	.word	0x080085f7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	015a      	lsls	r2, r3, #5
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	4413      	add	r3, r2
 8008598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	0151      	lsls	r1, r2, #5
 80085a2:	6a3a      	ldr	r2, [r7, #32]
 80085a4:	440a      	add	r2, r1
 80085a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085ae:	6053      	str	r3, [r2, #4]
          break;
 80085b0:	e03d      	b.n	800862e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	015a      	lsls	r2, r3, #5
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	4413      	add	r3, r2
 80085ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	69fa      	ldr	r2, [r7, #28]
 80085c2:	0151      	lsls	r1, r2, #5
 80085c4:	6a3a      	ldr	r2, [r7, #32]
 80085c6:	440a      	add	r2, r1
 80085c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085cc:	f043 030e 	orr.w	r3, r3, #14
 80085d0:	6053      	str	r3, [r2, #4]
          break;
 80085d2:	e02c      	b.n	800862e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	015a      	lsls	r2, r3, #5
 80085d8:	6a3b      	ldr	r3, [r7, #32]
 80085da:	4413      	add	r3, r2
 80085dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	0151      	lsls	r1, r2, #5
 80085e6:	6a3a      	ldr	r2, [r7, #32]
 80085e8:	440a      	add	r2, r1
 80085ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085f2:	6053      	str	r3, [r2, #4]
          break;
 80085f4:	e01b      	b.n	800862e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	015a      	lsls	r2, r3, #5
 80085fa:	6a3b      	ldr	r3, [r7, #32]
 80085fc:	4413      	add	r3, r2
 80085fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	69fa      	ldr	r2, [r7, #28]
 8008606:	0151      	lsls	r1, r2, #5
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	440a      	add	r2, r1
 800860c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008610:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008614:	6053      	str	r3, [r2, #4]
          break;
 8008616:	e00a      	b.n	800862e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	4413      	add	r3, r2
 8008620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008624:	461a      	mov	r2, r3
 8008626:	2300      	movs	r3, #0
 8008628:	6053      	str	r3, [r2, #4]
 800862a:	e000      	b.n	800862e <USB_HC_StartXfer+0x3ea>
          break;
 800862c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008644:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	78db      	ldrb	r3, [r3, #3]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008654:	613b      	str	r3, [r7, #16]
 8008656:	e003      	b.n	8008660 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800865e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008666:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	015a      	lsls	r2, r3, #5
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	4413      	add	r3, r2
 8008670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008674:	461a      	mov	r2, r3
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800867a:	79fb      	ldrb	r3, [r7, #7]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	e055      	b.n	8008730 <USB_HC_StartXfer+0x4ec>
 8008684:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	78db      	ldrb	r3, [r3, #3]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d14e      	bne.n	800872e <USB_HC_StartXfer+0x4ea>
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d04a      	beq.n	800872e <USB_HC_StartXfer+0x4ea>
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	79db      	ldrb	r3, [r3, #7]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d146      	bne.n	800872e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	7c9b      	ldrb	r3, [r3, #18]
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d831      	bhi.n	800870c <USB_HC_StartXfer+0x4c8>
 80086a8:	a201      	add	r2, pc, #4	@ (adr r2, 80086b0 <USB_HC_StartXfer+0x46c>)
 80086aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ae:	bf00      	nop
 80086b0:	080086c1 	.word	0x080086c1
 80086b4:	080086e5 	.word	0x080086e5
 80086b8:	080086c1 	.word	0x080086c1
 80086bc:	080086e5 	.word	0x080086e5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	6a1b      	ldr	r3, [r3, #32]
 80086c4:	3303      	adds	r3, #3
 80086c6:	089b      	lsrs	r3, r3, #2
 80086c8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086ca:	8afa      	ldrh	r2, [r7, #22]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d91c      	bls.n	8008710 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f043 0220 	orr.w	r2, r3, #32
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80086e2:	e015      	b.n	8008710 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	3303      	adds	r3, #3
 80086ea:	089b      	lsrs	r3, r3, #2
 80086ec:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80086ee:	8afa      	ldrh	r2, [r7, #22]
 80086f0:	6a3b      	ldr	r3, [r7, #32]
 80086f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d90a      	bls.n	8008714 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	619a      	str	r2, [r3, #24]
        }
        break;
 800870a:	e003      	b.n	8008714 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800870c:	bf00      	nop
 800870e:	e002      	b.n	8008716 <USB_HC_StartXfer+0x4d2>
        break;
 8008710:	bf00      	nop
 8008712:	e000      	b.n	8008716 <USB_HC_StartXfer+0x4d2>
        break;
 8008714:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	6999      	ldr	r1, [r3, #24]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	785a      	ldrb	r2, [r3, #1]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	b29b      	uxth	r3, r3
 8008724:	2000      	movs	r0, #0
 8008726:	9000      	str	r0, [sp, #0]
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff f9c9 	bl	8007ac0 <USB_WritePacket>
  }

  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3728      	adds	r7, #40	@ 0x28
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800874a:	695b      	ldr	r3, [r3, #20]
 800874c:	b29b      	uxth	r3, r3
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800875a:	b480      	push	{r7}
 800875c:	b089      	sub	sp, #36	@ 0x24
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	460b      	mov	r3, r1
 8008764:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800876a:	78fb      	ldrb	r3, [r7, #3]
 800876c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	0c9b      	lsrs	r3, r3, #18
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	4413      	add	r3, r2
 8008790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	0fdb      	lsrs	r3, r3, #31
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	015a      	lsls	r2, r3, #5
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	4413      	add	r3, r2
 80087a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	0fdb      	lsrs	r3, r3, #31
 80087ae:	f003 0301 	and.w	r3, r3, #1
 80087b2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b20      	cmp	r3, #32
 80087be:	d10d      	bne.n	80087dc <USB_HC_Halt+0x82>
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <USB_HC_Halt+0x82>
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d002      	beq.n	80087d8 <USB_HC_Halt+0x7e>
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d101      	bne.n	80087dc <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	e0d8      	b.n	800898e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d002      	beq.n	80087e8 <USB_HC_Halt+0x8e>
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d173      	bne.n	80088d0 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008802:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008806:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d14a      	bne.n	80088aa <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d133      	bne.n	8008888 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	69ba      	ldr	r2, [r7, #24]
 8008830:	0151      	lsls	r1, r2, #5
 8008832:	69fa      	ldr	r2, [r7, #28]
 8008834:	440a      	add	r2, r1
 8008836:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800883a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800883e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800885a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800885e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3301      	adds	r3, #1
 8008864:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800886c:	d82e      	bhi.n	80088cc <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800886e:	69bb      	ldr	r3, [r7, #24]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	4413      	add	r3, r2
 8008876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008880:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008884:	d0ec      	beq.n	8008860 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008886:	e081      	b.n	800898c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	4413      	add	r3, r2
 8008890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	69fa      	ldr	r2, [r7, #28]
 800889c:	440a      	add	r2, r1
 800889e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088a6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088a8:	e070      	b.n	800898c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	69fb      	ldr	r3, [r7, #28]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	69ba      	ldr	r2, [r7, #24]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088ca:	e05f      	b.n	800898c <USB_HC_Halt+0x232>
            break;
 80088cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088ce:	e05d      	b.n	800898c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d133      	bne.n	8008968 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	4413      	add	r3, r2
 8008908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	0151      	lsls	r1, r2, #5
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	440a      	add	r2, r1
 8008916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800891a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800891e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	015a      	lsls	r2, r3, #5
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	4413      	add	r3, r2
 8008928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69ba      	ldr	r2, [r7, #24]
 8008930:	0151      	lsls	r1, r2, #5
 8008932:	69fa      	ldr	r2, [r7, #28]
 8008934:	440a      	add	r2, r1
 8008936:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800893e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	3301      	adds	r3, #1
 8008944:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800894c:	d81d      	bhi.n	800898a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008964:	d0ec      	beq.n	8008940 <USB_HC_Halt+0x1e6>
 8008966:	e011      	b.n	800898c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008968:	69bb      	ldr	r3, [r7, #24]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	4413      	add	r3, r2
 8008970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	0151      	lsls	r1, r2, #5
 800897a:	69fa      	ldr	r2, [r7, #28]
 800897c:	440a      	add	r2, r1
 800897e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008982:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008986:	6013      	str	r3, [r2, #0]
 8008988:	e000      	b.n	800898c <USB_HC_Halt+0x232>
          break;
 800898a:	bf00      	nop
    }
  }

  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3724      	adds	r7, #36	@ 0x24
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
	...

0800899c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800899c:	b480      	push	{r7}
 800899e:	b087      	sub	sp, #28
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80089ac:	78fb      	ldrb	r3, [r7, #3]
 80089ae:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	04da      	lsls	r2, r3, #19
 80089b8:	4b15      	ldr	r3, [pc, #84]	@ (8008a10 <USB_DoPing+0x74>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089cc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089e4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089ec:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089fa:	461a      	mov	r2, r3
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	371c      	adds	r7, #28
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	1ff80000 	.word	0x1ff80000

08008a14 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7fe ff8c 	bl	8007946 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a2e:	2110      	movs	r1, #16
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f7fe ffe5 	bl	8007a00 <USB_FlushTxFifo>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff f80f 	bl	8007a64 <USB_FlushRxFifo>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a50:	2300      	movs	r3, #0
 8008a52:	61bb      	str	r3, [r7, #24]
 8008a54:	e01f      	b.n	8008a96 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a74:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a7c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	3301      	adds	r3, #1
 8008a94:	61bb      	str	r3, [r7, #24]
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	2b0f      	cmp	r3, #15
 8008a9a:	d9dc      	bls.n	8008a56 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	61bb      	str	r3, [r7, #24]
 8008aa0:	e034      	b.n	8008b0c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ab8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ac0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ac8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ae8:	d80c      	bhi.n	8008b04 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008afc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b00:	d0ec      	beq.n	8008adc <USB_StopHost+0xc8>
 8008b02:	e000      	b.n	8008b06 <USB_StopHost+0xf2>
        break;
 8008b04:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b06:	69bb      	ldr	r3, [r7, #24]
 8008b08:	3301      	adds	r3, #1
 8008b0a:	61bb      	str	r3, [r7, #24]
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	2b0f      	cmp	r3, #15
 8008b10:	d9c7      	bls.n	8008aa2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b1e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f04f 32ff 	mov.w	r2, #4294967295
 8008b26:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fe fefb 	bl	8007924 <USB_EnableGlobalInt>

  return ret;
 8008b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b089      	sub	sp, #36	@ 0x24
 8008b3c:	af04      	add	r7, sp, #16
 8008b3e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008b40:	2301      	movs	r3, #1
 8008b42:	2202      	movs	r2, #2
 8008b44:	2102      	movs	r1, #2
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fc85 	bl	8009456 <USBH_FindInterface>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
 8008b52:	2bff      	cmp	r3, #255	@ 0xff
 8008b54:	d002      	beq.n	8008b5c <USBH_CDC_InterfaceInit+0x24>
 8008b56:	7bfb      	ldrb	r3, [r7, #15]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d901      	bls.n	8008b60 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e13d      	b.n	8008ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4619      	mov	r1, r3
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fc5a 	bl	800941e <USBH_SelectInterface>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b74:	2302      	movs	r3, #2
 8008b76:	e131      	b.n	8008ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b7e:	2050      	movs	r0, #80	@ 0x50
 8008b80:	f002 fb64 	bl	800b24c <malloc>
 8008b84:	4603      	mov	r3, r0
 8008b86:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e11f      	b.n	8008ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008b9c:	2250      	movs	r2, #80	@ 0x50
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	68b8      	ldr	r0, [r7, #8]
 8008ba2:	f002 fe3d 	bl	800b820 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	211a      	movs	r1, #26
 8008bac:	fb01 f303 	mul.w	r3, r1, r3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	da15      	bge.n	8008bea <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	211a      	movs	r1, #26
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	4413      	add	r3, r2
 8008bca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bce:	781a      	ldrb	r2, [r3, #0]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	211a      	movs	r1, #26
 8008bda:	fb01 f303 	mul.w	r3, r1, r3
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008be4:	881a      	ldrh	r2, [r3, #0]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	785b      	ldrb	r3, [r3, #1]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f001 ffbe 	bl	800ab72 <USBH_AllocPipe>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	7819      	ldrb	r1, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	7858      	ldrb	r0, [r3, #1]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	8952      	ldrh	r2, [r2, #10]
 8008c16:	9202      	str	r2, [sp, #8]
 8008c18:	2203      	movs	r2, #3
 8008c1a:	9201      	str	r2, [sp, #4]
 8008c1c:	9300      	str	r3, [sp, #0]
 8008c1e:	4623      	mov	r3, r4
 8008c20:	4602      	mov	r2, r0
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 ff76 	bl	800ab14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f002 fa85 	bl	800b140 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008c36:	2300      	movs	r3, #0
 8008c38:	2200      	movs	r2, #0
 8008c3a:	210a      	movs	r1, #10
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fc0a 	bl	8009456 <USBH_FindInterface>
 8008c42:	4603      	mov	r3, r0
 8008c44:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	2bff      	cmp	r3, #255	@ 0xff
 8008c4a:	d002      	beq.n	8008c52 <USBH_CDC_InterfaceInit+0x11a>
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d901      	bls.n	8008c56 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c52:	2302      	movs	r3, #2
 8008c54:	e0c2      	b.n	8008ddc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	211a      	movs	r1, #26
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	b25b      	sxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da16      	bge.n	8008c9c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	211a      	movs	r1, #26
 8008c74:	fb01 f303 	mul.w	r3, r1, r3
 8008c78:	4413      	add	r3, r2
 8008c7a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	211a      	movs	r1, #26
 8008c8a:	fb01 f303 	mul.w	r3, r1, r3
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c94:	881a      	ldrh	r2, [r3, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	835a      	strh	r2, [r3, #26]
 8008c9a:	e015      	b.n	8008cc8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	211a      	movs	r1, #26
 8008ca2:	fb01 f303 	mul.w	r3, r1, r3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008cac:	781a      	ldrb	r2, [r3, #0]
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cb2:	7bfb      	ldrb	r3, [r7, #15]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	211a      	movs	r1, #26
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008cc2:	881a      	ldrh	r2, [r3, #0]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	211a      	movs	r1, #26
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b25b      	sxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	da16      	bge.n	8008d0e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	211a      	movs	r1, #26
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cf0:	781a      	ldrb	r2, [r3, #0]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	211a      	movs	r1, #26
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d06:	881a      	ldrh	r2, [r3, #0]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	835a      	strh	r2, [r3, #26]
 8008d0c:	e015      	b.n	8008d3a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	211a      	movs	r1, #26
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	4413      	add	r3, r2
 8008d1a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	211a      	movs	r1, #26
 8008d2a:	fb01 f303 	mul.w	r3, r1, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d34:	881a      	ldrh	r2, [r3, #0]
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	7b9b      	ldrb	r3, [r3, #14]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 ff16 	bl	800ab72 <USBH_AllocPipe>
 8008d46:	4603      	mov	r3, r0
 8008d48:	461a      	mov	r2, r3
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	7bdb      	ldrb	r3, [r3, #15]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 ff0c 	bl	800ab72 <USBH_AllocPipe>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	7b59      	ldrb	r1, [r3, #13]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	7b98      	ldrb	r0, [r3, #14]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d76:	68ba      	ldr	r2, [r7, #8]
 8008d78:	8b12      	ldrh	r2, [r2, #24]
 8008d7a:	9202      	str	r2, [sp, #8]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	9201      	str	r2, [sp, #4]
 8008d80:	9300      	str	r3, [sp, #0]
 8008d82:	4623      	mov	r3, r4
 8008d84:	4602      	mov	r2, r0
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 fec4 	bl	800ab14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	7b19      	ldrb	r1, [r3, #12]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	7bd8      	ldrb	r0, [r3, #15]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	8b52      	ldrh	r2, [r2, #26]
 8008da4:	9202      	str	r2, [sp, #8]
 8008da6:	2202      	movs	r2, #2
 8008da8:	9201      	str	r2, [sp, #4]
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	4623      	mov	r3, r4
 8008dae:	4602      	mov	r2, r0
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f001 feaf 	bl	800ab14 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	7b5b      	ldrb	r3, [r3, #13]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f002 f9ba 	bl	800b140 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	7b1b      	ldrb	r3, [r3, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f002 f9b3 	bl	800b140 <USBH_LL_SetToggle>

  return USBH_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd90      	pop	{r4, r7, pc}

08008de4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008df2:	69db      	ldr	r3, [r3, #28]
 8008df4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00e      	beq.n	8008e1c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fea4 	bl	800ab52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fecf 	bl	800abb4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	7b1b      	ldrb	r3, [r3, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00e      	beq.n	8008e42 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	7b1b      	ldrb	r3, [r3, #12]
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f001 fe91 	bl	800ab52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	7b1b      	ldrb	r3, [r3, #12]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 febc 	bl	800abb4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	7b5b      	ldrb	r3, [r3, #13]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00e      	beq.n	8008e68 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	7b5b      	ldrb	r3, [r3, #13]
 8008e4e:	4619      	mov	r1, r3
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f001 fe7e 	bl	800ab52 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	7b5b      	ldrb	r3, [r3, #13]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 fea9 	bl	800abb4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00b      	beq.n	8008e8c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 f9ed 	bl	800b25c <free>
    phost->pActiveClass->pData = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e88:	2200      	movs	r2, #0
 8008e8a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	3340      	adds	r3, #64	@ 0x40
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8b1 	bl	8009016 <GetLineCoding>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d105      	bne.n	8008eca <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ec4:	2102      	movs	r1, #2
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008eca:	7afb      	ldrb	r3, [r7, #11]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3710      	adds	r7, #16
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008edc:	2301      	movs	r3, #1
 8008ede:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eea:	69db      	ldr	r3, [r3, #28]
 8008eec:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008ef4:	2b04      	cmp	r3, #4
 8008ef6:	d877      	bhi.n	8008fe8 <USBH_CDC_Process+0x114>
 8008ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8008f00 <USBH_CDC_Process+0x2c>)
 8008efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008efe:	bf00      	nop
 8008f00:	08008f15 	.word	0x08008f15
 8008f04:	08008f1b 	.word	0x08008f1b
 8008f08:	08008f4b 	.word	0x08008f4b
 8008f0c:	08008fbf 	.word	0x08008fbf
 8008f10:	08008fcd 	.word	0x08008fcd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	73fb      	strb	r3, [r7, #15]
      break;
 8008f18:	e06d      	b.n	8008ff6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f897 	bl	8009054 <SetLineCoding>
 8008f26:	4603      	mov	r3, r0
 8008f28:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f2a:	7bbb      	ldrb	r3, [r7, #14]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d104      	bne.n	8008f3a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2202      	movs	r2, #2
 8008f34:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f38:	e058      	b.n	8008fec <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d055      	beq.n	8008fec <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	2204      	movs	r2, #4
 8008f44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f48:	e050      	b.n	8008fec <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	3340      	adds	r3, #64	@ 0x40
 8008f4e:	4619      	mov	r1, r3
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 f860 	bl	8009016 <GetLineCoding>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d126      	bne.n	8008fae <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f72:	791b      	ldrb	r3, [r3, #4]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d13b      	bne.n	8008ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f82:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d133      	bne.n	8008ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f92:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d12b      	bne.n	8008ff0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fa0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d124      	bne.n	8008ff0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f958 	bl	800925c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008fac:	e020      	b.n	8008ff0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d01d      	beq.n	8008ff0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008fbc:	e018      	b.n	8008ff0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f867 	bl	8009092 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f8da 	bl	800917e <CDC_ProcessReception>
      break;
 8008fca:	e014      	b.n	8008ff6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f001 f81a 	bl	800a008 <USBH_ClrFeature>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10a      	bne.n	8008ff4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008fe6:	e005      	b.n	8008ff4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008fe8:	bf00      	nop
 8008fea:	e004      	b.n	8008ff6 <USBH_CDC_Process+0x122>
      break;
 8008fec:	bf00      	nop
 8008fee:	e002      	b.n	8008ff6 <USBH_CDC_Process+0x122>
      break;
 8008ff0:	bf00      	nop
 8008ff2:	e000      	b.n	8008ff6 <USBH_CDC_Process+0x122>
      break;
 8008ff4:	bf00      	nop

  }

  return status;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009016:	b580      	push	{r7, lr}
 8009018:	b082      	sub	sp, #8
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	22a1      	movs	r2, #161	@ 0xa1
 8009024:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2221      	movs	r2, #33	@ 0x21
 800902a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2200      	movs	r2, #0
 8009036:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2207      	movs	r2, #7
 800903c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2207      	movs	r2, #7
 8009042:	4619      	mov	r1, r3
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f001 fb14 	bl	800a672 <USBH_CtlReq>
 800904a:	4603      	mov	r3, r0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2221      	movs	r2, #33	@ 0x21
 8009062:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2207      	movs	r2, #7
 800907a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2207      	movs	r2, #7
 8009080:	4619      	mov	r1, r3
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 faf5 	bl	800a672 <USBH_CtlReq>
 8009088:	4603      	mov	r3, r0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af02      	add	r7, sp, #8
 8009098:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090a0:	69db      	ldr	r3, [r3, #28]
 80090a2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d002      	beq.n	80090b8 <CDC_ProcessTransmission+0x26>
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d023      	beq.n	80090fe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80090b6:	e05e      	b.n	8009176 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	8b12      	ldrh	r2, [r2, #24]
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d90b      	bls.n	80090dc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	69d9      	ldr	r1, [r3, #28]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8b1a      	ldrh	r2, [r3, #24]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	7b5b      	ldrb	r3, [r3, #13]
 80090d0:	2001      	movs	r0, #1
 80090d2:	9000      	str	r0, [sp, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 fcda 	bl	800aa8e <USBH_BulkSendData>
 80090da:	e00b      	b.n	80090f4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	7b5b      	ldrb	r3, [r3, #13]
 80090ea:	2001      	movs	r0, #1
 80090ec:	9000      	str	r0, [sp, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f001 fccd 	bl	800aa8e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2202      	movs	r2, #2
 80090f8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80090fc:	e03b      	b.n	8009176 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	7b5b      	ldrb	r3, [r3, #13]
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f001 fff1 	bl	800b0ec <USBH_LL_GetURBState>
 800910a:	4603      	mov	r3, r0
 800910c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d128      	bne.n	8009166 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	8b12      	ldrh	r2, [r2, #24]
 800911c:	4293      	cmp	r3, r2
 800911e:	d90e      	bls.n	800913e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	8b12      	ldrh	r2, [r2, #24]
 8009128:	1a9a      	subs	r2, r3, r2
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	69db      	ldr	r3, [r3, #28]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	8b12      	ldrh	r2, [r2, #24]
 8009136:	441a      	add	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	61da      	str	r2, [r3, #28]
 800913c:	e002      	b.n	8009144 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009148:	2b00      	cmp	r3, #0
 800914a:	d004      	beq.n	8009156 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009154:	e00e      	b.n	8009174 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2200      	movs	r2, #0
 800915a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f868 	bl	8009234 <USBH_CDC_TransmitCallback>
      break;
 8009164:	e006      	b.n	8009174 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009166:	7afb      	ldrb	r3, [r7, #11]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d103      	bne.n	8009174 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2201      	movs	r2, #1
 8009170:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009174:	bf00      	nop
  }
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009190:	2300      	movs	r3, #0
 8009192:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800919a:	2b03      	cmp	r3, #3
 800919c:	d002      	beq.n	80091a4 <CDC_ProcessReception+0x26>
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d00e      	beq.n	80091c0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80091a2:	e043      	b.n	800922c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	6a19      	ldr	r1, [r3, #32]
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	8b5a      	ldrh	r2, [r3, #26]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	7b1b      	ldrb	r3, [r3, #12]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f001 fc91 	bl	800aad8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2204      	movs	r2, #4
 80091ba:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091be:	e035      	b.n	800922c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	7b1b      	ldrb	r3, [r3, #12]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 ff90 	bl	800b0ec <USBH_LL_GetURBState>
 80091cc:	4603      	mov	r3, r0
 80091ce:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80091d0:	7cfb      	ldrb	r3, [r7, #19]
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d129      	bne.n	800922a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	7b1b      	ldrb	r3, [r3, #12]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fef3 	bl	800afc8 <USBH_LL_GetLastXferSize>
 80091e2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d016      	beq.n	800921c <CDC_ProcessReception+0x9e>
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	8b5b      	ldrh	r3, [r3, #26]
 80091f2:	461a      	mov	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d110      	bne.n	800921c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	1ad2      	subs	r2, r2, r3
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	6a1a      	ldr	r2, [r3, #32]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	441a      	add	r2, r3
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2203      	movs	r2, #3
 8009216:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800921a:	e006      	b.n	800922a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f80f 	bl	8009248 <USBH_CDC_ReceiveCallback>
      break;
 800922a:	bf00      	nop
  }
}
 800922c:	bf00      	nop
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009284:	2302      	movs	r3, #2
 8009286:	e029      	b.n	80092dc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	79fa      	ldrb	r2, [r7, #7]
 800928c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 f81f 	bl	80092e4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d003      	beq.n	80092d4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	68ba      	ldr	r2, [r7, #8]
 80092d0:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f001 fdc3 	bl	800ae60 <USBH_LL_Init>

  return USBH_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092f0:	2300      	movs	r3, #0
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	e009      	b.n	800930a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	33e0      	adds	r3, #224	@ 0xe0
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	4413      	add	r3, r2
 8009300:	2200      	movs	r2, #0
 8009302:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b0f      	cmp	r3, #15
 800930e:	d9f2      	bls.n	80092f6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e009      	b.n	800932a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4413      	add	r3, r2
 800931c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009320:	2200      	movs	r2, #0
 8009322:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009330:	d3f1      	bcc.n	8009316 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2240      	movs	r2, #64	@ 0x40
 8009356:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	331c      	adds	r3, #28
 8009382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009386:	2100      	movs	r1, #0
 8009388:	4618      	mov	r0, r3
 800938a:	f002 fa49 	bl	800b820 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009398:	2100      	movs	r1, #0
 800939a:	4618      	mov	r0, r3
 800939c:	f002 fa40 	bl	800b820 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80093a6:	2212      	movs	r2, #18
 80093a8:	2100      	movs	r1, #0
 80093aa:	4618      	mov	r0, r3
 80093ac:	f002 fa38 	bl	800b820 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80093b6:	223e      	movs	r2, #62	@ 0x3e
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 fa30 	bl	800b820 <memset>

  return USBH_OK;
 80093c0:	2300      	movs	r3, #0
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d016      	beq.n	800940c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10e      	bne.n	8009406 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093ee:	1c59      	adds	r1, r3, #1
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	33de      	adds	r3, #222	@ 0xde
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	73fb      	strb	r3, [r7, #15]
 8009404:	e004      	b.n	8009410 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009406:	2302      	movs	r3, #2
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	e001      	b.n	8009410 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800940c:	2302      	movs	r3, #2
 800940e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800941e:	b480      	push	{r7}
 8009420:	b085      	sub	sp, #20
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
 8009426:	460b      	mov	r3, r1
 8009428:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800942a:	2300      	movs	r3, #0
 800942c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009434:	78fa      	ldrb	r2, [r7, #3]
 8009436:	429a      	cmp	r2, r3
 8009438:	d204      	bcs.n	8009444 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009442:	e001      	b.n	8009448 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009444:	2302      	movs	r3, #2
 8009446:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009448:	7bfb      	ldrb	r3, [r7, #15]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009456:	b480      	push	{r7}
 8009458:	b087      	sub	sp, #28
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	4608      	mov	r0, r1
 8009460:	4611      	mov	r1, r2
 8009462:	461a      	mov	r2, r3
 8009464:	4603      	mov	r3, r0
 8009466:	70fb      	strb	r3, [r7, #3]
 8009468:	460b      	mov	r3, r1
 800946a:	70bb      	strb	r3, [r7, #2]
 800946c:	4613      	mov	r3, r2
 800946e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009474:	2300      	movs	r3, #0
 8009476:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800947e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009480:	e025      	b.n	80094ce <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	221a      	movs	r2, #26
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	3308      	adds	r3, #8
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	3302      	adds	r3, #2
 8009492:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	795b      	ldrb	r3, [r3, #5]
 8009498:	78fa      	ldrb	r2, [r7, #3]
 800949a:	429a      	cmp	r2, r3
 800949c:	d002      	beq.n	80094a4 <USBH_FindInterface+0x4e>
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	2bff      	cmp	r3, #255	@ 0xff
 80094a2:	d111      	bne.n	80094c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094a8:	78ba      	ldrb	r2, [r7, #2]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d002      	beq.n	80094b4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094ae:	78bb      	ldrb	r3, [r7, #2]
 80094b0:	2bff      	cmp	r3, #255	@ 0xff
 80094b2:	d109      	bne.n	80094c8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094b8:	787a      	ldrb	r2, [r7, #1]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d002      	beq.n	80094c4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094be:	787b      	ldrb	r3, [r7, #1]
 80094c0:	2bff      	cmp	r3, #255	@ 0xff
 80094c2:	d101      	bne.n	80094c8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	e006      	b.n	80094d6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	3301      	adds	r3, #1
 80094cc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094ce:	7dfb      	ldrb	r3, [r7, #23]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d9d6      	bls.n	8009482 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094d4:	23ff      	movs	r3, #255	@ 0xff
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	371c      	adds	r7, #28
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fcf4 	bl	800aed8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80094f0:	2101      	movs	r1, #1
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f001 fe0d 	bl	800b112 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b088      	sub	sp, #32
 8009508:	af04      	add	r7, sp, #16
 800950a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800950c:	2302      	movs	r3, #2
 800950e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009510:	2300      	movs	r3, #0
 8009512:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800951a:	b2db      	uxtb	r3, r3
 800951c:	2b01      	cmp	r3, #1
 800951e:	d102      	bne.n	8009526 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2203      	movs	r2, #3
 8009524:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b0b      	cmp	r3, #11
 800952e:	f200 81bb 	bhi.w	80098a8 <USBH_Process+0x3a4>
 8009532:	a201      	add	r2, pc, #4	@ (adr r2, 8009538 <USBH_Process+0x34>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	08009569 	.word	0x08009569
 800953c:	0800959b 	.word	0x0800959b
 8009540:	08009603 	.word	0x08009603
 8009544:	08009843 	.word	0x08009843
 8009548:	080098a9 	.word	0x080098a9
 800954c:	080096a3 	.word	0x080096a3
 8009550:	080097e9 	.word	0x080097e9
 8009554:	080096d9 	.word	0x080096d9
 8009558:	080096f9 	.word	0x080096f9
 800955c:	08009717 	.word	0x08009717
 8009560:	0800975b 	.word	0x0800975b
 8009564:	0800982b 	.word	0x0800982b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 819b 	beq.w	80098ac <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800957c:	20c8      	movs	r0, #200	@ 0xc8
 800957e:	f001 fe12 	bl	800b1a6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f001 fd05 	bl	800af92 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009598:	e188      	b.n	80098ac <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d107      	bne.n	80095b4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095b2:	e18a      	b.n	80098ca <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095be:	d914      	bls.n	80095ea <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095c6:	3301      	adds	r3, #1
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d903      	bls.n	80095e2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	220d      	movs	r2, #13
 80095de:	701a      	strb	r2, [r3, #0]
      break;
 80095e0:	e173      	b.n	80098ca <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	701a      	strb	r2, [r3, #0]
      break;
 80095e8:	e16f      	b.n	80098ca <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095f0:	f103 020a 	add.w	r2, r3, #10
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80095fa:	200a      	movs	r0, #10
 80095fc:	f001 fdd3 	bl	800b1a6 <USBH_Delay>
      break;
 8009600:	e163      	b.n	80098ca <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009612:	2104      	movs	r1, #4
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009618:	2064      	movs	r0, #100	@ 0x64
 800961a:	f001 fdc4 	bl	800b1a6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f001 fc90 	bl	800af44 <USBH_LL_GetSpeed>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2205      	movs	r2, #5
 8009632:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009634:	2100      	movs	r1, #0
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 fa9b 	bl	800ab72 <USBH_AllocPipe>
 800963c:	4603      	mov	r3, r0
 800963e:	461a      	mov	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009644:	2180      	movs	r1, #128	@ 0x80
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f001 fa93 	bl	800ab72 <USBH_AllocPipe>
 800964c:	4603      	mov	r3, r0
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	7919      	ldrb	r1, [r3, #4]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009668:	9202      	str	r2, [sp, #8]
 800966a:	2200      	movs	r2, #0
 800966c:	9201      	str	r2, [sp, #4]
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	4603      	mov	r3, r0
 8009672:	2280      	movs	r2, #128	@ 0x80
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 fa4d 	bl	800ab14 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	7959      	ldrb	r1, [r3, #5]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800968e:	9202      	str	r2, [sp, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	9201      	str	r2, [sp, #4]
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	4603      	mov	r3, r0
 8009698:	2200      	movs	r2, #0
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 fa3a 	bl	800ab14 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096a0:	e113      	b.n	80098ca <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f916 	bl	80098d4 <USBH_HandleEnum>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f040 80fd 	bne.w	80098b0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d103      	bne.n	80096d0 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2208      	movs	r2, #8
 80096cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096ce:	e0ef      	b.n	80098b0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2207      	movs	r2, #7
 80096d4:	701a      	strb	r2, [r3, #0]
      break;
 80096d6:	e0eb      	b.n	80098b0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f000 80e8 	beq.w	80098b4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096ea:	2101      	movs	r1, #1
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2208      	movs	r2, #8
 80096f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80096f6:	e0dd      	b.n	80098b4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fc3a 	bl	8009f7a <USBH_SetCfg>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	f040 80d5 	bne.w	80098b8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2209      	movs	r2, #9
 8009712:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009714:	e0d0      	b.n	80098b8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800971c:	f003 0320 	and.w	r3, r3, #32
 8009720:	2b00      	cmp	r3, #0
 8009722:	d016      	beq.n	8009752 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009724:	2101      	movs	r1, #1
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fc4a 	bl	8009fc0 <USBH_SetFeature>
 800972c:	4603      	mov	r3, r0
 800972e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	2b00      	cmp	r3, #0
 8009736:	d103      	bne.n	8009740 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	220a      	movs	r2, #10
 800973c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800973e:	e0bd      	b.n	80098bc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	b2db      	uxtb	r3, r3
 8009744:	2b03      	cmp	r3, #3
 8009746:	f040 80b9 	bne.w	80098bc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	220a      	movs	r2, #10
 800974e:	701a      	strb	r2, [r3, #0]
      break;
 8009750:	e0b4      	b.n	80098bc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	220a      	movs	r2, #10
 8009756:	701a      	strb	r2, [r3, #0]
      break;
 8009758:	e0b0      	b.n	80098bc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009760:	2b00      	cmp	r3, #0
 8009762:	f000 80ad 	beq.w	80098c0 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
 8009772:	e016      	b.n	80097a2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009774:	7bfa      	ldrb	r2, [r7, #15]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	32de      	adds	r2, #222	@ 0xde
 800977a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977e:	791a      	ldrb	r2, [r3, #4]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009786:	429a      	cmp	r2, r3
 8009788:	d108      	bne.n	800979c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800978a:	7bfa      	ldrb	r2, [r7, #15]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	32de      	adds	r2, #222	@ 0xde
 8009790:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800979a:	e005      	b.n	80097a8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	3301      	adds	r3, #1
 80097a0:	73fb      	strb	r3, [r7, #15]
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0e5      	beq.n	8009774 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d016      	beq.n	80097e0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2206      	movs	r2, #6
 80097c8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097d0:	2103      	movs	r1, #3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097d6:	e073      	b.n	80098c0 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	220d      	movs	r2, #13
 80097dc:	701a      	strb	r2, [r3, #0]
      break;
 80097de:	e06f      	b.n	80098c0 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	220d      	movs	r2, #13
 80097e4:	701a      	strb	r2, [r3, #0]
      break;
 80097e6:	e06b      	b.n	80098c0 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d017      	beq.n	8009822 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
 80097fe:	4603      	mov	r3, r0
 8009800:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	220b      	movs	r2, #11
 800980e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009810:	e058      	b.n	80098c4 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	d154      	bne.n	80098c4 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	220d      	movs	r2, #13
 800981e:	701a      	strb	r2, [r3, #0]
      break;
 8009820:	e050      	b.n	80098c4 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	220d      	movs	r2, #13
 8009826:	701a      	strb	r2, [r3, #0]
      break;
 8009828:	e04c      	b.n	80098c4 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d049      	beq.n	80098c8 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	4798      	blx	r3
      }
      break;
 8009840:	e042      	b.n	80098c8 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7ff fd4a 	bl	80092e4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800987e:	2105      	movs	r1, #5
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b01      	cmp	r3, #1
 800988e:	d107      	bne.n	80098a0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f7ff fe22 	bl	80094e2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800989e:	e014      	b.n	80098ca <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f001 fb19 	bl	800aed8 <USBH_LL_Start>
      break;
 80098a6:	e010      	b.n	80098ca <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80098a8:	bf00      	nop
 80098aa:	e00e      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098ac:	bf00      	nop
 80098ae:	e00c      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098b0:	bf00      	nop
 80098b2:	e00a      	b.n	80098ca <USBH_Process+0x3c6>
    break;
 80098b4:	bf00      	nop
 80098b6:	e008      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098b8:	bf00      	nop
 80098ba:	e006      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098bc:	bf00      	nop
 80098be:	e004      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098c0:	bf00      	nop
 80098c2:	e002      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098c4:	bf00      	nop
 80098c6:	e000      	b.n	80098ca <USBH_Process+0x3c6>
      break;
 80098c8:	bf00      	nop
  }
  return USBH_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af04      	add	r7, sp, #16
 80098da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098e0:	2301      	movs	r3, #1
 80098e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	785b      	ldrb	r3, [r3, #1]
 80098e8:	2b07      	cmp	r3, #7
 80098ea:	f200 81bd 	bhi.w	8009c68 <USBH_HandleEnum+0x394>
 80098ee:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <USBH_HandleEnum+0x20>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	08009915 	.word	0x08009915
 80098f8:	080099cf 	.word	0x080099cf
 80098fc:	08009a39 	.word	0x08009a39
 8009900:	08009ac3 	.word	0x08009ac3
 8009904:	08009b2d 	.word	0x08009b2d
 8009908:	08009b9d 	.word	0x08009b9d
 800990c:	08009be3 	.word	0x08009be3
 8009910:	08009c29 	.word	0x08009c29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009914:	2108      	movs	r1, #8
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa4c 	bl	8009db4 <USBH_Get_DevDesc>
 800991c:	4603      	mov	r3, r0
 800991e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009920:	7bbb      	ldrb	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d12e      	bne.n	8009984 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	7919      	ldrb	r1, [r3, #4]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800994a:	9202      	str	r2, [sp, #8]
 800994c:	2200      	movs	r2, #0
 800994e:	9201      	str	r2, [sp, #4]
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4603      	mov	r3, r0
 8009954:	2280      	movs	r2, #128	@ 0x80
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 f8dc 	bl	800ab14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	7959      	ldrb	r1, [r3, #5]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009970:	9202      	str	r2, [sp, #8]
 8009972:	2200      	movs	r2, #0
 8009974:	9201      	str	r2, [sp, #4]
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4603      	mov	r3, r0
 800997a:	2200      	movs	r2, #0
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f001 f8c9 	bl	800ab14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009982:	e173      	b.n	8009c6c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009984:	7bbb      	ldrb	r3, [r7, #14]
 8009986:	2b03      	cmp	r3, #3
 8009988:	f040 8170 	bne.w	8009c6c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009992:	3301      	adds	r3, #1
 8009994:	b2da      	uxtb	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099a2:	2b03      	cmp	r3, #3
 80099a4:	d903      	bls.n	80099ae <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	220d      	movs	r2, #13
 80099aa:	701a      	strb	r2, [r3, #0]
      break;
 80099ac:	e15e      	b.n	8009c6c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	795b      	ldrb	r3, [r3, #5]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 f8fd 	bl	800abb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	791b      	ldrb	r3, [r3, #4]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f001 f8f7 	bl	800abb4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
      break;
 80099cc:	e14e      	b.n	8009c6c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099ce:	2112      	movs	r1, #18
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f9ef 	bl	8009db4 <USBH_Get_DevDesc>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d103      	bne.n	80099e8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2202      	movs	r2, #2
 80099e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099e6:	e143      	b.n	8009c70 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099e8:	7bbb      	ldrb	r3, [r7, #14]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	f040 8140 	bne.w	8009c70 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099f6:	3301      	adds	r3, #1
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d903      	bls.n	8009a12 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	220d      	movs	r2, #13
 8009a0e:	701a      	strb	r2, [r3, #0]
      break;
 8009a10:	e12e      	b.n	8009c70 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	795b      	ldrb	r3, [r3, #5]
 8009a16:	4619      	mov	r1, r3
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f8cb 	bl	800abb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	791b      	ldrb	r3, [r3, #4]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f001 f8c5 	bl	800abb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
      break;
 8009a36:	e11b      	b.n	8009c70 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a38:	2101      	movs	r1, #1
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa79 	bl	8009f32 <USBH_SetAddress>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d130      	bne.n	8009aac <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009a4a:	2002      	movs	r0, #2
 8009a4c:	f001 fbab 	bl	800b1a6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2201      	movs	r2, #1
 8009a54:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2203      	movs	r2, #3
 8009a5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7919      	ldrb	r1, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a72:	9202      	str	r2, [sp, #8]
 8009a74:	2200      	movs	r2, #0
 8009a76:	9201      	str	r2, [sp, #4]
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2280      	movs	r2, #128	@ 0x80
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f001 f848 	bl	800ab14 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	7959      	ldrb	r1, [r3, #5]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a98:	9202      	str	r2, [sp, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	9201      	str	r2, [sp, #4]
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f835 	bl	800ab14 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009aaa:	e0e3      	b.n	8009c74 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aac:	7bbb      	ldrb	r3, [r7, #14]
 8009aae:	2b03      	cmp	r3, #3
 8009ab0:	f040 80e0 	bne.w	8009c74 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	220d      	movs	r2, #13
 8009ab8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	705a      	strb	r2, [r3, #1]
      break;
 8009ac0:	e0d8      	b.n	8009c74 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009ac2:	2109      	movs	r1, #9
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f9a1 	bl	8009e0c <USBH_Get_CfgDesc>
 8009aca:	4603      	mov	r3, r0
 8009acc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2204      	movs	r2, #4
 8009ad8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ada:	e0cd      	b.n	8009c78 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	f040 80ca 	bne.w	8009c78 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009aea:	3301      	adds	r3, #1
 8009aec:	b2da      	uxtb	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d903      	bls.n	8009b06 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	220d      	movs	r2, #13
 8009b02:	701a      	strb	r2, [r3, #0]
      break;
 8009b04:	e0b8      	b.n	8009c78 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	795b      	ldrb	r3, [r3, #5]
 8009b0a:	4619      	mov	r1, r3
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f001 f851 	bl	800abb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	791b      	ldrb	r3, [r3, #4]
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 f84b 	bl	800abb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
      break;
 8009b2a:	e0a5      	b.n	8009c78 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f969 	bl	8009e0c <USBH_Get_CfgDesc>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d103      	bne.n	8009b4c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2205      	movs	r2, #5
 8009b48:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b4a:	e097      	b.n	8009c7c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
 8009b4e:	2b03      	cmp	r3, #3
 8009b50:	f040 8094 	bne.w	8009c7c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	b2da      	uxtb	r2, r3
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d903      	bls.n	8009b76 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	220d      	movs	r2, #13
 8009b72:	701a      	strb	r2, [r3, #0]
      break;
 8009b74:	e082      	b.n	8009c7c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	795b      	ldrb	r3, [r3, #5]
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f001 f819 	bl	800abb4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f813 	bl	800abb4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	701a      	strb	r2, [r3, #0]
      break;
 8009b9a:	e06f      	b.n	8009c7c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d019      	beq.n	8009bda <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bb2:	23ff      	movs	r3, #255	@ 0xff
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f953 	bl	8009e60 <USBH_Get_StringDesc>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bbe:	7bbb      	ldrb	r3, [r7, #14]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2206      	movs	r2, #6
 8009bc8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bca:	e059      	b.n	8009c80 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bcc:	7bbb      	ldrb	r3, [r7, #14]
 8009bce:	2b03      	cmp	r3, #3
 8009bd0:	d156      	bne.n	8009c80 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2206      	movs	r2, #6
 8009bd6:	705a      	strb	r2, [r3, #1]
      break;
 8009bd8:	e052      	b.n	8009c80 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2206      	movs	r2, #6
 8009bde:	705a      	strb	r2, [r3, #1]
      break;
 8009be0:	e04e      	b.n	8009c80 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d019      	beq.n	8009c20 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bf8:	23ff      	movs	r3, #255	@ 0xff
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f930 	bl	8009e60 <USBH_Get_StringDesc>
 8009c00:	4603      	mov	r3, r0
 8009c02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c04:	7bbb      	ldrb	r3, [r7, #14]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d103      	bne.n	8009c12 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2207      	movs	r2, #7
 8009c0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c10:	e038      	b.n	8009c84 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c12:	7bbb      	ldrb	r3, [r7, #14]
 8009c14:	2b03      	cmp	r3, #3
 8009c16:	d135      	bne.n	8009c84 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2207      	movs	r2, #7
 8009c1c:	705a      	strb	r2, [r3, #1]
      break;
 8009c1e:	e031      	b.n	8009c84 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2207      	movs	r2, #7
 8009c24:	705a      	strb	r2, [r3, #1]
      break;
 8009c26:	e02d      	b.n	8009c84 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d017      	beq.n	8009c62 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c3e:	23ff      	movs	r3, #255	@ 0xff
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f90d 	bl	8009e60 <USBH_Get_StringDesc>
 8009c46:	4603      	mov	r3, r0
 8009c48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c50:	2300      	movs	r3, #0
 8009c52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c54:	e018      	b.n	8009c88 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d115      	bne.n	8009c88 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c60:	e012      	b.n	8009c88 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]
      break;
 8009c66:	e00f      	b.n	8009c88 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c68:	bf00      	nop
 8009c6a:	e00e      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e00c      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c70:	bf00      	nop
 8009c72:	e00a      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c74:	bf00      	nop
 8009c76:	e008      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c78:	bf00      	nop
 8009c7a:	e006      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c7c:	bf00      	nop
 8009c7e:	e004      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c80:	bf00      	nop
 8009c82:	e002      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c84:	bf00      	nop
 8009c86:	e000      	b.n	8009c8a <USBH_HandleEnum+0x3b6>
      break;
 8009c88:	bf00      	nop
  }
  return Status;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009ca6:	bf00      	nop
 8009ca8:	370c      	adds	r7, #12
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b082      	sub	sp, #8
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cc0:	1c5a      	adds	r2, r3, #1
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f804 	bl	8009cd6 <USBH_HandleSof>
}
 8009cce:	bf00      	nop
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b082      	sub	sp, #8
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b0b      	cmp	r3, #11
 8009ce6:	d10a      	bne.n	8009cfe <USBH_HandleSof+0x28>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
  }
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009d16:	bf00      	nop
}
 8009d18:	370c      	adds	r7, #12
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009d32:	bf00      	nop
}
 8009d34:	370c      	adds	r7, #12
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b083      	sub	sp, #12
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b082      	sub	sp, #8
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 f8be 	bl	800af0e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 ff0b 	bl	800abb4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	795b      	ldrb	r3, [r3, #5]
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 ff05 	bl	800abb4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3708      	adds	r7, #8
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af02      	add	r7, sp, #8
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009dc0:	887b      	ldrh	r3, [r7, #2]
 8009dc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dc6:	d901      	bls.n	8009dcc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e01b      	b.n	8009e04 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009dd2:	887b      	ldrh	r3, [r7, #2]
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ddc:	2100      	movs	r1, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f872 	bl	8009ec8 <USBH_GetDescriptor>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009df4:	887a      	ldrh	r2, [r7, #2]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f929 	bl	800a050 <USBH_ParseDevDesc>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	331c      	adds	r3, #28
 8009e1c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009e1e:	887b      	ldrh	r3, [r7, #2]
 8009e20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e24:	d901      	bls.n	8009e2a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e016      	b.n	8009e58 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e2a:	887b      	ldrh	r3, [r7, #2]
 8009e2c:	9300      	str	r3, [sp, #0]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e34:	2100      	movs	r1, #0
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f846 	bl	8009ec8 <USBH_GetDescriptor>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d107      	bne.n	8009e56 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f9af 	bl	800a1b0 <USBH_ParseCfgDesc>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	607a      	str	r2, [r7, #4]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	72fb      	strb	r3, [r7, #11]
 8009e70:	4613      	mov	r3, r2
 8009e72:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e74:	893b      	ldrh	r3, [r7, #8]
 8009e76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e7a:	d802      	bhi.n	8009e82 <USBH_Get_StringDesc+0x22>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e01c      	b.n	8009ec0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e8e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e96:	893b      	ldrh	r3, [r7, #8]
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	68f8      	ldr	r0, [r7, #12]
 8009ea0:	f000 f812 	bl	8009ec8 <USBH_GetDescriptor>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ea8:	7dfb      	ldrb	r3, [r7, #23]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d107      	bne.n	8009ebe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009eb4:	893a      	ldrh	r2, [r7, #8]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fb8d 	bl	800a5d8 <USBH_ParseStringDesc>
  }

  return status;
 8009ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	607b      	str	r3, [r7, #4]
 8009ed2:	460b      	mov	r3, r1
 8009ed4:	72fb      	strb	r3, [r7, #11]
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	789b      	ldrb	r3, [r3, #2]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d11c      	bne.n	8009f1c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ee2:	7afb      	ldrb	r3, [r7, #11]
 8009ee4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2206      	movs	r2, #6
 8009ef2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	893a      	ldrh	r2, [r7, #8]
 8009ef8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009efa:	893b      	ldrh	r3, [r7, #8]
 8009efc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009f00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009f04:	d104      	bne.n	8009f10 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f240 4209 	movw	r2, #1033	@ 0x409
 8009f0c:	829a      	strh	r2, [r3, #20]
 8009f0e:	e002      	b.n	8009f16 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	8b3a      	ldrh	r2, [r7, #24]
 8009f1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f1c:	8b3b      	ldrh	r3, [r7, #24]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6879      	ldr	r1, [r7, #4]
 8009f22:	68f8      	ldr	r0, [r7, #12]
 8009f24:	f000 fba5 	bl	800a672 <USBH_CtlReq>
 8009f28:	4603      	mov	r3, r0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3710      	adds	r7, #16
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}

08009f32 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f32:	b580      	push	{r7, lr}
 8009f34:	b082      	sub	sp, #8
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	789b      	ldrb	r3, [r3, #2]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d10f      	bne.n	8009f66 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2205      	movs	r2, #5
 8009f50:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f66:	2200      	movs	r2, #0
 8009f68:	2100      	movs	r1, #0
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fb81 	bl	800a672 <USBH_CtlReq>
 8009f70:	4603      	mov	r3, r0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b082      	sub	sp, #8
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	460b      	mov	r3, r1
 8009f84:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	789b      	ldrb	r3, [r3, #2]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d10e      	bne.n	8009fac <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2209      	movs	r2, #9
 8009f98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	887a      	ldrh	r2, [r7, #2]
 8009f9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fac:	2200      	movs	r2, #0
 8009fae:	2100      	movs	r1, #0
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 fb5e 	bl	800a672 <USBH_CtlReq>
 8009fb6:	4603      	mov	r3, r0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	789b      	ldrb	r3, [r3, #2]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d10f      	bne.n	8009ff4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2100      	movs	r1, #0
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fb3a 	bl	800a672 <USBH_CtlReq>
 8009ffe:	4603      	mov	r3, r0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	460b      	mov	r3, r1
 800a012:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	789b      	ldrb	r3, [r3, #2]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d10f      	bne.n	800a03c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a02e:	78fb      	ldrb	r3, [r7, #3]
 800a030:	b29a      	uxth	r2, r3
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a03c:	2200      	movs	r2, #0
 800a03e:	2100      	movs	r1, #0
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fb16 	bl	800a672 <USBH_CtlReq>
 800a046:	4603      	mov	r3, r0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3708      	adds	r7, #8
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4613      	mov	r3, r2
 800a05c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a064:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a070:	2302      	movs	r3, #2
 800a072:	e094      	b.n	800a19e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	781a      	ldrb	r2, [r3, #0]
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	785a      	ldrb	r2, [r3, #1]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	3302      	adds	r3, #2
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	3303      	adds	r3, #3
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	b29b      	uxth	r3, r3
 800a096:	4313      	orrs	r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	791a      	ldrb	r2, [r3, #4]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	795a      	ldrb	r2, [r3, #5]
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	799a      	ldrb	r2, [r3, #6]
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	79da      	ldrb	r2, [r3, #7]
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d004      	beq.n	800a0d2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d11b      	bne.n	800a10a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	79db      	ldrb	r3, [r3, #7]
 800a0d6:	2b20      	cmp	r3, #32
 800a0d8:	dc0f      	bgt.n	800a0fa <USBH_ParseDevDesc+0xaa>
 800a0da:	2b08      	cmp	r3, #8
 800a0dc:	db0f      	blt.n	800a0fe <USBH_ParseDevDesc+0xae>
 800a0de:	3b08      	subs	r3, #8
 800a0e0:	4a32      	ldr	r2, [pc, #200]	@ (800a1ac <USBH_ParseDevDesc+0x15c>)
 800a0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	bf14      	ite	ne
 800a0ee:	2301      	movne	r3, #1
 800a0f0:	2300      	moveq	r3, #0
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d106      	bne.n	800a106 <USBH_ParseDevDesc+0xb6>
 800a0f8:	e001      	b.n	800a0fe <USBH_ParseDevDesc+0xae>
 800a0fa:	2b40      	cmp	r3, #64	@ 0x40
 800a0fc:	d003      	beq.n	800a106 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2208      	movs	r2, #8
 800a102:	71da      	strb	r2, [r3, #7]
        break;
 800a104:	e000      	b.n	800a108 <USBH_ParseDevDesc+0xb8>
        break;
 800a106:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a108:	e00e      	b.n	800a128 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a110:	2b02      	cmp	r3, #2
 800a112:	d107      	bne.n	800a124 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	79db      	ldrb	r3, [r3, #7]
 800a118:	2b08      	cmp	r3, #8
 800a11a:	d005      	beq.n	800a128 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	2208      	movs	r2, #8
 800a120:	71da      	strb	r2, [r3, #7]
 800a122:	e001      	b.n	800a128 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a124:	2303      	movs	r3, #3
 800a126:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a128:	88fb      	ldrh	r3, [r7, #6]
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d936      	bls.n	800a19c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	3308      	adds	r3, #8
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	461a      	mov	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	3309      	adds	r3, #9
 800a13a:	781b      	ldrb	r3, [r3, #0]
 800a13c:	021b      	lsls	r3, r3, #8
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4313      	orrs	r3, r2
 800a142:	b29a      	uxth	r2, r3
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	330a      	adds	r3, #10
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	330b      	adds	r3, #11
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	021b      	lsls	r3, r3, #8
 800a158:	b29b      	uxth	r3, r3
 800a15a:	4313      	orrs	r3, r2
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	330c      	adds	r3, #12
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	461a      	mov	r2, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	330d      	adds	r3, #13
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	b29b      	uxth	r3, r3
 800a174:	4313      	orrs	r3, r2
 800a176:	b29a      	uxth	r2, r3
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	7b9a      	ldrb	r2, [r3, #14]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	7bda      	ldrb	r2, [r3, #15]
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	7c1a      	ldrb	r2, [r3, #16]
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	7c5a      	ldrb	r2, [r3, #17]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	371c      	adds	r7, #28
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	01000101 	.word	0x01000101

0800a1b0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b08c      	sub	sp, #48	@ 0x30
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a1c4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d101      	bne.n	800a1e2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	e0da      	b.n	800a398 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d002      	beq.n	800a1f4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f0:	2209      	movs	r2, #9
 800a1f2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	6a3b      	ldr	r3, [r7, #32]
 800a1fa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	785a      	ldrb	r2, [r3, #1]
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	3302      	adds	r3, #2
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	3303      	adds	r3, #3
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	b29b      	uxth	r3, r3
 800a216:	4313      	orrs	r3, r2
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a21e:	bf28      	it	cs
 800a220:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a224:	b29a      	uxth	r2, r3
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	791a      	ldrb	r2, [r3, #4]
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	795a      	ldrb	r2, [r3, #5]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	799a      	ldrb	r2, [r3, #6]
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	79da      	ldrb	r2, [r3, #7]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	7a1a      	ldrb	r2, [r3, #8]
 800a24e:	6a3b      	ldr	r3, [r7, #32]
 800a250:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a252:	88fb      	ldrh	r3, [r7, #6]
 800a254:	2b09      	cmp	r3, #9
 800a256:	f240 809d 	bls.w	800a394 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a25a:	2309      	movs	r3, #9
 800a25c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a25e:	2300      	movs	r3, #0
 800a260:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a262:	e081      	b.n	800a368 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a264:	f107 0316 	add.w	r3, r7, #22
 800a268:	4619      	mov	r1, r3
 800a26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a26c:	f000 f9e7 	bl	800a63e <USBH_GetNextDesc>
 800a270:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b04      	cmp	r3, #4
 800a278:	d176      	bne.n	800a368 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	781b      	ldrb	r3, [r3, #0]
 800a27e:	2b09      	cmp	r3, #9
 800a280:	d002      	beq.n	800a288 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a284:	2209      	movs	r2, #9
 800a286:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a28c:	221a      	movs	r2, #26
 800a28e:	fb02 f303 	mul.w	r3, r2, r3
 800a292:	3308      	adds	r3, #8
 800a294:	6a3a      	ldr	r2, [r7, #32]
 800a296:	4413      	add	r3, r2
 800a298:	3302      	adds	r3, #2
 800a29a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a29c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a29e:	69f8      	ldr	r0, [r7, #28]
 800a2a0:	f000 f87e 	bl	800a3a0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a2ae:	e043      	b.n	800a338 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a2b0:	f107 0316 	add.w	r3, r7, #22
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2b8:	f000 f9c1 	bl	800a63e <USBH_GetNextDesc>
 800a2bc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c0:	785b      	ldrb	r3, [r3, #1]
 800a2c2:	2b05      	cmp	r3, #5
 800a2c4:	d138      	bne.n	800a338 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	795b      	ldrb	r3, [r3, #5]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d113      	bne.n	800a2f6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d003      	beq.n	800a2de <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	799b      	ldrb	r3, [r3, #6]
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	d10b      	bne.n	800a2f6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	79db      	ldrb	r3, [r3, #7]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10b      	bne.n	800a2fe <USBH_ParseCfgDesc+0x14e>
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	d007      	beq.n	800a2fe <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	2209      	movs	r2, #9
 800a2f2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2f4:	e003      	b.n	800a2fe <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f8:	2207      	movs	r2, #7
 800a2fa:	701a      	strb	r2, [r3, #0]
 800a2fc:	e000      	b.n	800a300 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2fe:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a304:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a308:	3201      	adds	r2, #1
 800a30a:	00d2      	lsls	r2, r2, #3
 800a30c:	211a      	movs	r1, #26
 800a30e:	fb01 f303 	mul.w	r3, r1, r3
 800a312:	4413      	add	r3, r2
 800a314:	3308      	adds	r3, #8
 800a316:	6a3a      	ldr	r2, [r7, #32]
 800a318:	4413      	add	r3, r2
 800a31a:	3304      	adds	r3, #4
 800a31c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a31e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a320:	69b9      	ldr	r1, [r7, #24]
 800a322:	68f8      	ldr	r0, [r7, #12]
 800a324:	f000 f870 	bl	800a408 <USBH_ParseEPDesc>
 800a328:	4603      	mov	r3, r0
 800a32a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a32e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a332:	3301      	adds	r3, #1
 800a334:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	791b      	ldrb	r3, [r3, #4]
 800a33c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a340:	429a      	cmp	r2, r3
 800a342:	d204      	bcs.n	800a34e <USBH_ParseCfgDesc+0x19e>
 800a344:	6a3b      	ldr	r3, [r7, #32]
 800a346:	885a      	ldrh	r2, [r3, #2]
 800a348:	8afb      	ldrh	r3, [r7, #22]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d8b0      	bhi.n	800a2b0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	791b      	ldrb	r3, [r3, #4]
 800a352:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a356:	429a      	cmp	r2, r3
 800a358:	d201      	bcs.n	800a35e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e01c      	b.n	800a398 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a35e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a362:	3301      	adds	r3, #1
 800a364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d805      	bhi.n	800a37c <USBH_ParseCfgDesc+0x1cc>
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	885a      	ldrh	r2, [r3, #2]
 800a374:	8afb      	ldrh	r3, [r7, #22]
 800a376:	429a      	cmp	r2, r3
 800a378:	f63f af74 	bhi.w	800a264 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a37c:	6a3b      	ldr	r3, [r7, #32]
 800a37e:	791b      	ldrb	r3, [r3, #4]
 800a380:	2b02      	cmp	r3, #2
 800a382:	bf28      	it	cs
 800a384:	2302      	movcs	r3, #2
 800a386:	b2db      	uxtb	r3, r3
 800a388:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d201      	bcs.n	800a394 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a390:	2303      	movs	r3, #3
 800a392:	e001      	b.n	800a398 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a394:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3730      	adds	r7, #48	@ 0x30
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781a      	ldrb	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	785a      	ldrb	r2, [r3, #1]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	789a      	ldrb	r2, [r3, #2]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	78da      	ldrb	r2, [r3, #3]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	bf28      	it	cs
 800a3d4:	2302      	movcs	r3, #2
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	795a      	ldrb	r2, [r3, #5]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	799a      	ldrb	r2, [r3, #6]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	79da      	ldrb	r2, [r3, #7]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	7a1a      	ldrb	r2, [r3, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	721a      	strb	r2, [r3, #8]
}
 800a3fc:	bf00      	nop
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a406:	4770      	bx	lr

0800a408 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	781a      	ldrb	r2, [r3, #0]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	785a      	ldrb	r2, [r3, #1]
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	789a      	ldrb	r2, [r3, #2]
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	78da      	ldrb	r2, [r3, #3]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	3304      	adds	r3, #4
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	461a      	mov	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3305      	adds	r3, #5
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	021b      	lsls	r3, r3, #8
 800a448:	b29b      	uxth	r3, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	b29a      	uxth	r2, r3
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	799a      	ldrb	r2, [r3, #6]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	889b      	ldrh	r3, [r3, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d009      	beq.n	800a476 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a46a:	d804      	bhi.n	800a476 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a474:	d901      	bls.n	800a47a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a476:	2303      	movs	r3, #3
 800a478:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a480:	2b00      	cmp	r3, #0
 800a482:	d136      	bne.n	800a4f2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	78db      	ldrb	r3, [r3, #3]
 800a488:	f003 0303 	and.w	r3, r3, #3
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d108      	bne.n	800a4a2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	889b      	ldrh	r3, [r3, #4]
 800a494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a498:	f240 8097 	bls.w	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a49c:	2303      	movs	r3, #3
 800a49e:	75fb      	strb	r3, [r7, #23]
 800a4a0:	e093      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	78db      	ldrb	r3, [r3, #3]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d107      	bne.n	800a4be <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	889b      	ldrh	r3, [r3, #4]
 800a4b2:	2b40      	cmp	r3, #64	@ 0x40
 800a4b4:	f240 8089 	bls.w	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	75fb      	strb	r3, [r7, #23]
 800a4bc:	e085      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	78db      	ldrb	r3, [r3, #3]
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d005      	beq.n	800a4d6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	78db      	ldrb	r3, [r3, #3]
 800a4ce:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d10a      	bne.n	800a4ec <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	799b      	ldrb	r3, [r3, #6]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <USBH_ParseEPDesc+0xde>
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	799b      	ldrb	r3, [r3, #6]
 800a4e2:	2b10      	cmp	r3, #16
 800a4e4:	d970      	bls.n	800a5c8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4ea:	e06d      	b.n	800a5c8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	75fb      	strb	r3, [r7, #23]
 800a4f0:	e06b      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d13c      	bne.n	800a576 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	78db      	ldrb	r3, [r3, #3]
 800a500:	f003 0303 	and.w	r3, r3, #3
 800a504:	2b02      	cmp	r3, #2
 800a506:	d005      	beq.n	800a514 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	78db      	ldrb	r3, [r3, #3]
 800a50c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	889b      	ldrh	r3, [r3, #4]
 800a518:	2b40      	cmp	r3, #64	@ 0x40
 800a51a:	d956      	bls.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a51c:	2303      	movs	r3, #3
 800a51e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a520:	e053      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	78db      	ldrb	r3, [r3, #3]
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d10e      	bne.n	800a54c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	799b      	ldrb	r3, [r3, #6]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d007      	beq.n	800a546 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a53a:	2b10      	cmp	r3, #16
 800a53c:	d803      	bhi.n	800a546 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a542:	2b40      	cmp	r3, #64	@ 0x40
 800a544:	d941      	bls.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a546:	2303      	movs	r3, #3
 800a548:	75fb      	strb	r3, [r7, #23]
 800a54a:	e03e      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	78db      	ldrb	r3, [r3, #3]
 800a550:	f003 0303 	and.w	r3, r3, #3
 800a554:	2b03      	cmp	r3, #3
 800a556:	d10b      	bne.n	800a570 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	799b      	ldrb	r3, [r3, #6]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d004      	beq.n	800a56a <USBH_ParseEPDesc+0x162>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	889b      	ldrh	r3, [r3, #4]
 800a564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a568:	d32f      	bcc.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a56a:	2303      	movs	r3, #3
 800a56c:	75fb      	strb	r3, [r7, #23]
 800a56e:	e02c      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a570:	2303      	movs	r3, #3
 800a572:	75fb      	strb	r3, [r7, #23]
 800a574:	e029      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d120      	bne.n	800a5c2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	78db      	ldrb	r3, [r3, #3]
 800a584:	f003 0303 	and.w	r3, r3, #3
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	889b      	ldrh	r3, [r3, #4]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d01a      	beq.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a594:	2303      	movs	r3, #3
 800a596:	75fb      	strb	r3, [r7, #23]
 800a598:	e017      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	78db      	ldrb	r3, [r3, #3]
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d10a      	bne.n	800a5bc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	799b      	ldrb	r3, [r3, #6]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <USBH_ParseEPDesc+0x1ae>
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	889b      	ldrh	r3, [r3, #4]
 800a5b2:	2b08      	cmp	r3, #8
 800a5b4:	d909      	bls.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	75fb      	strb	r3, [r7, #23]
 800a5ba:	e006      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	75fb      	strb	r3, [r7, #23]
 800a5c0:	e003      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	75fb      	strb	r3, [r7, #23]
 800a5c6:	e000      	b.n	800a5ca <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5c8:	bf00      	nop
  }

  return status;
 800a5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b087      	sub	sp, #28
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d120      	bne.n	800a632 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	1e9a      	subs	r2, r3, #2
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	bf28      	it	cs
 800a5fc:	4613      	movcs	r3, r2
 800a5fe:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	3302      	adds	r3, #2
 800a604:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a606:	2300      	movs	r3, #0
 800a608:	82fb      	strh	r3, [r7, #22]
 800a60a:	e00b      	b.n	800a624 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a60c:	8afb      	ldrh	r3, [r7, #22]
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	4413      	add	r3, r2
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a61e:	8afb      	ldrh	r3, [r7, #22]
 800a620:	3302      	adds	r3, #2
 800a622:	82fb      	strh	r3, [r7, #22]
 800a624:	8afa      	ldrh	r2, [r7, #22]
 800a626:	8abb      	ldrh	r3, [r7, #20]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d3ef      	bcc.n	800a60c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]
  }
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a63e:	b480      	push	{r7}
 800a640:	b085      	sub	sp, #20
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	687a      	ldr	r2, [r7, #4]
 800a64e:	7812      	ldrb	r2, [r2, #0]
 800a650:	4413      	add	r3, r2
 800a652:	b29a      	uxth	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4413      	add	r3, r2
 800a662:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a664:	68fb      	ldr	r3, [r7, #12]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b086      	sub	sp, #24
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	4613      	mov	r3, r2
 800a67e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a680:	2301      	movs	r3, #1
 800a682:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	789b      	ldrb	r3, [r3, #2]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d002      	beq.n	800a692 <USBH_CtlReq+0x20>
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d00f      	beq.n	800a6b0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a690:	e027      	b.n	800a6e2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	88fa      	ldrh	r2, [r7, #6]
 800a69c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ae:	e018      	b.n	800a6e2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	f000 f81b 	bl	800a6ec <USBH_HandleControl>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d002      	beq.n	800a6c6 <USBH_CtlReq+0x54>
 800a6c0:	7dfb      	ldrb	r3, [r7, #23]
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d106      	bne.n	800a6d4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	761a      	strb	r2, [r3, #24]
      break;
 800a6d2:	e005      	b.n	800a6e0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d102      	bne.n	800a6e0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	709a      	strb	r2, [r3, #2]
      break;
 800a6e0:	bf00      	nop
  }
  return status;
 800a6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3718      	adds	r7, #24
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	7e1b      	ldrb	r3, [r3, #24]
 800a700:	3b01      	subs	r3, #1
 800a702:	2b0a      	cmp	r3, #10
 800a704:	f200 8156 	bhi.w	800a9b4 <USBH_HandleControl+0x2c8>
 800a708:	a201      	add	r2, pc, #4	@ (adr r2, 800a710 <USBH_HandleControl+0x24>)
 800a70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a70e:	bf00      	nop
 800a710:	0800a73d 	.word	0x0800a73d
 800a714:	0800a757 	.word	0x0800a757
 800a718:	0800a7c1 	.word	0x0800a7c1
 800a71c:	0800a7e7 	.word	0x0800a7e7
 800a720:	0800a81f 	.word	0x0800a81f
 800a724:	0800a849 	.word	0x0800a849
 800a728:	0800a89b 	.word	0x0800a89b
 800a72c:	0800a8bd 	.word	0x0800a8bd
 800a730:	0800a8f9 	.word	0x0800a8f9
 800a734:	0800a91f 	.word	0x0800a91f
 800a738:	0800a95d 	.word	0x0800a95d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f103 0110 	add.w	r1, r3, #16
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	795b      	ldrb	r3, [r3, #5]
 800a746:	461a      	mov	r2, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f943 	bl	800a9d4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2202      	movs	r2, #2
 800a752:	761a      	strb	r2, [r3, #24]
      break;
 800a754:	e139      	b.n	800a9ca <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	795b      	ldrb	r3, [r3, #5]
 800a75a:	4619      	mov	r1, r3
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 fcc5 	bl	800b0ec <USBH_LL_GetURBState>
 800a762:	4603      	mov	r3, r0
 800a764:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a766:	7bbb      	ldrb	r3, [r7, #14]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d11e      	bne.n	800a7aa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7c1b      	ldrb	r3, [r3, #16]
 800a770:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a774:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	8adb      	ldrh	r3, [r3, #22]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d00a      	beq.n	800a794 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a77e:	7b7b      	ldrb	r3, [r7, #13]
 800a780:	2b80      	cmp	r3, #128	@ 0x80
 800a782:	d103      	bne.n	800a78c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2203      	movs	r2, #3
 800a788:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a78a:	e115      	b.n	800a9b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2205      	movs	r2, #5
 800a790:	761a      	strb	r2, [r3, #24]
      break;
 800a792:	e111      	b.n	800a9b8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a794:	7b7b      	ldrb	r3, [r7, #13]
 800a796:	2b80      	cmp	r3, #128	@ 0x80
 800a798:	d103      	bne.n	800a7a2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2209      	movs	r2, #9
 800a79e:	761a      	strb	r2, [r3, #24]
      break;
 800a7a0:	e10a      	b.n	800a9b8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2207      	movs	r2, #7
 800a7a6:	761a      	strb	r2, [r3, #24]
      break;
 800a7a8:	e106      	b.n	800a9b8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d003      	beq.n	800a7b8 <USBH_HandleControl+0xcc>
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	f040 8100 	bne.w	800a9b8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	220b      	movs	r2, #11
 800a7bc:	761a      	strb	r2, [r3, #24]
      break;
 800a7be:	e0fb      	b.n	800a9b8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6899      	ldr	r1, [r3, #8]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	899a      	ldrh	r2, [r3, #12]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f93a 	bl	800aa52 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2204      	movs	r2, #4
 800a7e2:	761a      	strb	r2, [r3, #24]
      break;
 800a7e4:	e0f1      	b.n	800a9ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	791b      	ldrb	r3, [r3, #4]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc7d 	bl	800b0ec <USBH_LL_GetURBState>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d102      	bne.n	800a802 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2209      	movs	r2, #9
 800a800:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a802:	7bbb      	ldrb	r3, [r7, #14]
 800a804:	2b05      	cmp	r3, #5
 800a806:	d102      	bne.n	800a80e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a808:	2303      	movs	r3, #3
 800a80a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a80c:	e0d6      	b.n	800a9bc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b04      	cmp	r3, #4
 800a812:	f040 80d3 	bne.w	800a9bc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	220b      	movs	r2, #11
 800a81a:	761a      	strb	r2, [r3, #24]
      break;
 800a81c:	e0ce      	b.n	800a9bc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6899      	ldr	r1, [r3, #8]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	899a      	ldrh	r2, [r3, #12]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	795b      	ldrb	r3, [r3, #5]
 800a82a:	2001      	movs	r0, #1
 800a82c:	9000      	str	r0, [sp, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f8ea 	bl	800aa08 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2206      	movs	r2, #6
 800a844:	761a      	strb	r2, [r3, #24]
      break;
 800a846:	e0c0      	b.n	800a9ca <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	795b      	ldrb	r3, [r3, #5]
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fc4c 	bl	800b0ec <USBH_LL_GetURBState>
 800a854:	4603      	mov	r3, r0
 800a856:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a858:	7bbb      	ldrb	r3, [r7, #14]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d103      	bne.n	800a866 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2207      	movs	r2, #7
 800a862:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a864:	e0ac      	b.n	800a9c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b05      	cmp	r3, #5
 800a86a:	d105      	bne.n	800a878 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	220c      	movs	r2, #12
 800a870:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a872:	2303      	movs	r3, #3
 800a874:	73fb      	strb	r3, [r7, #15]
      break;
 800a876:	e0a3      	b.n	800a9c0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d103      	bne.n	800a886 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2205      	movs	r2, #5
 800a882:	761a      	strb	r2, [r3, #24]
      break;
 800a884:	e09c      	b.n	800a9c0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b04      	cmp	r3, #4
 800a88a:	f040 8099 	bne.w	800a9c0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	220b      	movs	r2, #11
 800a892:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a894:	2302      	movs	r3, #2
 800a896:	73fb      	strb	r3, [r7, #15]
      break;
 800a898:	e092      	b.n	800a9c0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	791b      	ldrb	r3, [r3, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8d5 	bl	800aa52 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2208      	movs	r2, #8
 800a8b8:	761a      	strb	r2, [r3, #24]

      break;
 800a8ba:	e086      	b.n	800a9ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	791b      	ldrb	r3, [r3, #4]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fc12 	bl	800b0ec <USBH_LL_GetURBState>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8cc:	7bbb      	ldrb	r3, [r7, #14]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d105      	bne.n	800a8de <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	220d      	movs	r2, #13
 800a8d6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8dc:	e072      	b.n	800a9c4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	d103      	bne.n	800a8ec <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	220b      	movs	r2, #11
 800a8e8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ea:	e06b      	b.n	800a9c4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b05      	cmp	r3, #5
 800a8f0:	d168      	bne.n	800a9c4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f6:	e065      	b.n	800a9c4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	795b      	ldrb	r3, [r3, #5]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	9200      	str	r2, [sp, #0]
 800a900:	2200      	movs	r2, #0
 800a902:	2100      	movs	r1, #0
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f87f 	bl	800aa08 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a910:	b29a      	uxth	r2, r3
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	220a      	movs	r2, #10
 800a91a:	761a      	strb	r2, [r3, #24]
      break;
 800a91c:	e055      	b.n	800a9ca <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	795b      	ldrb	r3, [r3, #5]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fbe1 	bl	800b0ec <USBH_LL_GetURBState>
 800a92a:	4603      	mov	r3, r0
 800a92c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a92e:	7bbb      	ldrb	r3, [r7, #14]
 800a930:	2b01      	cmp	r3, #1
 800a932:	d105      	bne.n	800a940 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	220d      	movs	r2, #13
 800a93c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a93e:	e043      	b.n	800a9c8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a940:	7bbb      	ldrb	r3, [r7, #14]
 800a942:	2b02      	cmp	r3, #2
 800a944:	d103      	bne.n	800a94e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2209      	movs	r2, #9
 800a94a:	761a      	strb	r2, [r3, #24]
      break;
 800a94c:	e03c      	b.n	800a9c8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b04      	cmp	r3, #4
 800a952:	d139      	bne.n	800a9c8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	220b      	movs	r2, #11
 800a958:	761a      	strb	r2, [r3, #24]
      break;
 800a95a:	e035      	b.n	800a9c8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	7e5b      	ldrb	r3, [r3, #25]
 800a960:	3301      	adds	r3, #1
 800a962:	b2da      	uxtb	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	765a      	strb	r2, [r3, #25]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	7e5b      	ldrb	r3, [r3, #25]
 800a96c:	2b02      	cmp	r3, #2
 800a96e:	d806      	bhi.n	800a97e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2201      	movs	r2, #1
 800a97a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a97c:	e025      	b.n	800a9ca <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a984:	2106      	movs	r1, #6
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	795b      	ldrb	r3, [r3, #5]
 800a994:	4619      	mov	r1, r3
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f90c 	bl	800abb4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	791b      	ldrb	r3, [r3, #4]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f906 	bl	800abb4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a9b2:	e00a      	b.n	800a9ca <USBH_HandleControl+0x2de>

    default:
      break;
 800a9b4:	bf00      	nop
 800a9b6:	e008      	b.n	800a9ca <USBH_HandleControl+0x2de>
      break;
 800a9b8:	bf00      	nop
 800a9ba:	e006      	b.n	800a9ca <USBH_HandleControl+0x2de>
      break;
 800a9bc:	bf00      	nop
 800a9be:	e004      	b.n	800a9ca <USBH_HandleControl+0x2de>
      break;
 800a9c0:	bf00      	nop
 800a9c2:	e002      	b.n	800a9ca <USBH_HandleControl+0x2de>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e000      	b.n	800a9ca <USBH_HandleControl+0x2de>
      break;
 800a9c8:	bf00      	nop
  }

  return status;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af04      	add	r7, sp, #16
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	4613      	mov	r3, r2
 800a9e0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9e2:	79f9      	ldrb	r1, [r7, #7]
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9303      	str	r3, [sp, #12]
 800a9e8:	2308      	movs	r3, #8
 800a9ea:	9302      	str	r3, [sp, #8]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	9301      	str	r3, [sp, #4]
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f000 fb46 	bl	800b08a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9fe:	2300      	movs	r3, #0
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af04      	add	r7, sp, #16
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	4611      	mov	r1, r2
 800aa14:	461a      	mov	r2, r3
 800aa16:	460b      	mov	r3, r1
 800aa18:	80fb      	strh	r3, [r7, #6]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa2c:	7979      	ldrb	r1, [r7, #5]
 800aa2e:	7e3b      	ldrb	r3, [r7, #24]
 800aa30:	9303      	str	r3, [sp, #12]
 800aa32:	88fb      	ldrh	r3, [r7, #6]
 800aa34:	9302      	str	r3, [sp, #8]
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	9301      	str	r3, [sp, #4]
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	9300      	str	r3, [sp, #0]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	2200      	movs	r2, #0
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 fb21 	bl	800b08a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b088      	sub	sp, #32
 800aa56:	af04      	add	r7, sp, #16
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	4611      	mov	r1, r2
 800aa5e:	461a      	mov	r2, r3
 800aa60:	460b      	mov	r3, r1
 800aa62:	80fb      	strh	r3, [r7, #6]
 800aa64:	4613      	mov	r3, r2
 800aa66:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa68:	7979      	ldrb	r1, [r7, #5]
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9303      	str	r3, [sp, #12]
 800aa6e:	88fb      	ldrh	r3, [r7, #6]
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	2301      	movs	r3, #1
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f000 fb03 	bl	800b08a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa84:	2300      	movs	r3, #0

}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}

0800aa8e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa8e:	b580      	push	{r7, lr}
 800aa90:	b088      	sub	sp, #32
 800aa92:	af04      	add	r7, sp, #16
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	4611      	mov	r1, r2
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	80fb      	strh	r3, [r7, #6]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d001      	beq.n	800aab2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aab2:	7979      	ldrb	r1, [r7, #5]
 800aab4:	7e3b      	ldrb	r3, [r7, #24]
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	88fb      	ldrh	r3, [r7, #6]
 800aaba:	9302      	str	r3, [sp, #8]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	2301      	movs	r3, #1
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	2302      	movs	r3, #2
 800aac6:	2200      	movs	r2, #0
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 fade 	bl	800b08a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b088      	sub	sp, #32
 800aadc:	af04      	add	r7, sp, #16
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4611      	mov	r1, r2
 800aae4:	461a      	mov	r2, r3
 800aae6:	460b      	mov	r3, r1
 800aae8:	80fb      	strh	r3, [r7, #6]
 800aaea:	4613      	mov	r3, r2
 800aaec:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aaee:	7979      	ldrb	r1, [r7, #5]
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	9303      	str	r3, [sp, #12]
 800aaf4:	88fb      	ldrh	r3, [r7, #6]
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	2301      	movs	r3, #1
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2302      	movs	r3, #2
 800ab02:	2201      	movs	r2, #1
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f000 fac0 	bl	800b08a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af04      	add	r7, sp, #16
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	4611      	mov	r1, r2
 800ab20:	461a      	mov	r2, r3
 800ab22:	4603      	mov	r3, r0
 800ab24:	70fb      	strb	r3, [r7, #3]
 800ab26:	460b      	mov	r3, r1
 800ab28:	70bb      	strb	r3, [r7, #2]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab2e:	7878      	ldrb	r0, [r7, #1]
 800ab30:	78ba      	ldrb	r2, [r7, #2]
 800ab32:	78f9      	ldrb	r1, [r7, #3]
 800ab34:	8b3b      	ldrh	r3, [r7, #24]
 800ab36:	9302      	str	r3, [sp, #8]
 800ab38:	7d3b      	ldrb	r3, [r7, #20]
 800ab3a:	9301      	str	r3, [sp, #4]
 800ab3c:	7c3b      	ldrb	r3, [r7, #16]
 800ab3e:	9300      	str	r3, [sp, #0]
 800ab40:	4603      	mov	r3, r0
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fa53 	bl	800afee <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3708      	adds	r7, #8
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}

0800ab52 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab52:	b580      	push	{r7, lr}
 800ab54:	b082      	sub	sp, #8
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab5e:	78fb      	ldrb	r3, [r7, #3]
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fa72 	bl	800b04c <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f836 	bl	800abf0 <USBH_GetFreePipe>
 800ab84:	4603      	mov	r3, r0
 800ab86:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab88:	89fb      	ldrh	r3, [r7, #14]
 800ab8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00a      	beq.n	800aba8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab92:	78fa      	ldrb	r2, [r7, #3]
 800ab94:	89fb      	ldrh	r3, [r7, #14]
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab9e:	6879      	ldr	r1, [r7, #4]
 800aba0:	33e0      	adds	r3, #224	@ 0xe0
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	440b      	add	r3, r1
 800aba6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800aba8:	89fb      	ldrh	r3, [r7, #14]
 800abaa:	b2db      	uxtb	r3, r3
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	2b0f      	cmp	r3, #15
 800abc4:	d80d      	bhi.n	800abe2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abc6:	78fb      	ldrb	r3, [r7, #3]
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	33e0      	adds	r3, #224	@ 0xe0
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	33e0      	adds	r3, #224	@ 0xe0
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800abfc:	2300      	movs	r3, #0
 800abfe:	73fb      	strb	r3, [r7, #15]
 800ac00:	e00f      	b.n	800ac22 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac02:	7bfb      	ldrb	r3, [r7, #15]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	33e0      	adds	r3, #224	@ 0xe0
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	e007      	b.n	800ac2c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	73fb      	strb	r3, [r7, #15]
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	2b0f      	cmp	r3, #15
 800ac26:	d9ec      	bls.n	800ac02 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	490e      	ldr	r1, [pc, #56]	@ (800ac78 <MX_USB_HOST_Init+0x40>)
 800ac40:	480e      	ldr	r0, [pc, #56]	@ (800ac7c <MX_USB_HOST_Init+0x44>)
 800ac42:	f7fe fb15 	bl	8009270 <USBH_Init>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac4c:	f7f6 f958 	bl	8000f00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac50:	490b      	ldr	r1, [pc, #44]	@ (800ac80 <MX_USB_HOST_Init+0x48>)
 800ac52:	480a      	ldr	r0, [pc, #40]	@ (800ac7c <MX_USB_HOST_Init+0x44>)
 800ac54:	f7fe fbb9 	bl	80093ca <USBH_RegisterClass>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac5e:	f7f6 f94f 	bl	8000f00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac62:	4806      	ldr	r0, [pc, #24]	@ (800ac7c <MX_USB_HOST_Init+0x44>)
 800ac64:	f7fe fc3d 	bl	80094e2 <USBH_Start>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d001      	beq.n	800ac72 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac6e:	f7f6 f947 	bl	8000f00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac72:	bf00      	nop
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	0800ac99 	.word	0x0800ac99
 800ac7c:	200001f8 	.word	0x200001f8
 800ac80:	2000000c 	.word	0x2000000c

0800ac84 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac88:	4802      	ldr	r0, [pc, #8]	@ (800ac94 <MX_USB_HOST_Process+0x10>)
 800ac8a:	f7fe fc3b 	bl	8009504 <USBH_Process>
}
 800ac8e:	bf00      	nop
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200001f8 	.word	0x200001f8

0800ac98 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	460b      	mov	r3, r1
 800aca2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d819      	bhi.n	800ace0 <USBH_UserProcess+0x48>
 800acac:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <USBH_UserProcess+0x1c>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800ace1 	.word	0x0800ace1
 800acb8:	0800acd1 	.word	0x0800acd1
 800acbc:	0800ace1 	.word	0x0800ace1
 800acc0:	0800acd9 	.word	0x0800acd9
 800acc4:	0800acc9 	.word	0x0800acc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800acc8:	4b09      	ldr	r3, [pc, #36]	@ (800acf0 <USBH_UserProcess+0x58>)
 800acca:	2203      	movs	r2, #3
 800accc:	701a      	strb	r2, [r3, #0]
  break;
 800acce:	e008      	b.n	800ace2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800acd0:	4b07      	ldr	r3, [pc, #28]	@ (800acf0 <USBH_UserProcess+0x58>)
 800acd2:	2202      	movs	r2, #2
 800acd4:	701a      	strb	r2, [r3, #0]
  break;
 800acd6:	e004      	b.n	800ace2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800acd8:	4b05      	ldr	r3, [pc, #20]	@ (800acf0 <USBH_UserProcess+0x58>)
 800acda:	2201      	movs	r2, #1
 800acdc:	701a      	strb	r2, [r3, #0]
  break;
 800acde:	e000      	b.n	800ace2 <USBH_UserProcess+0x4a>

  default:
  break;
 800ace0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ace2:	bf00      	nop
 800ace4:	370c      	adds	r7, #12
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
 800acee:	bf00      	nop
 800acf0:	200005d0 	.word	0x200005d0

0800acf4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08a      	sub	sp, #40	@ 0x28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acfc:	f107 0314 	add.w	r3, r7, #20
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	609a      	str	r2, [r3, #8]
 800ad08:	60da      	str	r2, [r3, #12]
 800ad0a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad14:	d147      	bne.n	800ada6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad16:	2300      	movs	r3, #0
 800ad18:	613b      	str	r3, [r7, #16]
 800ad1a:	4b25      	ldr	r3, [pc, #148]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1e:	4a24      	ldr	r2, [pc, #144]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad20:	f043 0301 	orr.w	r3, r3, #1
 800ad24:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad26:	4b22      	ldr	r3, [pc, #136]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad2a:	f003 0301 	and.w	r3, r3, #1
 800ad2e:	613b      	str	r3, [r7, #16]
 800ad30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad40:	f107 0314 	add.w	r3, r7, #20
 800ad44:	4619      	mov	r1, r3
 800ad46:	481b      	ldr	r0, [pc, #108]	@ (800adb4 <HAL_HCD_MspInit+0xc0>)
 800ad48:	f7f8 f9cc 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad4c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ad50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad52:	2302      	movs	r3, #2
 800ad54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad5e:	230a      	movs	r3, #10
 800ad60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad62:	f107 0314 	add.w	r3, r7, #20
 800ad66:	4619      	mov	r1, r3
 800ad68:	4812      	ldr	r0, [pc, #72]	@ (800adb4 <HAL_HCD_MspInit+0xc0>)
 800ad6a:	f7f8 f9bb 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad6e:	4b10      	ldr	r3, [pc, #64]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad72:	4a0f      	ldr	r2, [pc, #60]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad78:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	4b0c      	ldr	r3, [pc, #48]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad82:	4a0b      	ldr	r2, [pc, #44]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad88:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad8a:	4b09      	ldr	r3, [pc, #36]	@ (800adb0 <HAL_HCD_MspInit+0xbc>)
 800ad8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad96:	2200      	movs	r2, #0
 800ad98:	2100      	movs	r1, #0
 800ad9a:	2043      	movs	r0, #67	@ 0x43
 800ad9c:	f7f8 f96b 	bl	8003076 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ada0:	2043      	movs	r0, #67	@ 0x43
 800ada2:	f7f8 f984 	bl	80030ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ada6:	bf00      	nop
 800ada8:	3728      	adds	r7, #40	@ 0x28
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	40023800 	.word	0x40023800
 800adb4:	40020000 	.word	0x40020000

0800adb8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe ff73 	bl	8009cb2 <USBH_LL_IncTimer>
}
 800adcc:	bf00      	nop
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7fe ffab 	bl	8009d3e <USBH_LL_Connect>
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b082      	sub	sp, #8
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe ffb4 	bl	8009d6c <USBH_LL_Disconnect>
}
 800ae04:	bf00      	nop
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ae1c:	bf00      	nop
 800ae1e:	370c      	adds	r7, #12
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe ff65 	bl	8009d06 <USBH_LL_PortEnabled>
}
 800ae3c:	bf00      	nop
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe ff65 	bl	8009d22 <USBH_LL_PortDisabled>
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d12a      	bne.n	800aec8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae72:	4a18      	ldr	r2, [pc, #96]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4a15      	ldr	r2, [pc, #84]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae7e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae82:	4b14      	ldr	r3, [pc, #80]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae88:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae8a:	4b12      	ldr	r3, [pc, #72]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae90:	4b10      	ldr	r3, [pc, #64]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae92:	2201      	movs	r2, #1
 800ae94:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae96:	4b0f      	ldr	r3, [pc, #60]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae9c:	4b0d      	ldr	r3, [pc, #52]	@ (800aed4 <USBH_LL_Init+0x74>)
 800ae9e:	2202      	movs	r2, #2
 800aea0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aea2:	4b0c      	ldr	r3, [pc, #48]	@ (800aed4 <USBH_LL_Init+0x74>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aea8:	480a      	ldr	r0, [pc, #40]	@ (800aed4 <USBH_LL_Init+0x74>)
 800aeaa:	f7f8 fad0 	bl	800344e <HAL_HCD_Init>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aeb4:	f7f6 f824 	bl	8000f00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aeb8:	4806      	ldr	r0, [pc, #24]	@ (800aed4 <USBH_LL_Init+0x74>)
 800aeba:	f7f8 ff31 	bl	8003d20 <HAL_HCD_GetCurrentFrame>
 800aebe:	4603      	mov	r3, r0
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7fe fee6 	bl	8009c94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	200005d4 	.word	0x200005d4

0800aed8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f8 fe9e 	bl	8003c30 <HAL_HCD_Start>
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 f95e 	bl	800b1bc <USBH_Get_USB_Status>
 800af00:	4603      	mov	r3, r0
 800af02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af04:	7bbb      	ldrb	r3, [r7, #14]
}
 800af06:	4618      	mov	r0, r3
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b084      	sub	sp, #16
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af24:	4618      	mov	r0, r3
 800af26:	f7f8 fea6 	bl	8003c76 <HAL_HCD_Stop>
 800af2a:	4603      	mov	r3, r0
 800af2c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af2e:	7bfb      	ldrb	r3, [r7, #15]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f943 	bl	800b1bc <USBH_Get_USB_Status>
 800af36:	4603      	mov	r3, r0
 800af38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af4c:	2301      	movs	r3, #1
 800af4e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af56:	4618      	mov	r0, r3
 800af58:	f7f8 fef0 	bl	8003d3c <HAL_HCD_GetCurrentSpeed>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b02      	cmp	r3, #2
 800af60:	d00c      	beq.n	800af7c <USBH_LL_GetSpeed+0x38>
 800af62:	2b02      	cmp	r3, #2
 800af64:	d80d      	bhi.n	800af82 <USBH_LL_GetSpeed+0x3e>
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <USBH_LL_GetSpeed+0x2c>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d003      	beq.n	800af76 <USBH_LL_GetSpeed+0x32>
 800af6e:	e008      	b.n	800af82 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
    break;
 800af74:	e008      	b.n	800af88 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af76:	2301      	movs	r3, #1
 800af78:	73fb      	strb	r3, [r7, #15]
    break;
 800af7a:	e005      	b.n	800af88 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af7c:	2302      	movs	r3, #2
 800af7e:	73fb      	strb	r3, [r7, #15]
    break;
 800af80:	e002      	b.n	800af88 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af82:	2301      	movs	r3, #1
 800af84:	73fb      	strb	r3, [r7, #15]
    break;
 800af86:	bf00      	nop
  }
  return  speed;
 800af88:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f8 fe81 	bl	8003cb0 <HAL_HCD_ResetPort>
 800afae:	4603      	mov	r3, r0
 800afb0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800afb2:	7bfb      	ldrb	r3, [r7, #15]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f000 f901 	bl	800b1bc <USBH_Get_USB_Status>
 800afba:	4603      	mov	r3, r0
 800afbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afda:	78fa      	ldrb	r2, [r7, #3]
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7f8 fe89 	bl	8003cf6 <HAL_HCD_HC_GetXferCount>
 800afe4:	4603      	mov	r3, r0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afee:	b590      	push	{r4, r7, lr}
 800aff0:	b089      	sub	sp, #36	@ 0x24
 800aff2:	af04      	add	r7, sp, #16
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	4608      	mov	r0, r1
 800aff8:	4611      	mov	r1, r2
 800affa:	461a      	mov	r2, r3
 800affc:	4603      	mov	r3, r0
 800affe:	70fb      	strb	r3, [r7, #3]
 800b000:	460b      	mov	r3, r1
 800b002:	70bb      	strb	r3, [r7, #2]
 800b004:	4613      	mov	r3, r2
 800b006:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b008:	2300      	movs	r3, #0
 800b00a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b016:	787c      	ldrb	r4, [r7, #1]
 800b018:	78ba      	ldrb	r2, [r7, #2]
 800b01a:	78f9      	ldrb	r1, [r7, #3]
 800b01c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b01e:	9302      	str	r3, [sp, #8]
 800b020:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	4623      	mov	r3, r4
 800b02e:	f7f8 fa75 	bl	800351c <HAL_HCD_HC_Init>
 800b032:	4603      	mov	r3, r0
 800b034:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b036:	7bfb      	ldrb	r3, [r7, #15]
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f8bf 	bl	800b1bc <USBH_Get_USB_Status>
 800b03e:	4603      	mov	r3, r0
 800b040:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b042:	7bbb      	ldrb	r3, [r7, #14]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd90      	pop	{r4, r7, pc}

0800b04c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	460b      	mov	r3, r1
 800b056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b058:	2300      	movs	r3, #0
 800b05a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b066:	78fa      	ldrb	r2, [r7, #3]
 800b068:	4611      	mov	r1, r2
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7f8 fb0e 	bl	800368c <HAL_HCD_HC_Halt>
 800b070:	4603      	mov	r3, r0
 800b072:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	4618      	mov	r0, r3
 800b078:	f000 f8a0 	bl	800b1bc <USBH_Get_USB_Status>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b080:	7bbb      	ldrb	r3, [r7, #14]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b08a:	b590      	push	{r4, r7, lr}
 800b08c:	b089      	sub	sp, #36	@ 0x24
 800b08e:	af04      	add	r7, sp, #16
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	4608      	mov	r0, r1
 800b094:	4611      	mov	r1, r2
 800b096:	461a      	mov	r2, r3
 800b098:	4603      	mov	r3, r0
 800b09a:	70fb      	strb	r3, [r7, #3]
 800b09c:	460b      	mov	r3, r1
 800b09e:	70bb      	strb	r3, [r7, #2]
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b0b2:	787c      	ldrb	r4, [r7, #1]
 800b0b4:	78ba      	ldrb	r2, [r7, #2]
 800b0b6:	78f9      	ldrb	r1, [r7, #3]
 800b0b8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0bc:	9303      	str	r3, [sp, #12]
 800b0be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0c0:	9302      	str	r3, [sp, #8]
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	4623      	mov	r3, r4
 800b0ce:	f7f8 fb01 	bl	80036d4 <HAL_HCD_HC_SubmitRequest>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b0d6:	7bfb      	ldrb	r3, [r7, #15]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 f86f 	bl	800b1bc <USBH_Get_USB_Status>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd90      	pop	{r4, r7, pc}

0800b0ec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7f8 fde2 	bl	8003ccc <HAL_HCD_HC_GetURBState>
 800b108:	4603      	mov	r3, r0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b124:	2b01      	cmp	r3, #1
 800b126:	d103      	bne.n	800b130 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 f872 	bl	800b214 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b130:	20c8      	movs	r0, #200	@ 0xc8
 800b132:	f7f7 fea1 	bl	8002e78 <HAL_Delay>
  return USBH_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b140:	b480      	push	{r7}
 800b142:	b085      	sub	sp, #20
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	460b      	mov	r3, r1
 800b14a:	70fb      	strb	r3, [r7, #3]
 800b14c:	4613      	mov	r3, r2
 800b14e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b156:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b158:	78fa      	ldrb	r2, [r7, #3]
 800b15a:	68f9      	ldr	r1, [r7, #12]
 800b15c:	4613      	mov	r3, r2
 800b15e:	011b      	lsls	r3, r3, #4
 800b160:	1a9b      	subs	r3, r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	3317      	adds	r3, #23
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d00a      	beq.n	800b184 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	68f9      	ldr	r1, [r7, #12]
 800b172:	4613      	mov	r3, r2
 800b174:	011b      	lsls	r3, r3, #4
 800b176:	1a9b      	subs	r3, r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	333c      	adds	r3, #60	@ 0x3c
 800b17e:	78ba      	ldrb	r2, [r7, #2]
 800b180:	701a      	strb	r2, [r3, #0]
 800b182:	e009      	b.n	800b198 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b184:	78fa      	ldrb	r2, [r7, #3]
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	4613      	mov	r3, r2
 800b18a:	011b      	lsls	r3, r3, #4
 800b18c:	1a9b      	subs	r3, r3, r2
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	440b      	add	r3, r1
 800b192:	333d      	adds	r3, #61	@ 0x3d
 800b194:	78ba      	ldrb	r2, [r7, #2]
 800b196:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b082      	sub	sp, #8
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7f7 fe62 	bl	8002e78 <HAL_Delay>
}
 800b1b4:	bf00      	nop
 800b1b6:	3708      	adds	r7, #8
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d817      	bhi.n	800b200 <USBH_Get_USB_Status+0x44>
 800b1d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d8 <USBH_Get_USB_Status+0x1c>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b1e9 	.word	0x0800b1e9
 800b1dc:	0800b1ef 	.word	0x0800b1ef
 800b1e0:	0800b1f5 	.word	0x0800b1f5
 800b1e4:	0800b1fb 	.word	0x0800b1fb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ec:	e00b      	b.n	800b206 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f2:	e008      	b.n	800b206 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f8:	e005      	b.n	800b206 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b1fa:	2302      	movs	r3, #2
 800b1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1fe:	e002      	b.n	800b206 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b200:	2302      	movs	r3, #2
 800b202:	73fb      	strb	r3, [r7, #15]
    break;
 800b204:	bf00      	nop
  }
  return usb_status;
 800b206:	7bfb      	ldrb	r3, [r7, #15]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b084      	sub	sp, #16
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b21e:	79fb      	ldrb	r3, [r7, #7]
 800b220:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b228:	2300      	movs	r3, #0
 800b22a:	73fb      	strb	r3, [r7, #15]
 800b22c:	e001      	b.n	800b232 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b22e:	2301      	movs	r3, #1
 800b230:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b232:	7bfb      	ldrb	r3, [r7, #15]
 800b234:	461a      	mov	r2, r3
 800b236:	2101      	movs	r1, #1
 800b238:	4803      	ldr	r0, [pc, #12]	@ (800b248 <MX_DriverVbusFS+0x34>)
 800b23a:	f7f8 f8ef 	bl	800341c <HAL_GPIO_WritePin>
}
 800b23e:	bf00      	nop
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	40020800 	.word	0x40020800

0800b24c <malloc>:
 800b24c:	4b02      	ldr	r3, [pc, #8]	@ (800b258 <malloc+0xc>)
 800b24e:	4601      	mov	r1, r0
 800b250:	6818      	ldr	r0, [r3, #0]
 800b252:	f000 b82d 	b.w	800b2b0 <_malloc_r>
 800b256:	bf00      	nop
 800b258:	20000038 	.word	0x20000038

0800b25c <free>:
 800b25c:	4b02      	ldr	r3, [pc, #8]	@ (800b268 <free+0xc>)
 800b25e:	4601      	mov	r1, r0
 800b260:	6818      	ldr	r0, [r3, #0]
 800b262:	f000 bb69 	b.w	800b938 <_free_r>
 800b266:	bf00      	nop
 800b268:	20000038 	.word	0x20000038

0800b26c <sbrk_aligned>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	4e0f      	ldr	r6, [pc, #60]	@ (800b2ac <sbrk_aligned+0x40>)
 800b270:	460c      	mov	r4, r1
 800b272:	6831      	ldr	r1, [r6, #0]
 800b274:	4605      	mov	r5, r0
 800b276:	b911      	cbnz	r1, 800b27e <sbrk_aligned+0x12>
 800b278:	f000 fb0e 	bl	800b898 <_sbrk_r>
 800b27c:	6030      	str	r0, [r6, #0]
 800b27e:	4621      	mov	r1, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 fb09 	bl	800b898 <_sbrk_r>
 800b286:	1c43      	adds	r3, r0, #1
 800b288:	d103      	bne.n	800b292 <sbrk_aligned+0x26>
 800b28a:	f04f 34ff 	mov.w	r4, #4294967295
 800b28e:	4620      	mov	r0, r4
 800b290:	bd70      	pop	{r4, r5, r6, pc}
 800b292:	1cc4      	adds	r4, r0, #3
 800b294:	f024 0403 	bic.w	r4, r4, #3
 800b298:	42a0      	cmp	r0, r4
 800b29a:	d0f8      	beq.n	800b28e <sbrk_aligned+0x22>
 800b29c:	1a21      	subs	r1, r4, r0
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 fafa 	bl	800b898 <_sbrk_r>
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	d1f2      	bne.n	800b28e <sbrk_aligned+0x22>
 800b2a8:	e7ef      	b.n	800b28a <sbrk_aligned+0x1e>
 800b2aa:	bf00      	nop
 800b2ac:	200009b4 	.word	0x200009b4

0800b2b0 <_malloc_r>:
 800b2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2b4:	1ccd      	adds	r5, r1, #3
 800b2b6:	f025 0503 	bic.w	r5, r5, #3
 800b2ba:	3508      	adds	r5, #8
 800b2bc:	2d0c      	cmp	r5, #12
 800b2be:	bf38      	it	cc
 800b2c0:	250c      	movcc	r5, #12
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	4606      	mov	r6, r0
 800b2c6:	db01      	blt.n	800b2cc <_malloc_r+0x1c>
 800b2c8:	42a9      	cmp	r1, r5
 800b2ca:	d904      	bls.n	800b2d6 <_malloc_r+0x26>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	6033      	str	r3, [r6, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b3ac <_malloc_r+0xfc>
 800b2da:	f000 f869 	bl	800b3b0 <__malloc_lock>
 800b2de:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	bb44      	cbnz	r4, 800b338 <_malloc_r+0x88>
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f7ff ffbf 	bl	800b26c <sbrk_aligned>
 800b2ee:	1c43      	adds	r3, r0, #1
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	d158      	bne.n	800b3a6 <_malloc_r+0xf6>
 800b2f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b2f8:	4627      	mov	r7, r4
 800b2fa:	2f00      	cmp	r7, #0
 800b2fc:	d143      	bne.n	800b386 <_malloc_r+0xd6>
 800b2fe:	2c00      	cmp	r4, #0
 800b300:	d04b      	beq.n	800b39a <_malloc_r+0xea>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	4639      	mov	r1, r7
 800b306:	4630      	mov	r0, r6
 800b308:	eb04 0903 	add.w	r9, r4, r3
 800b30c:	f000 fac4 	bl	800b898 <_sbrk_r>
 800b310:	4581      	cmp	r9, r0
 800b312:	d142      	bne.n	800b39a <_malloc_r+0xea>
 800b314:	6821      	ldr	r1, [r4, #0]
 800b316:	1a6d      	subs	r5, r5, r1
 800b318:	4629      	mov	r1, r5
 800b31a:	4630      	mov	r0, r6
 800b31c:	f7ff ffa6 	bl	800b26c <sbrk_aligned>
 800b320:	3001      	adds	r0, #1
 800b322:	d03a      	beq.n	800b39a <_malloc_r+0xea>
 800b324:	6823      	ldr	r3, [r4, #0]
 800b326:	442b      	add	r3, r5
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	f8d8 3000 	ldr.w	r3, [r8]
 800b32e:	685a      	ldr	r2, [r3, #4]
 800b330:	bb62      	cbnz	r2, 800b38c <_malloc_r+0xdc>
 800b332:	f8c8 7000 	str.w	r7, [r8]
 800b336:	e00f      	b.n	800b358 <_malloc_r+0xa8>
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	1b52      	subs	r2, r2, r5
 800b33c:	d420      	bmi.n	800b380 <_malloc_r+0xd0>
 800b33e:	2a0b      	cmp	r2, #11
 800b340:	d917      	bls.n	800b372 <_malloc_r+0xc2>
 800b342:	1961      	adds	r1, r4, r5
 800b344:	42a3      	cmp	r3, r4
 800b346:	6025      	str	r5, [r4, #0]
 800b348:	bf18      	it	ne
 800b34a:	6059      	strne	r1, [r3, #4]
 800b34c:	6863      	ldr	r3, [r4, #4]
 800b34e:	bf08      	it	eq
 800b350:	f8c8 1000 	streq.w	r1, [r8]
 800b354:	5162      	str	r2, [r4, r5]
 800b356:	604b      	str	r3, [r1, #4]
 800b358:	4630      	mov	r0, r6
 800b35a:	f000 f82f 	bl	800b3bc <__malloc_unlock>
 800b35e:	f104 000b 	add.w	r0, r4, #11
 800b362:	1d23      	adds	r3, r4, #4
 800b364:	f020 0007 	bic.w	r0, r0, #7
 800b368:	1ac2      	subs	r2, r0, r3
 800b36a:	bf1c      	itt	ne
 800b36c:	1a1b      	subne	r3, r3, r0
 800b36e:	50a3      	strne	r3, [r4, r2]
 800b370:	e7af      	b.n	800b2d2 <_malloc_r+0x22>
 800b372:	6862      	ldr	r2, [r4, #4]
 800b374:	42a3      	cmp	r3, r4
 800b376:	bf0c      	ite	eq
 800b378:	f8c8 2000 	streq.w	r2, [r8]
 800b37c:	605a      	strne	r2, [r3, #4]
 800b37e:	e7eb      	b.n	800b358 <_malloc_r+0xa8>
 800b380:	4623      	mov	r3, r4
 800b382:	6864      	ldr	r4, [r4, #4]
 800b384:	e7ae      	b.n	800b2e4 <_malloc_r+0x34>
 800b386:	463c      	mov	r4, r7
 800b388:	687f      	ldr	r7, [r7, #4]
 800b38a:	e7b6      	b.n	800b2fa <_malloc_r+0x4a>
 800b38c:	461a      	mov	r2, r3
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	42a3      	cmp	r3, r4
 800b392:	d1fb      	bne.n	800b38c <_malloc_r+0xdc>
 800b394:	2300      	movs	r3, #0
 800b396:	6053      	str	r3, [r2, #4]
 800b398:	e7de      	b.n	800b358 <_malloc_r+0xa8>
 800b39a:	230c      	movs	r3, #12
 800b39c:	6033      	str	r3, [r6, #0]
 800b39e:	4630      	mov	r0, r6
 800b3a0:	f000 f80c 	bl	800b3bc <__malloc_unlock>
 800b3a4:	e794      	b.n	800b2d0 <_malloc_r+0x20>
 800b3a6:	6005      	str	r5, [r0, #0]
 800b3a8:	e7d6      	b.n	800b358 <_malloc_r+0xa8>
 800b3aa:	bf00      	nop
 800b3ac:	200009b8 	.word	0x200009b8

0800b3b0 <__malloc_lock>:
 800b3b0:	4801      	ldr	r0, [pc, #4]	@ (800b3b8 <__malloc_lock+0x8>)
 800b3b2:	f000 babe 	b.w	800b932 <__retarget_lock_acquire_recursive>
 800b3b6:	bf00      	nop
 800b3b8:	20000afc 	.word	0x20000afc

0800b3bc <__malloc_unlock>:
 800b3bc:	4801      	ldr	r0, [pc, #4]	@ (800b3c4 <__malloc_unlock+0x8>)
 800b3be:	f000 bab9 	b.w	800b934 <__retarget_lock_release_recursive>
 800b3c2:	bf00      	nop
 800b3c4:	20000afc 	.word	0x20000afc

0800b3c8 <std>:
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	b510      	push	{r4, lr}
 800b3cc:	4604      	mov	r4, r0
 800b3ce:	e9c0 3300 	strd	r3, r3, [r0]
 800b3d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3d6:	6083      	str	r3, [r0, #8]
 800b3d8:	8181      	strh	r1, [r0, #12]
 800b3da:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3dc:	81c2      	strh	r2, [r0, #14]
 800b3de:	6183      	str	r3, [r0, #24]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	2208      	movs	r2, #8
 800b3e4:	305c      	adds	r0, #92	@ 0x5c
 800b3e6:	f000 fa1b 	bl	800b820 <memset>
 800b3ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b420 <std+0x58>)
 800b3ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b424 <std+0x5c>)
 800b3f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b428 <std+0x60>)
 800b3f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b42c <std+0x64>)
 800b3f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <std+0x68>)
 800b3fc:	6224      	str	r4, [r4, #32]
 800b3fe:	429c      	cmp	r4, r3
 800b400:	d006      	beq.n	800b410 <std+0x48>
 800b402:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b406:	4294      	cmp	r4, r2
 800b408:	d002      	beq.n	800b410 <std+0x48>
 800b40a:	33d0      	adds	r3, #208	@ 0xd0
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d105      	bne.n	800b41c <std+0x54>
 800b410:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b418:	f000 ba8a 	b.w	800b930 <__retarget_lock_init_recursive>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	bf00      	nop
 800b420:	0800b721 	.word	0x0800b721
 800b424:	0800b743 	.word	0x0800b743
 800b428:	0800b77b 	.word	0x0800b77b
 800b42c:	0800b79f 	.word	0x0800b79f
 800b430:	200009bc 	.word	0x200009bc

0800b434 <stdio_exit_handler>:
 800b434:	4a02      	ldr	r2, [pc, #8]	@ (800b440 <stdio_exit_handler+0xc>)
 800b436:	4903      	ldr	r1, [pc, #12]	@ (800b444 <stdio_exit_handler+0x10>)
 800b438:	4803      	ldr	r0, [pc, #12]	@ (800b448 <stdio_exit_handler+0x14>)
 800b43a:	f000 b869 	b.w	800b510 <_fwalk_sglue>
 800b43e:	bf00      	nop
 800b440:	2000002c 	.word	0x2000002c
 800b444:	0800c09d 	.word	0x0800c09d
 800b448:	2000003c 	.word	0x2000003c

0800b44c <cleanup_stdio>:
 800b44c:	6841      	ldr	r1, [r0, #4]
 800b44e:	4b0c      	ldr	r3, [pc, #48]	@ (800b480 <cleanup_stdio+0x34>)
 800b450:	4299      	cmp	r1, r3
 800b452:	b510      	push	{r4, lr}
 800b454:	4604      	mov	r4, r0
 800b456:	d001      	beq.n	800b45c <cleanup_stdio+0x10>
 800b458:	f000 fe20 	bl	800c09c <_fflush_r>
 800b45c:	68a1      	ldr	r1, [r4, #8]
 800b45e:	4b09      	ldr	r3, [pc, #36]	@ (800b484 <cleanup_stdio+0x38>)
 800b460:	4299      	cmp	r1, r3
 800b462:	d002      	beq.n	800b46a <cleanup_stdio+0x1e>
 800b464:	4620      	mov	r0, r4
 800b466:	f000 fe19 	bl	800c09c <_fflush_r>
 800b46a:	68e1      	ldr	r1, [r4, #12]
 800b46c:	4b06      	ldr	r3, [pc, #24]	@ (800b488 <cleanup_stdio+0x3c>)
 800b46e:	4299      	cmp	r1, r3
 800b470:	d004      	beq.n	800b47c <cleanup_stdio+0x30>
 800b472:	4620      	mov	r0, r4
 800b474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b478:	f000 be10 	b.w	800c09c <_fflush_r>
 800b47c:	bd10      	pop	{r4, pc}
 800b47e:	bf00      	nop
 800b480:	200009bc 	.word	0x200009bc
 800b484:	20000a24 	.word	0x20000a24
 800b488:	20000a8c 	.word	0x20000a8c

0800b48c <global_stdio_init.part.0>:
 800b48c:	b510      	push	{r4, lr}
 800b48e:	4b0b      	ldr	r3, [pc, #44]	@ (800b4bc <global_stdio_init.part.0+0x30>)
 800b490:	4c0b      	ldr	r4, [pc, #44]	@ (800b4c0 <global_stdio_init.part.0+0x34>)
 800b492:	4a0c      	ldr	r2, [pc, #48]	@ (800b4c4 <global_stdio_init.part.0+0x38>)
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	4620      	mov	r0, r4
 800b498:	2200      	movs	r2, #0
 800b49a:	2104      	movs	r1, #4
 800b49c:	f7ff ff94 	bl	800b3c8 <std>
 800b4a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	2109      	movs	r1, #9
 800b4a8:	f7ff ff8e 	bl	800b3c8 <std>
 800b4ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4b0:	2202      	movs	r2, #2
 800b4b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4b6:	2112      	movs	r1, #18
 800b4b8:	f7ff bf86 	b.w	800b3c8 <std>
 800b4bc:	20000af4 	.word	0x20000af4
 800b4c0:	200009bc 	.word	0x200009bc
 800b4c4:	0800b435 	.word	0x0800b435

0800b4c8 <__sfp_lock_acquire>:
 800b4c8:	4801      	ldr	r0, [pc, #4]	@ (800b4d0 <__sfp_lock_acquire+0x8>)
 800b4ca:	f000 ba32 	b.w	800b932 <__retarget_lock_acquire_recursive>
 800b4ce:	bf00      	nop
 800b4d0:	20000afd 	.word	0x20000afd

0800b4d4 <__sfp_lock_release>:
 800b4d4:	4801      	ldr	r0, [pc, #4]	@ (800b4dc <__sfp_lock_release+0x8>)
 800b4d6:	f000 ba2d 	b.w	800b934 <__retarget_lock_release_recursive>
 800b4da:	bf00      	nop
 800b4dc:	20000afd 	.word	0x20000afd

0800b4e0 <__sinit>:
 800b4e0:	b510      	push	{r4, lr}
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	f7ff fff0 	bl	800b4c8 <__sfp_lock_acquire>
 800b4e8:	6a23      	ldr	r3, [r4, #32]
 800b4ea:	b11b      	cbz	r3, 800b4f4 <__sinit+0x14>
 800b4ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f0:	f7ff bff0 	b.w	800b4d4 <__sfp_lock_release>
 800b4f4:	4b04      	ldr	r3, [pc, #16]	@ (800b508 <__sinit+0x28>)
 800b4f6:	6223      	str	r3, [r4, #32]
 800b4f8:	4b04      	ldr	r3, [pc, #16]	@ (800b50c <__sinit+0x2c>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1f5      	bne.n	800b4ec <__sinit+0xc>
 800b500:	f7ff ffc4 	bl	800b48c <global_stdio_init.part.0>
 800b504:	e7f2      	b.n	800b4ec <__sinit+0xc>
 800b506:	bf00      	nop
 800b508:	0800b44d 	.word	0x0800b44d
 800b50c:	20000af4 	.word	0x20000af4

0800b510 <_fwalk_sglue>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	4607      	mov	r7, r0
 800b516:	4688      	mov	r8, r1
 800b518:	4614      	mov	r4, r2
 800b51a:	2600      	movs	r6, #0
 800b51c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b520:	f1b9 0901 	subs.w	r9, r9, #1
 800b524:	d505      	bpl.n	800b532 <_fwalk_sglue+0x22>
 800b526:	6824      	ldr	r4, [r4, #0]
 800b528:	2c00      	cmp	r4, #0
 800b52a:	d1f7      	bne.n	800b51c <_fwalk_sglue+0xc>
 800b52c:	4630      	mov	r0, r6
 800b52e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b532:	89ab      	ldrh	r3, [r5, #12]
 800b534:	2b01      	cmp	r3, #1
 800b536:	d907      	bls.n	800b548 <_fwalk_sglue+0x38>
 800b538:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b53c:	3301      	adds	r3, #1
 800b53e:	d003      	beq.n	800b548 <_fwalk_sglue+0x38>
 800b540:	4629      	mov	r1, r5
 800b542:	4638      	mov	r0, r7
 800b544:	47c0      	blx	r8
 800b546:	4306      	orrs	r6, r0
 800b548:	3568      	adds	r5, #104	@ 0x68
 800b54a:	e7e9      	b.n	800b520 <_fwalk_sglue+0x10>

0800b54c <setvbuf>:
 800b54c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b550:	461d      	mov	r5, r3
 800b552:	4b57      	ldr	r3, [pc, #348]	@ (800b6b0 <setvbuf+0x164>)
 800b554:	681f      	ldr	r7, [r3, #0]
 800b556:	4604      	mov	r4, r0
 800b558:	460e      	mov	r6, r1
 800b55a:	4690      	mov	r8, r2
 800b55c:	b127      	cbz	r7, 800b568 <setvbuf+0x1c>
 800b55e:	6a3b      	ldr	r3, [r7, #32]
 800b560:	b913      	cbnz	r3, 800b568 <setvbuf+0x1c>
 800b562:	4638      	mov	r0, r7
 800b564:	f7ff ffbc 	bl	800b4e0 <__sinit>
 800b568:	f1b8 0f02 	cmp.w	r8, #2
 800b56c:	d006      	beq.n	800b57c <setvbuf+0x30>
 800b56e:	f1b8 0f01 	cmp.w	r8, #1
 800b572:	f200 809a 	bhi.w	800b6aa <setvbuf+0x15e>
 800b576:	2d00      	cmp	r5, #0
 800b578:	f2c0 8097 	blt.w	800b6aa <setvbuf+0x15e>
 800b57c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b57e:	07d9      	lsls	r1, r3, #31
 800b580:	d405      	bmi.n	800b58e <setvbuf+0x42>
 800b582:	89a3      	ldrh	r3, [r4, #12]
 800b584:	059a      	lsls	r2, r3, #22
 800b586:	d402      	bmi.n	800b58e <setvbuf+0x42>
 800b588:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b58a:	f000 f9d2 	bl	800b932 <__retarget_lock_acquire_recursive>
 800b58e:	4621      	mov	r1, r4
 800b590:	4638      	mov	r0, r7
 800b592:	f000 fd83 	bl	800c09c <_fflush_r>
 800b596:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b598:	b141      	cbz	r1, 800b5ac <setvbuf+0x60>
 800b59a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b59e:	4299      	cmp	r1, r3
 800b5a0:	d002      	beq.n	800b5a8 <setvbuf+0x5c>
 800b5a2:	4638      	mov	r0, r7
 800b5a4:	f000 f9c8 	bl	800b938 <_free_r>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61a3      	str	r3, [r4, #24]
 800b5b0:	6063      	str	r3, [r4, #4]
 800b5b2:	89a3      	ldrh	r3, [r4, #12]
 800b5b4:	061b      	lsls	r3, r3, #24
 800b5b6:	d503      	bpl.n	800b5c0 <setvbuf+0x74>
 800b5b8:	6921      	ldr	r1, [r4, #16]
 800b5ba:	4638      	mov	r0, r7
 800b5bc:	f000 f9bc 	bl	800b938 <_free_r>
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b5c6:	f023 0303 	bic.w	r3, r3, #3
 800b5ca:	f1b8 0f02 	cmp.w	r8, #2
 800b5ce:	81a3      	strh	r3, [r4, #12]
 800b5d0:	d061      	beq.n	800b696 <setvbuf+0x14a>
 800b5d2:	ab01      	add	r3, sp, #4
 800b5d4:	466a      	mov	r2, sp
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f000 fd87 	bl	800c0ec <__swhatbuf_r>
 800b5de:	89a3      	ldrh	r3, [r4, #12]
 800b5e0:	4318      	orrs	r0, r3
 800b5e2:	81a0      	strh	r0, [r4, #12]
 800b5e4:	bb2d      	cbnz	r5, 800b632 <setvbuf+0xe6>
 800b5e6:	9d00      	ldr	r5, [sp, #0]
 800b5e8:	4628      	mov	r0, r5
 800b5ea:	f7ff fe2f 	bl	800b24c <malloc>
 800b5ee:	4606      	mov	r6, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d152      	bne.n	800b69a <setvbuf+0x14e>
 800b5f4:	f8dd 9000 	ldr.w	r9, [sp]
 800b5f8:	45a9      	cmp	r9, r5
 800b5fa:	d140      	bne.n	800b67e <setvbuf+0x132>
 800b5fc:	f04f 35ff 	mov.w	r5, #4294967295
 800b600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b604:	f043 0202 	orr.w	r2, r3, #2
 800b608:	81a2      	strh	r2, [r4, #12]
 800b60a:	2200      	movs	r2, #0
 800b60c:	60a2      	str	r2, [r4, #8]
 800b60e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b612:	6022      	str	r2, [r4, #0]
 800b614:	6122      	str	r2, [r4, #16]
 800b616:	2201      	movs	r2, #1
 800b618:	6162      	str	r2, [r4, #20]
 800b61a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b61c:	07d6      	lsls	r6, r2, #31
 800b61e:	d404      	bmi.n	800b62a <setvbuf+0xde>
 800b620:	0598      	lsls	r0, r3, #22
 800b622:	d402      	bmi.n	800b62a <setvbuf+0xde>
 800b624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b626:	f000 f985 	bl	800b934 <__retarget_lock_release_recursive>
 800b62a:	4628      	mov	r0, r5
 800b62c:	b003      	add	sp, #12
 800b62e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b632:	2e00      	cmp	r6, #0
 800b634:	d0d8      	beq.n	800b5e8 <setvbuf+0x9c>
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	b913      	cbnz	r3, 800b640 <setvbuf+0xf4>
 800b63a:	4638      	mov	r0, r7
 800b63c:	f7ff ff50 	bl	800b4e0 <__sinit>
 800b640:	f1b8 0f01 	cmp.w	r8, #1
 800b644:	bf08      	it	eq
 800b646:	89a3      	ldrheq	r3, [r4, #12]
 800b648:	6026      	str	r6, [r4, #0]
 800b64a:	bf04      	itt	eq
 800b64c:	f043 0301 	orreq.w	r3, r3, #1
 800b650:	81a3      	strheq	r3, [r4, #12]
 800b652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b656:	f013 0208 	ands.w	r2, r3, #8
 800b65a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b65e:	d01e      	beq.n	800b69e <setvbuf+0x152>
 800b660:	07d9      	lsls	r1, r3, #31
 800b662:	bf41      	itttt	mi
 800b664:	2200      	movmi	r2, #0
 800b666:	426d      	negmi	r5, r5
 800b668:	60a2      	strmi	r2, [r4, #8]
 800b66a:	61a5      	strmi	r5, [r4, #24]
 800b66c:	bf58      	it	pl
 800b66e:	60a5      	strpl	r5, [r4, #8]
 800b670:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b672:	07d2      	lsls	r2, r2, #31
 800b674:	d401      	bmi.n	800b67a <setvbuf+0x12e>
 800b676:	059b      	lsls	r3, r3, #22
 800b678:	d513      	bpl.n	800b6a2 <setvbuf+0x156>
 800b67a:	2500      	movs	r5, #0
 800b67c:	e7d5      	b.n	800b62a <setvbuf+0xde>
 800b67e:	4648      	mov	r0, r9
 800b680:	f7ff fde4 	bl	800b24c <malloc>
 800b684:	4606      	mov	r6, r0
 800b686:	2800      	cmp	r0, #0
 800b688:	d0b8      	beq.n	800b5fc <setvbuf+0xb0>
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	464d      	mov	r5, r9
 800b694:	e7cf      	b.n	800b636 <setvbuf+0xea>
 800b696:	2500      	movs	r5, #0
 800b698:	e7b2      	b.n	800b600 <setvbuf+0xb4>
 800b69a:	46a9      	mov	r9, r5
 800b69c:	e7f5      	b.n	800b68a <setvbuf+0x13e>
 800b69e:	60a2      	str	r2, [r4, #8]
 800b6a0:	e7e6      	b.n	800b670 <setvbuf+0x124>
 800b6a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6a4:	f000 f946 	bl	800b934 <__retarget_lock_release_recursive>
 800b6a8:	e7e7      	b.n	800b67a <setvbuf+0x12e>
 800b6aa:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ae:	e7bc      	b.n	800b62a <setvbuf+0xde>
 800b6b0:	20000038 	.word	0x20000038

0800b6b4 <sniprintf>:
 800b6b4:	b40c      	push	{r2, r3}
 800b6b6:	b530      	push	{r4, r5, lr}
 800b6b8:	4b18      	ldr	r3, [pc, #96]	@ (800b71c <sniprintf+0x68>)
 800b6ba:	1e0c      	subs	r4, r1, #0
 800b6bc:	681d      	ldr	r5, [r3, #0]
 800b6be:	b09d      	sub	sp, #116	@ 0x74
 800b6c0:	da08      	bge.n	800b6d4 <sniprintf+0x20>
 800b6c2:	238b      	movs	r3, #139	@ 0x8b
 800b6c4:	602b      	str	r3, [r5, #0]
 800b6c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ca:	b01d      	add	sp, #116	@ 0x74
 800b6cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6d0:	b002      	add	sp, #8
 800b6d2:	4770      	bx	lr
 800b6d4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b6d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6dc:	f04f 0300 	mov.w	r3, #0
 800b6e0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b6e2:	bf14      	ite	ne
 800b6e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b6e8:	4623      	moveq	r3, r4
 800b6ea:	9304      	str	r3, [sp, #16]
 800b6ec:	9307      	str	r3, [sp, #28]
 800b6ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b6f2:	9002      	str	r0, [sp, #8]
 800b6f4:	9006      	str	r0, [sp, #24]
 800b6f6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b6fc:	ab21      	add	r3, sp, #132	@ 0x84
 800b6fe:	a902      	add	r1, sp, #8
 800b700:	4628      	mov	r0, r5
 800b702:	9301      	str	r3, [sp, #4]
 800b704:	f000 f9be 	bl	800ba84 <_svfiprintf_r>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	bfbc      	itt	lt
 800b70c:	238b      	movlt	r3, #139	@ 0x8b
 800b70e:	602b      	strlt	r3, [r5, #0]
 800b710:	2c00      	cmp	r4, #0
 800b712:	d0da      	beq.n	800b6ca <sniprintf+0x16>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	e7d6      	b.n	800b6ca <sniprintf+0x16>
 800b71c:	20000038 	.word	0x20000038

0800b720 <__sread>:
 800b720:	b510      	push	{r4, lr}
 800b722:	460c      	mov	r4, r1
 800b724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b728:	f000 f8a4 	bl	800b874 <_read_r>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	bfab      	itete	ge
 800b730:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b732:	89a3      	ldrhlt	r3, [r4, #12]
 800b734:	181b      	addge	r3, r3, r0
 800b736:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b73a:	bfac      	ite	ge
 800b73c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b73e:	81a3      	strhlt	r3, [r4, #12]
 800b740:	bd10      	pop	{r4, pc}

0800b742 <__swrite>:
 800b742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b746:	461f      	mov	r7, r3
 800b748:	898b      	ldrh	r3, [r1, #12]
 800b74a:	05db      	lsls	r3, r3, #23
 800b74c:	4605      	mov	r5, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	4616      	mov	r6, r2
 800b752:	d505      	bpl.n	800b760 <__swrite+0x1e>
 800b754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b758:	2302      	movs	r3, #2
 800b75a:	2200      	movs	r2, #0
 800b75c:	f000 f878 	bl	800b850 <_lseek_r>
 800b760:	89a3      	ldrh	r3, [r4, #12]
 800b762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b766:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b76a:	81a3      	strh	r3, [r4, #12]
 800b76c:	4632      	mov	r2, r6
 800b76e:	463b      	mov	r3, r7
 800b770:	4628      	mov	r0, r5
 800b772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b776:	f000 b89f 	b.w	800b8b8 <_write_r>

0800b77a <__sseek>:
 800b77a:	b510      	push	{r4, lr}
 800b77c:	460c      	mov	r4, r1
 800b77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b782:	f000 f865 	bl	800b850 <_lseek_r>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	bf15      	itete	ne
 800b78c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b78e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b792:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b796:	81a3      	strheq	r3, [r4, #12]
 800b798:	bf18      	it	ne
 800b79a:	81a3      	strhne	r3, [r4, #12]
 800b79c:	bd10      	pop	{r4, pc}

0800b79e <__sclose>:
 800b79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a2:	f000 b845 	b.w	800b830 <_close_r>

0800b7a6 <_vsniprintf_r>:
 800b7a6:	b530      	push	{r4, r5, lr}
 800b7a8:	4614      	mov	r4, r2
 800b7aa:	2c00      	cmp	r4, #0
 800b7ac:	b09b      	sub	sp, #108	@ 0x6c
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	da05      	bge.n	800b7c0 <_vsniprintf_r+0x1a>
 800b7b4:	238b      	movs	r3, #139	@ 0x8b
 800b7b6:	6003      	str	r3, [r0, #0]
 800b7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7bc:	b01b      	add	sp, #108	@ 0x6c
 800b7be:	bd30      	pop	{r4, r5, pc}
 800b7c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7c4:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b7c8:	f04f 0300 	mov.w	r3, #0
 800b7cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b7ce:	bf14      	ite	ne
 800b7d0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7d4:	4623      	moveq	r3, r4
 800b7d6:	9302      	str	r3, [sp, #8]
 800b7d8:	9305      	str	r3, [sp, #20]
 800b7da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7de:	9100      	str	r1, [sp, #0]
 800b7e0:	9104      	str	r1, [sp, #16]
 800b7e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b7e6:	4669      	mov	r1, sp
 800b7e8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b7ea:	f000 f94b 	bl	800ba84 <_svfiprintf_r>
 800b7ee:	1c43      	adds	r3, r0, #1
 800b7f0:	bfbc      	itt	lt
 800b7f2:	238b      	movlt	r3, #139	@ 0x8b
 800b7f4:	602b      	strlt	r3, [r5, #0]
 800b7f6:	2c00      	cmp	r4, #0
 800b7f8:	d0e0      	beq.n	800b7bc <_vsniprintf_r+0x16>
 800b7fa:	9b00      	ldr	r3, [sp, #0]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	e7dc      	b.n	800b7bc <_vsniprintf_r+0x16>
	...

0800b804 <vsniprintf>:
 800b804:	b507      	push	{r0, r1, r2, lr}
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	4613      	mov	r3, r2
 800b80a:	460a      	mov	r2, r1
 800b80c:	4601      	mov	r1, r0
 800b80e:	4803      	ldr	r0, [pc, #12]	@ (800b81c <vsniprintf+0x18>)
 800b810:	6800      	ldr	r0, [r0, #0]
 800b812:	f7ff ffc8 	bl	800b7a6 <_vsniprintf_r>
 800b816:	b003      	add	sp, #12
 800b818:	f85d fb04 	ldr.w	pc, [sp], #4
 800b81c:	20000038 	.word	0x20000038

0800b820 <memset>:
 800b820:	4402      	add	r2, r0
 800b822:	4603      	mov	r3, r0
 800b824:	4293      	cmp	r3, r2
 800b826:	d100      	bne.n	800b82a <memset+0xa>
 800b828:	4770      	bx	lr
 800b82a:	f803 1b01 	strb.w	r1, [r3], #1
 800b82e:	e7f9      	b.n	800b824 <memset+0x4>

0800b830 <_close_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d06      	ldr	r5, [pc, #24]	@ (800b84c <_close_r+0x1c>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	602b      	str	r3, [r5, #0]
 800b83c:	f7f7 fa0f 	bl	8002c5e <_close>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_close_r+0x1a>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_close_r+0x1a>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	20000af8 	.word	0x20000af8

0800b850 <_lseek_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	@ (800b870 <_lseek_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f7 fa19 	bl	8002c96 <_lseek>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_lseek_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_lseek_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	20000af8 	.word	0x20000af8

0800b874 <_read_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	@ (800b894 <_read_r+0x20>)
 800b878:	4604      	mov	r4, r0
 800b87a:	4608      	mov	r0, r1
 800b87c:	4611      	mov	r1, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	602a      	str	r2, [r5, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f7f7 f9ce 	bl	8002c24 <_read>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_read_r+0x1e>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_read_r+0x1e>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	20000af8 	.word	0x20000af8

0800b898 <_sbrk_r>:
 800b898:	b538      	push	{r3, r4, r5, lr}
 800b89a:	4d06      	ldr	r5, [pc, #24]	@ (800b8b4 <_sbrk_r+0x1c>)
 800b89c:	2300      	movs	r3, #0
 800b89e:	4604      	mov	r4, r0
 800b8a0:	4608      	mov	r0, r1
 800b8a2:	602b      	str	r3, [r5, #0]
 800b8a4:	f7f7 fa04 	bl	8002cb0 <_sbrk>
 800b8a8:	1c43      	adds	r3, r0, #1
 800b8aa:	d102      	bne.n	800b8b2 <_sbrk_r+0x1a>
 800b8ac:	682b      	ldr	r3, [r5, #0]
 800b8ae:	b103      	cbz	r3, 800b8b2 <_sbrk_r+0x1a>
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	bd38      	pop	{r3, r4, r5, pc}
 800b8b4:	20000af8 	.word	0x20000af8

0800b8b8 <_write_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	@ (800b8d8 <_write_r+0x20>)
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f7f4 ff44 	bl	8000754 <_write>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_write_r+0x1e>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_write_r+0x1e>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20000af8 	.word	0x20000af8

0800b8dc <__errno>:
 800b8dc:	4b01      	ldr	r3, [pc, #4]	@ (800b8e4 <__errno+0x8>)
 800b8de:	6818      	ldr	r0, [r3, #0]
 800b8e0:	4770      	bx	lr
 800b8e2:	bf00      	nop
 800b8e4:	20000038 	.word	0x20000038

0800b8e8 <__libc_init_array>:
 800b8e8:	b570      	push	{r4, r5, r6, lr}
 800b8ea:	4d0d      	ldr	r5, [pc, #52]	@ (800b920 <__libc_init_array+0x38>)
 800b8ec:	4c0d      	ldr	r4, [pc, #52]	@ (800b924 <__libc_init_array+0x3c>)
 800b8ee:	1b64      	subs	r4, r4, r5
 800b8f0:	10a4      	asrs	r4, r4, #2
 800b8f2:	2600      	movs	r6, #0
 800b8f4:	42a6      	cmp	r6, r4
 800b8f6:	d109      	bne.n	800b90c <__libc_init_array+0x24>
 800b8f8:	4d0b      	ldr	r5, [pc, #44]	@ (800b928 <__libc_init_array+0x40>)
 800b8fa:	4c0c      	ldr	r4, [pc, #48]	@ (800b92c <__libc_init_array+0x44>)
 800b8fc:	f000 fc8c 	bl	800c218 <_init>
 800b900:	1b64      	subs	r4, r4, r5
 800b902:	10a4      	asrs	r4, r4, #2
 800b904:	2600      	movs	r6, #0
 800b906:	42a6      	cmp	r6, r4
 800b908:	d105      	bne.n	800b916 <__libc_init_array+0x2e>
 800b90a:	bd70      	pop	{r4, r5, r6, pc}
 800b90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b910:	4798      	blx	r3
 800b912:	3601      	adds	r6, #1
 800b914:	e7ee      	b.n	800b8f4 <__libc_init_array+0xc>
 800b916:	f855 3b04 	ldr.w	r3, [r5], #4
 800b91a:	4798      	blx	r3
 800b91c:	3601      	adds	r6, #1
 800b91e:	e7f2      	b.n	800b906 <__libc_init_array+0x1e>
 800b920:	0800c438 	.word	0x0800c438
 800b924:	0800c438 	.word	0x0800c438
 800b928:	0800c438 	.word	0x0800c438
 800b92c:	0800c43c 	.word	0x0800c43c

0800b930 <__retarget_lock_init_recursive>:
 800b930:	4770      	bx	lr

0800b932 <__retarget_lock_acquire_recursive>:
 800b932:	4770      	bx	lr

0800b934 <__retarget_lock_release_recursive>:
 800b934:	4770      	bx	lr
	...

0800b938 <_free_r>:
 800b938:	b538      	push	{r3, r4, r5, lr}
 800b93a:	4605      	mov	r5, r0
 800b93c:	2900      	cmp	r1, #0
 800b93e:	d041      	beq.n	800b9c4 <_free_r+0x8c>
 800b940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b944:	1f0c      	subs	r4, r1, #4
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfb8      	it	lt
 800b94a:	18e4      	addlt	r4, r4, r3
 800b94c:	f7ff fd30 	bl	800b3b0 <__malloc_lock>
 800b950:	4a1d      	ldr	r2, [pc, #116]	@ (800b9c8 <_free_r+0x90>)
 800b952:	6813      	ldr	r3, [r2, #0]
 800b954:	b933      	cbnz	r3, 800b964 <_free_r+0x2c>
 800b956:	6063      	str	r3, [r4, #4]
 800b958:	6014      	str	r4, [r2, #0]
 800b95a:	4628      	mov	r0, r5
 800b95c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b960:	f7ff bd2c 	b.w	800b3bc <__malloc_unlock>
 800b964:	42a3      	cmp	r3, r4
 800b966:	d908      	bls.n	800b97a <_free_r+0x42>
 800b968:	6820      	ldr	r0, [r4, #0]
 800b96a:	1821      	adds	r1, r4, r0
 800b96c:	428b      	cmp	r3, r1
 800b96e:	bf01      	itttt	eq
 800b970:	6819      	ldreq	r1, [r3, #0]
 800b972:	685b      	ldreq	r3, [r3, #4]
 800b974:	1809      	addeq	r1, r1, r0
 800b976:	6021      	streq	r1, [r4, #0]
 800b978:	e7ed      	b.n	800b956 <_free_r+0x1e>
 800b97a:	461a      	mov	r2, r3
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	b10b      	cbz	r3, 800b984 <_free_r+0x4c>
 800b980:	42a3      	cmp	r3, r4
 800b982:	d9fa      	bls.n	800b97a <_free_r+0x42>
 800b984:	6811      	ldr	r1, [r2, #0]
 800b986:	1850      	adds	r0, r2, r1
 800b988:	42a0      	cmp	r0, r4
 800b98a:	d10b      	bne.n	800b9a4 <_free_r+0x6c>
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	4401      	add	r1, r0
 800b990:	1850      	adds	r0, r2, r1
 800b992:	4283      	cmp	r3, r0
 800b994:	6011      	str	r1, [r2, #0]
 800b996:	d1e0      	bne.n	800b95a <_free_r+0x22>
 800b998:	6818      	ldr	r0, [r3, #0]
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	6053      	str	r3, [r2, #4]
 800b99e:	4408      	add	r0, r1
 800b9a0:	6010      	str	r0, [r2, #0]
 800b9a2:	e7da      	b.n	800b95a <_free_r+0x22>
 800b9a4:	d902      	bls.n	800b9ac <_free_r+0x74>
 800b9a6:	230c      	movs	r3, #12
 800b9a8:	602b      	str	r3, [r5, #0]
 800b9aa:	e7d6      	b.n	800b95a <_free_r+0x22>
 800b9ac:	6820      	ldr	r0, [r4, #0]
 800b9ae:	1821      	adds	r1, r4, r0
 800b9b0:	428b      	cmp	r3, r1
 800b9b2:	bf04      	itt	eq
 800b9b4:	6819      	ldreq	r1, [r3, #0]
 800b9b6:	685b      	ldreq	r3, [r3, #4]
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	bf04      	itt	eq
 800b9bc:	1809      	addeq	r1, r1, r0
 800b9be:	6021      	streq	r1, [r4, #0]
 800b9c0:	6054      	str	r4, [r2, #4]
 800b9c2:	e7ca      	b.n	800b95a <_free_r+0x22>
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	200009b8 	.word	0x200009b8

0800b9cc <__ssputs_r>:
 800b9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d0:	688e      	ldr	r6, [r1, #8]
 800b9d2:	461f      	mov	r7, r3
 800b9d4:	42be      	cmp	r6, r7
 800b9d6:	680b      	ldr	r3, [r1, #0]
 800b9d8:	4682      	mov	sl, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	4690      	mov	r8, r2
 800b9de:	d82d      	bhi.n	800ba3c <__ssputs_r+0x70>
 800b9e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9e8:	d026      	beq.n	800ba38 <__ssputs_r+0x6c>
 800b9ea:	6965      	ldr	r5, [r4, #20]
 800b9ec:	6909      	ldr	r1, [r1, #16]
 800b9ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9f2:	eba3 0901 	sub.w	r9, r3, r1
 800b9f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9fa:	1c7b      	adds	r3, r7, #1
 800b9fc:	444b      	add	r3, r9
 800b9fe:	106d      	asrs	r5, r5, #1
 800ba00:	429d      	cmp	r5, r3
 800ba02:	bf38      	it	cc
 800ba04:	461d      	movcc	r5, r3
 800ba06:	0553      	lsls	r3, r2, #21
 800ba08:	d527      	bpl.n	800ba5a <__ssputs_r+0x8e>
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7ff fc50 	bl	800b2b0 <_malloc_r>
 800ba10:	4606      	mov	r6, r0
 800ba12:	b360      	cbz	r0, 800ba6e <__ssputs_r+0xa2>
 800ba14:	6921      	ldr	r1, [r4, #16]
 800ba16:	464a      	mov	r2, r9
 800ba18:	f000 fbba 	bl	800c190 <memcpy>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	6126      	str	r6, [r4, #16]
 800ba2a:	6165      	str	r5, [r4, #20]
 800ba2c:	444e      	add	r6, r9
 800ba2e:	eba5 0509 	sub.w	r5, r5, r9
 800ba32:	6026      	str	r6, [r4, #0]
 800ba34:	60a5      	str	r5, [r4, #8]
 800ba36:	463e      	mov	r6, r7
 800ba38:	42be      	cmp	r6, r7
 800ba3a:	d900      	bls.n	800ba3e <__ssputs_r+0x72>
 800ba3c:	463e      	mov	r6, r7
 800ba3e:	6820      	ldr	r0, [r4, #0]
 800ba40:	4632      	mov	r2, r6
 800ba42:	4641      	mov	r1, r8
 800ba44:	f000 fb78 	bl	800c138 <memmove>
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	1b9b      	subs	r3, r3, r6
 800ba4c:	60a3      	str	r3, [r4, #8]
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	4433      	add	r3, r6
 800ba52:	6023      	str	r3, [r4, #0]
 800ba54:	2000      	movs	r0, #0
 800ba56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba5a:	462a      	mov	r2, r5
 800ba5c:	f000 fba6 	bl	800c1ac <_realloc_r>
 800ba60:	4606      	mov	r6, r0
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d1e0      	bne.n	800ba28 <__ssputs_r+0x5c>
 800ba66:	6921      	ldr	r1, [r4, #16]
 800ba68:	4650      	mov	r0, sl
 800ba6a:	f7ff ff65 	bl	800b938 <_free_r>
 800ba6e:	230c      	movs	r3, #12
 800ba70:	f8ca 3000 	str.w	r3, [sl]
 800ba74:	89a3      	ldrh	r3, [r4, #12]
 800ba76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba7a:	81a3      	strh	r3, [r4, #12]
 800ba7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba80:	e7e9      	b.n	800ba56 <__ssputs_r+0x8a>
	...

0800ba84 <_svfiprintf_r>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	4698      	mov	r8, r3
 800ba8a:	898b      	ldrh	r3, [r1, #12]
 800ba8c:	061b      	lsls	r3, r3, #24
 800ba8e:	b09d      	sub	sp, #116	@ 0x74
 800ba90:	4607      	mov	r7, r0
 800ba92:	460d      	mov	r5, r1
 800ba94:	4614      	mov	r4, r2
 800ba96:	d510      	bpl.n	800baba <_svfiprintf_r+0x36>
 800ba98:	690b      	ldr	r3, [r1, #16]
 800ba9a:	b973      	cbnz	r3, 800baba <_svfiprintf_r+0x36>
 800ba9c:	2140      	movs	r1, #64	@ 0x40
 800ba9e:	f7ff fc07 	bl	800b2b0 <_malloc_r>
 800baa2:	6028      	str	r0, [r5, #0]
 800baa4:	6128      	str	r0, [r5, #16]
 800baa6:	b930      	cbnz	r0, 800bab6 <_svfiprintf_r+0x32>
 800baa8:	230c      	movs	r3, #12
 800baaa:	603b      	str	r3, [r7, #0]
 800baac:	f04f 30ff 	mov.w	r0, #4294967295
 800bab0:	b01d      	add	sp, #116	@ 0x74
 800bab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab6:	2340      	movs	r3, #64	@ 0x40
 800bab8:	616b      	str	r3, [r5, #20]
 800baba:	2300      	movs	r3, #0
 800babc:	9309      	str	r3, [sp, #36]	@ 0x24
 800babe:	2320      	movs	r3, #32
 800bac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bac4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bac8:	2330      	movs	r3, #48	@ 0x30
 800baca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc68 <_svfiprintf_r+0x1e4>
 800bace:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bad2:	f04f 0901 	mov.w	r9, #1
 800bad6:	4623      	mov	r3, r4
 800bad8:	469a      	mov	sl, r3
 800bada:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bade:	b10a      	cbz	r2, 800bae4 <_svfiprintf_r+0x60>
 800bae0:	2a25      	cmp	r2, #37	@ 0x25
 800bae2:	d1f9      	bne.n	800bad8 <_svfiprintf_r+0x54>
 800bae4:	ebba 0b04 	subs.w	fp, sl, r4
 800bae8:	d00b      	beq.n	800bb02 <_svfiprintf_r+0x7e>
 800baea:	465b      	mov	r3, fp
 800baec:	4622      	mov	r2, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	4638      	mov	r0, r7
 800baf2:	f7ff ff6b 	bl	800b9cc <__ssputs_r>
 800baf6:	3001      	adds	r0, #1
 800baf8:	f000 80a7 	beq.w	800bc4a <_svfiprintf_r+0x1c6>
 800bafc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bafe:	445a      	add	r2, fp
 800bb00:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb02:	f89a 3000 	ldrb.w	r3, [sl]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f000 809f 	beq.w	800bc4a <_svfiprintf_r+0x1c6>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb16:	f10a 0a01 	add.w	sl, sl, #1
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	9307      	str	r3, [sp, #28]
 800bb1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb22:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb24:	4654      	mov	r4, sl
 800bb26:	2205      	movs	r2, #5
 800bb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb2c:	484e      	ldr	r0, [pc, #312]	@ (800bc68 <_svfiprintf_r+0x1e4>)
 800bb2e:	f7f4 fb57 	bl	80001e0 <memchr>
 800bb32:	9a04      	ldr	r2, [sp, #16]
 800bb34:	b9d8      	cbnz	r0, 800bb6e <_svfiprintf_r+0xea>
 800bb36:	06d0      	lsls	r0, r2, #27
 800bb38:	bf44      	itt	mi
 800bb3a:	2320      	movmi	r3, #32
 800bb3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb40:	0711      	lsls	r1, r2, #28
 800bb42:	bf44      	itt	mi
 800bb44:	232b      	movmi	r3, #43	@ 0x2b
 800bb46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb4a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb50:	d015      	beq.n	800bb7e <_svfiprintf_r+0xfa>
 800bb52:	9a07      	ldr	r2, [sp, #28]
 800bb54:	4654      	mov	r4, sl
 800bb56:	2000      	movs	r0, #0
 800bb58:	f04f 0c0a 	mov.w	ip, #10
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb62:	3b30      	subs	r3, #48	@ 0x30
 800bb64:	2b09      	cmp	r3, #9
 800bb66:	d94b      	bls.n	800bc00 <_svfiprintf_r+0x17c>
 800bb68:	b1b0      	cbz	r0, 800bb98 <_svfiprintf_r+0x114>
 800bb6a:	9207      	str	r2, [sp, #28]
 800bb6c:	e014      	b.n	800bb98 <_svfiprintf_r+0x114>
 800bb6e:	eba0 0308 	sub.w	r3, r0, r8
 800bb72:	fa09 f303 	lsl.w	r3, r9, r3
 800bb76:	4313      	orrs	r3, r2
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	46a2      	mov	sl, r4
 800bb7c:	e7d2      	b.n	800bb24 <_svfiprintf_r+0xa0>
 800bb7e:	9b03      	ldr	r3, [sp, #12]
 800bb80:	1d19      	adds	r1, r3, #4
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	9103      	str	r1, [sp, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	bfbb      	ittet	lt
 800bb8a:	425b      	neglt	r3, r3
 800bb8c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb90:	9307      	strge	r3, [sp, #28]
 800bb92:	9307      	strlt	r3, [sp, #28]
 800bb94:	bfb8      	it	lt
 800bb96:	9204      	strlt	r2, [sp, #16]
 800bb98:	7823      	ldrb	r3, [r4, #0]
 800bb9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb9c:	d10a      	bne.n	800bbb4 <_svfiprintf_r+0x130>
 800bb9e:	7863      	ldrb	r3, [r4, #1]
 800bba0:	2b2a      	cmp	r3, #42	@ 0x2a
 800bba2:	d132      	bne.n	800bc0a <_svfiprintf_r+0x186>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	1d1a      	adds	r2, r3, #4
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	9203      	str	r2, [sp, #12]
 800bbac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbb0:	3402      	adds	r4, #2
 800bbb2:	9305      	str	r3, [sp, #20]
 800bbb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc78 <_svfiprintf_r+0x1f4>
 800bbb8:	7821      	ldrb	r1, [r4, #0]
 800bbba:	2203      	movs	r2, #3
 800bbbc:	4650      	mov	r0, sl
 800bbbe:	f7f4 fb0f 	bl	80001e0 <memchr>
 800bbc2:	b138      	cbz	r0, 800bbd4 <_svfiprintf_r+0x150>
 800bbc4:	9b04      	ldr	r3, [sp, #16]
 800bbc6:	eba0 000a 	sub.w	r0, r0, sl
 800bbca:	2240      	movs	r2, #64	@ 0x40
 800bbcc:	4082      	lsls	r2, r0
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	3401      	adds	r4, #1
 800bbd2:	9304      	str	r3, [sp, #16]
 800bbd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbd8:	4824      	ldr	r0, [pc, #144]	@ (800bc6c <_svfiprintf_r+0x1e8>)
 800bbda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbde:	2206      	movs	r2, #6
 800bbe0:	f7f4 fafe 	bl	80001e0 <memchr>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d036      	beq.n	800bc56 <_svfiprintf_r+0x1d2>
 800bbe8:	4b21      	ldr	r3, [pc, #132]	@ (800bc70 <_svfiprintf_r+0x1ec>)
 800bbea:	bb1b      	cbnz	r3, 800bc34 <_svfiprintf_r+0x1b0>
 800bbec:	9b03      	ldr	r3, [sp, #12]
 800bbee:	3307      	adds	r3, #7
 800bbf0:	f023 0307 	bic.w	r3, r3, #7
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	9303      	str	r3, [sp, #12]
 800bbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfa:	4433      	add	r3, r6
 800bbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbfe:	e76a      	b.n	800bad6 <_svfiprintf_r+0x52>
 800bc00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc04:	460c      	mov	r4, r1
 800bc06:	2001      	movs	r0, #1
 800bc08:	e7a8      	b.n	800bb5c <_svfiprintf_r+0xd8>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	3401      	adds	r4, #1
 800bc0e:	9305      	str	r3, [sp, #20]
 800bc10:	4619      	mov	r1, r3
 800bc12:	f04f 0c0a 	mov.w	ip, #10
 800bc16:	4620      	mov	r0, r4
 800bc18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc1c:	3a30      	subs	r2, #48	@ 0x30
 800bc1e:	2a09      	cmp	r2, #9
 800bc20:	d903      	bls.n	800bc2a <_svfiprintf_r+0x1a6>
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d0c6      	beq.n	800bbb4 <_svfiprintf_r+0x130>
 800bc26:	9105      	str	r1, [sp, #20]
 800bc28:	e7c4      	b.n	800bbb4 <_svfiprintf_r+0x130>
 800bc2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc2e:	4604      	mov	r4, r0
 800bc30:	2301      	movs	r3, #1
 800bc32:	e7f0      	b.n	800bc16 <_svfiprintf_r+0x192>
 800bc34:	ab03      	add	r3, sp, #12
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	462a      	mov	r2, r5
 800bc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc74 <_svfiprintf_r+0x1f0>)
 800bc3c:	a904      	add	r1, sp, #16
 800bc3e:	4638      	mov	r0, r7
 800bc40:	f3af 8000 	nop.w
 800bc44:	1c42      	adds	r2, r0, #1
 800bc46:	4606      	mov	r6, r0
 800bc48:	d1d6      	bne.n	800bbf8 <_svfiprintf_r+0x174>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	065b      	lsls	r3, r3, #25
 800bc4e:	f53f af2d 	bmi.w	800baac <_svfiprintf_r+0x28>
 800bc52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc54:	e72c      	b.n	800bab0 <_svfiprintf_r+0x2c>
 800bc56:	ab03      	add	r3, sp, #12
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	462a      	mov	r2, r5
 800bc5c:	4b05      	ldr	r3, [pc, #20]	@ (800bc74 <_svfiprintf_r+0x1f0>)
 800bc5e:	a904      	add	r1, sp, #16
 800bc60:	4638      	mov	r0, r7
 800bc62:	f000 f879 	bl	800bd58 <_printf_i>
 800bc66:	e7ed      	b.n	800bc44 <_svfiprintf_r+0x1c0>
 800bc68:	0800c3fc 	.word	0x0800c3fc
 800bc6c:	0800c406 	.word	0x0800c406
 800bc70:	00000000 	.word	0x00000000
 800bc74:	0800b9cd 	.word	0x0800b9cd
 800bc78:	0800c402 	.word	0x0800c402

0800bc7c <_printf_common>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	4616      	mov	r6, r2
 800bc82:	4698      	mov	r8, r3
 800bc84:	688a      	ldr	r2, [r1, #8]
 800bc86:	690b      	ldr	r3, [r1, #16]
 800bc88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	bfb8      	it	lt
 800bc90:	4613      	movlt	r3, r2
 800bc92:	6033      	str	r3, [r6, #0]
 800bc94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bc98:	4607      	mov	r7, r0
 800bc9a:	460c      	mov	r4, r1
 800bc9c:	b10a      	cbz	r2, 800bca2 <_printf_common+0x26>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	6033      	str	r3, [r6, #0]
 800bca2:	6823      	ldr	r3, [r4, #0]
 800bca4:	0699      	lsls	r1, r3, #26
 800bca6:	bf42      	ittt	mi
 800bca8:	6833      	ldrmi	r3, [r6, #0]
 800bcaa:	3302      	addmi	r3, #2
 800bcac:	6033      	strmi	r3, [r6, #0]
 800bcae:	6825      	ldr	r5, [r4, #0]
 800bcb0:	f015 0506 	ands.w	r5, r5, #6
 800bcb4:	d106      	bne.n	800bcc4 <_printf_common+0x48>
 800bcb6:	f104 0a19 	add.w	sl, r4, #25
 800bcba:	68e3      	ldr	r3, [r4, #12]
 800bcbc:	6832      	ldr	r2, [r6, #0]
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	42ab      	cmp	r3, r5
 800bcc2:	dc26      	bgt.n	800bd12 <_printf_common+0x96>
 800bcc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bcc8:	6822      	ldr	r2, [r4, #0]
 800bcca:	3b00      	subs	r3, #0
 800bccc:	bf18      	it	ne
 800bcce:	2301      	movne	r3, #1
 800bcd0:	0692      	lsls	r2, r2, #26
 800bcd2:	d42b      	bmi.n	800bd2c <_printf_common+0xb0>
 800bcd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bcd8:	4641      	mov	r1, r8
 800bcda:	4638      	mov	r0, r7
 800bcdc:	47c8      	blx	r9
 800bcde:	3001      	adds	r0, #1
 800bce0:	d01e      	beq.n	800bd20 <_printf_common+0xa4>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	6922      	ldr	r2, [r4, #16]
 800bce6:	f003 0306 	and.w	r3, r3, #6
 800bcea:	2b04      	cmp	r3, #4
 800bcec:	bf02      	ittt	eq
 800bcee:	68e5      	ldreq	r5, [r4, #12]
 800bcf0:	6833      	ldreq	r3, [r6, #0]
 800bcf2:	1aed      	subeq	r5, r5, r3
 800bcf4:	68a3      	ldr	r3, [r4, #8]
 800bcf6:	bf0c      	ite	eq
 800bcf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcfc:	2500      	movne	r5, #0
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bfc4      	itt	gt
 800bd02:	1a9b      	subgt	r3, r3, r2
 800bd04:	18ed      	addgt	r5, r5, r3
 800bd06:	2600      	movs	r6, #0
 800bd08:	341a      	adds	r4, #26
 800bd0a:	42b5      	cmp	r5, r6
 800bd0c:	d11a      	bne.n	800bd44 <_printf_common+0xc8>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	e008      	b.n	800bd24 <_printf_common+0xa8>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4652      	mov	r2, sl
 800bd16:	4641      	mov	r1, r8
 800bd18:	4638      	mov	r0, r7
 800bd1a:	47c8      	blx	r9
 800bd1c:	3001      	adds	r0, #1
 800bd1e:	d103      	bne.n	800bd28 <_printf_common+0xac>
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd28:	3501      	adds	r5, #1
 800bd2a:	e7c6      	b.n	800bcba <_printf_common+0x3e>
 800bd2c:	18e1      	adds	r1, r4, r3
 800bd2e:	1c5a      	adds	r2, r3, #1
 800bd30:	2030      	movs	r0, #48	@ 0x30
 800bd32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bd36:	4422      	add	r2, r4
 800bd38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bd3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bd40:	3302      	adds	r3, #2
 800bd42:	e7c7      	b.n	800bcd4 <_printf_common+0x58>
 800bd44:	2301      	movs	r3, #1
 800bd46:	4622      	mov	r2, r4
 800bd48:	4641      	mov	r1, r8
 800bd4a:	4638      	mov	r0, r7
 800bd4c:	47c8      	blx	r9
 800bd4e:	3001      	adds	r0, #1
 800bd50:	d0e6      	beq.n	800bd20 <_printf_common+0xa4>
 800bd52:	3601      	adds	r6, #1
 800bd54:	e7d9      	b.n	800bd0a <_printf_common+0x8e>
	...

0800bd58 <_printf_i>:
 800bd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd5c:	7e0f      	ldrb	r7, [r1, #24]
 800bd5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bd60:	2f78      	cmp	r7, #120	@ 0x78
 800bd62:	4691      	mov	r9, r2
 800bd64:	4680      	mov	r8, r0
 800bd66:	460c      	mov	r4, r1
 800bd68:	469a      	mov	sl, r3
 800bd6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bd6e:	d807      	bhi.n	800bd80 <_printf_i+0x28>
 800bd70:	2f62      	cmp	r7, #98	@ 0x62
 800bd72:	d80a      	bhi.n	800bd8a <_printf_i+0x32>
 800bd74:	2f00      	cmp	r7, #0
 800bd76:	f000 80d1 	beq.w	800bf1c <_printf_i+0x1c4>
 800bd7a:	2f58      	cmp	r7, #88	@ 0x58
 800bd7c:	f000 80b8 	beq.w	800bef0 <_printf_i+0x198>
 800bd80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bd88:	e03a      	b.n	800be00 <_printf_i+0xa8>
 800bd8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bd8e:	2b15      	cmp	r3, #21
 800bd90:	d8f6      	bhi.n	800bd80 <_printf_i+0x28>
 800bd92:	a101      	add	r1, pc, #4	@ (adr r1, 800bd98 <_printf_i+0x40>)
 800bd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd98:	0800bdf1 	.word	0x0800bdf1
 800bd9c:	0800be05 	.word	0x0800be05
 800bda0:	0800bd81 	.word	0x0800bd81
 800bda4:	0800bd81 	.word	0x0800bd81
 800bda8:	0800bd81 	.word	0x0800bd81
 800bdac:	0800bd81 	.word	0x0800bd81
 800bdb0:	0800be05 	.word	0x0800be05
 800bdb4:	0800bd81 	.word	0x0800bd81
 800bdb8:	0800bd81 	.word	0x0800bd81
 800bdbc:	0800bd81 	.word	0x0800bd81
 800bdc0:	0800bd81 	.word	0x0800bd81
 800bdc4:	0800bf03 	.word	0x0800bf03
 800bdc8:	0800be2f 	.word	0x0800be2f
 800bdcc:	0800bebd 	.word	0x0800bebd
 800bdd0:	0800bd81 	.word	0x0800bd81
 800bdd4:	0800bd81 	.word	0x0800bd81
 800bdd8:	0800bf25 	.word	0x0800bf25
 800bddc:	0800bd81 	.word	0x0800bd81
 800bde0:	0800be2f 	.word	0x0800be2f
 800bde4:	0800bd81 	.word	0x0800bd81
 800bde8:	0800bd81 	.word	0x0800bd81
 800bdec:	0800bec5 	.word	0x0800bec5
 800bdf0:	6833      	ldr	r3, [r6, #0]
 800bdf2:	1d1a      	adds	r2, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6032      	str	r2, [r6, #0]
 800bdf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bdfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800be00:	2301      	movs	r3, #1
 800be02:	e09c      	b.n	800bf3e <_printf_i+0x1e6>
 800be04:	6833      	ldr	r3, [r6, #0]
 800be06:	6820      	ldr	r0, [r4, #0]
 800be08:	1d19      	adds	r1, r3, #4
 800be0a:	6031      	str	r1, [r6, #0]
 800be0c:	0606      	lsls	r6, r0, #24
 800be0e:	d501      	bpl.n	800be14 <_printf_i+0xbc>
 800be10:	681d      	ldr	r5, [r3, #0]
 800be12:	e003      	b.n	800be1c <_printf_i+0xc4>
 800be14:	0645      	lsls	r5, r0, #25
 800be16:	d5fb      	bpl.n	800be10 <_printf_i+0xb8>
 800be18:	f9b3 5000 	ldrsh.w	r5, [r3]
 800be1c:	2d00      	cmp	r5, #0
 800be1e:	da03      	bge.n	800be28 <_printf_i+0xd0>
 800be20:	232d      	movs	r3, #45	@ 0x2d
 800be22:	426d      	negs	r5, r5
 800be24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be28:	4858      	ldr	r0, [pc, #352]	@ (800bf8c <_printf_i+0x234>)
 800be2a:	230a      	movs	r3, #10
 800be2c:	e011      	b.n	800be52 <_printf_i+0xfa>
 800be2e:	6821      	ldr	r1, [r4, #0]
 800be30:	6833      	ldr	r3, [r6, #0]
 800be32:	0608      	lsls	r0, r1, #24
 800be34:	f853 5b04 	ldr.w	r5, [r3], #4
 800be38:	d402      	bmi.n	800be40 <_printf_i+0xe8>
 800be3a:	0649      	lsls	r1, r1, #25
 800be3c:	bf48      	it	mi
 800be3e:	b2ad      	uxthmi	r5, r5
 800be40:	2f6f      	cmp	r7, #111	@ 0x6f
 800be42:	4852      	ldr	r0, [pc, #328]	@ (800bf8c <_printf_i+0x234>)
 800be44:	6033      	str	r3, [r6, #0]
 800be46:	bf14      	ite	ne
 800be48:	230a      	movne	r3, #10
 800be4a:	2308      	moveq	r3, #8
 800be4c:	2100      	movs	r1, #0
 800be4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800be52:	6866      	ldr	r6, [r4, #4]
 800be54:	60a6      	str	r6, [r4, #8]
 800be56:	2e00      	cmp	r6, #0
 800be58:	db05      	blt.n	800be66 <_printf_i+0x10e>
 800be5a:	6821      	ldr	r1, [r4, #0]
 800be5c:	432e      	orrs	r6, r5
 800be5e:	f021 0104 	bic.w	r1, r1, #4
 800be62:	6021      	str	r1, [r4, #0]
 800be64:	d04b      	beq.n	800befe <_printf_i+0x1a6>
 800be66:	4616      	mov	r6, r2
 800be68:	fbb5 f1f3 	udiv	r1, r5, r3
 800be6c:	fb03 5711 	mls	r7, r3, r1, r5
 800be70:	5dc7      	ldrb	r7, [r0, r7]
 800be72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be76:	462f      	mov	r7, r5
 800be78:	42bb      	cmp	r3, r7
 800be7a:	460d      	mov	r5, r1
 800be7c:	d9f4      	bls.n	800be68 <_printf_i+0x110>
 800be7e:	2b08      	cmp	r3, #8
 800be80:	d10b      	bne.n	800be9a <_printf_i+0x142>
 800be82:	6823      	ldr	r3, [r4, #0]
 800be84:	07df      	lsls	r7, r3, #31
 800be86:	d508      	bpl.n	800be9a <_printf_i+0x142>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	6861      	ldr	r1, [r4, #4]
 800be8c:	4299      	cmp	r1, r3
 800be8e:	bfde      	ittt	le
 800be90:	2330      	movle	r3, #48	@ 0x30
 800be92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be9a:	1b92      	subs	r2, r2, r6
 800be9c:	6122      	str	r2, [r4, #16]
 800be9e:	f8cd a000 	str.w	sl, [sp]
 800bea2:	464b      	mov	r3, r9
 800bea4:	aa03      	add	r2, sp, #12
 800bea6:	4621      	mov	r1, r4
 800bea8:	4640      	mov	r0, r8
 800beaa:	f7ff fee7 	bl	800bc7c <_printf_common>
 800beae:	3001      	adds	r0, #1
 800beb0:	d14a      	bne.n	800bf48 <_printf_i+0x1f0>
 800beb2:	f04f 30ff 	mov.w	r0, #4294967295
 800beb6:	b004      	add	sp, #16
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	f043 0320 	orr.w	r3, r3, #32
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	4832      	ldr	r0, [pc, #200]	@ (800bf90 <_printf_i+0x238>)
 800bec6:	2778      	movs	r7, #120	@ 0x78
 800bec8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	6831      	ldr	r1, [r6, #0]
 800bed0:	061f      	lsls	r7, r3, #24
 800bed2:	f851 5b04 	ldr.w	r5, [r1], #4
 800bed6:	d402      	bmi.n	800bede <_printf_i+0x186>
 800bed8:	065f      	lsls	r7, r3, #25
 800beda:	bf48      	it	mi
 800bedc:	b2ad      	uxthmi	r5, r5
 800bede:	6031      	str	r1, [r6, #0]
 800bee0:	07d9      	lsls	r1, r3, #31
 800bee2:	bf44      	itt	mi
 800bee4:	f043 0320 	orrmi.w	r3, r3, #32
 800bee8:	6023      	strmi	r3, [r4, #0]
 800beea:	b11d      	cbz	r5, 800bef4 <_printf_i+0x19c>
 800beec:	2310      	movs	r3, #16
 800beee:	e7ad      	b.n	800be4c <_printf_i+0xf4>
 800bef0:	4826      	ldr	r0, [pc, #152]	@ (800bf8c <_printf_i+0x234>)
 800bef2:	e7e9      	b.n	800bec8 <_printf_i+0x170>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	f023 0320 	bic.w	r3, r3, #32
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	e7f6      	b.n	800beec <_printf_i+0x194>
 800befe:	4616      	mov	r6, r2
 800bf00:	e7bd      	b.n	800be7e <_printf_i+0x126>
 800bf02:	6833      	ldr	r3, [r6, #0]
 800bf04:	6825      	ldr	r5, [r4, #0]
 800bf06:	6961      	ldr	r1, [r4, #20]
 800bf08:	1d18      	adds	r0, r3, #4
 800bf0a:	6030      	str	r0, [r6, #0]
 800bf0c:	062e      	lsls	r6, r5, #24
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	d501      	bpl.n	800bf16 <_printf_i+0x1be>
 800bf12:	6019      	str	r1, [r3, #0]
 800bf14:	e002      	b.n	800bf1c <_printf_i+0x1c4>
 800bf16:	0668      	lsls	r0, r5, #25
 800bf18:	d5fb      	bpl.n	800bf12 <_printf_i+0x1ba>
 800bf1a:	8019      	strh	r1, [r3, #0]
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	6123      	str	r3, [r4, #16]
 800bf20:	4616      	mov	r6, r2
 800bf22:	e7bc      	b.n	800be9e <_printf_i+0x146>
 800bf24:	6833      	ldr	r3, [r6, #0]
 800bf26:	1d1a      	adds	r2, r3, #4
 800bf28:	6032      	str	r2, [r6, #0]
 800bf2a:	681e      	ldr	r6, [r3, #0]
 800bf2c:	6862      	ldr	r2, [r4, #4]
 800bf2e:	2100      	movs	r1, #0
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7f4 f955 	bl	80001e0 <memchr>
 800bf36:	b108      	cbz	r0, 800bf3c <_printf_i+0x1e4>
 800bf38:	1b80      	subs	r0, r0, r6
 800bf3a:	6060      	str	r0, [r4, #4]
 800bf3c:	6863      	ldr	r3, [r4, #4]
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	2300      	movs	r3, #0
 800bf42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf46:	e7aa      	b.n	800be9e <_printf_i+0x146>
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	4640      	mov	r0, r8
 800bf50:	47d0      	blx	sl
 800bf52:	3001      	adds	r0, #1
 800bf54:	d0ad      	beq.n	800beb2 <_printf_i+0x15a>
 800bf56:	6823      	ldr	r3, [r4, #0]
 800bf58:	079b      	lsls	r3, r3, #30
 800bf5a:	d413      	bmi.n	800bf84 <_printf_i+0x22c>
 800bf5c:	68e0      	ldr	r0, [r4, #12]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	4298      	cmp	r0, r3
 800bf62:	bfb8      	it	lt
 800bf64:	4618      	movlt	r0, r3
 800bf66:	e7a6      	b.n	800beb6 <_printf_i+0x15e>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	4649      	mov	r1, r9
 800bf6e:	4640      	mov	r0, r8
 800bf70:	47d0      	blx	sl
 800bf72:	3001      	adds	r0, #1
 800bf74:	d09d      	beq.n	800beb2 <_printf_i+0x15a>
 800bf76:	3501      	adds	r5, #1
 800bf78:	68e3      	ldr	r3, [r4, #12]
 800bf7a:	9903      	ldr	r1, [sp, #12]
 800bf7c:	1a5b      	subs	r3, r3, r1
 800bf7e:	42ab      	cmp	r3, r5
 800bf80:	dcf2      	bgt.n	800bf68 <_printf_i+0x210>
 800bf82:	e7eb      	b.n	800bf5c <_printf_i+0x204>
 800bf84:	2500      	movs	r5, #0
 800bf86:	f104 0619 	add.w	r6, r4, #25
 800bf8a:	e7f5      	b.n	800bf78 <_printf_i+0x220>
 800bf8c:	0800c40d 	.word	0x0800c40d
 800bf90:	0800c41e 	.word	0x0800c41e

0800bf94 <__sflush_r>:
 800bf94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9c:	0716      	lsls	r6, r2, #28
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	460c      	mov	r4, r1
 800bfa2:	d454      	bmi.n	800c04e <__sflush_r+0xba>
 800bfa4:	684b      	ldr	r3, [r1, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	dc02      	bgt.n	800bfb0 <__sflush_r+0x1c>
 800bfaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	dd48      	ble.n	800c042 <__sflush_r+0xae>
 800bfb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfb2:	2e00      	cmp	r6, #0
 800bfb4:	d045      	beq.n	800c042 <__sflush_r+0xae>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bfbc:	682f      	ldr	r7, [r5, #0]
 800bfbe:	6a21      	ldr	r1, [r4, #32]
 800bfc0:	602b      	str	r3, [r5, #0]
 800bfc2:	d030      	beq.n	800c026 <__sflush_r+0x92>
 800bfc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bfc6:	89a3      	ldrh	r3, [r4, #12]
 800bfc8:	0759      	lsls	r1, r3, #29
 800bfca:	d505      	bpl.n	800bfd8 <__sflush_r+0x44>
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	1ad2      	subs	r2, r2, r3
 800bfd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfd2:	b10b      	cbz	r3, 800bfd8 <__sflush_r+0x44>
 800bfd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bfd6:	1ad2      	subs	r2, r2, r3
 800bfd8:	2300      	movs	r3, #0
 800bfda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfdc:	6a21      	ldr	r1, [r4, #32]
 800bfde:	4628      	mov	r0, r5
 800bfe0:	47b0      	blx	r6
 800bfe2:	1c43      	adds	r3, r0, #1
 800bfe4:	89a3      	ldrh	r3, [r4, #12]
 800bfe6:	d106      	bne.n	800bff6 <__sflush_r+0x62>
 800bfe8:	6829      	ldr	r1, [r5, #0]
 800bfea:	291d      	cmp	r1, #29
 800bfec:	d82b      	bhi.n	800c046 <__sflush_r+0xb2>
 800bfee:	4a2a      	ldr	r2, [pc, #168]	@ (800c098 <__sflush_r+0x104>)
 800bff0:	40ca      	lsrs	r2, r1
 800bff2:	07d6      	lsls	r6, r2, #31
 800bff4:	d527      	bpl.n	800c046 <__sflush_r+0xb2>
 800bff6:	2200      	movs	r2, #0
 800bff8:	6062      	str	r2, [r4, #4]
 800bffa:	04d9      	lsls	r1, r3, #19
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	6022      	str	r2, [r4, #0]
 800c000:	d504      	bpl.n	800c00c <__sflush_r+0x78>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	d101      	bne.n	800c00a <__sflush_r+0x76>
 800c006:	682b      	ldr	r3, [r5, #0]
 800c008:	b903      	cbnz	r3, 800c00c <__sflush_r+0x78>
 800c00a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c00c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c00e:	602f      	str	r7, [r5, #0]
 800c010:	b1b9      	cbz	r1, 800c042 <__sflush_r+0xae>
 800c012:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c016:	4299      	cmp	r1, r3
 800c018:	d002      	beq.n	800c020 <__sflush_r+0x8c>
 800c01a:	4628      	mov	r0, r5
 800c01c:	f7ff fc8c 	bl	800b938 <_free_r>
 800c020:	2300      	movs	r3, #0
 800c022:	6363      	str	r3, [r4, #52]	@ 0x34
 800c024:	e00d      	b.n	800c042 <__sflush_r+0xae>
 800c026:	2301      	movs	r3, #1
 800c028:	4628      	mov	r0, r5
 800c02a:	47b0      	blx	r6
 800c02c:	4602      	mov	r2, r0
 800c02e:	1c50      	adds	r0, r2, #1
 800c030:	d1c9      	bne.n	800bfc6 <__sflush_r+0x32>
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d0c6      	beq.n	800bfc6 <__sflush_r+0x32>
 800c038:	2b1d      	cmp	r3, #29
 800c03a:	d001      	beq.n	800c040 <__sflush_r+0xac>
 800c03c:	2b16      	cmp	r3, #22
 800c03e:	d11e      	bne.n	800c07e <__sflush_r+0xea>
 800c040:	602f      	str	r7, [r5, #0]
 800c042:	2000      	movs	r0, #0
 800c044:	e022      	b.n	800c08c <__sflush_r+0xf8>
 800c046:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c04a:	b21b      	sxth	r3, r3
 800c04c:	e01b      	b.n	800c086 <__sflush_r+0xf2>
 800c04e:	690f      	ldr	r7, [r1, #16]
 800c050:	2f00      	cmp	r7, #0
 800c052:	d0f6      	beq.n	800c042 <__sflush_r+0xae>
 800c054:	0793      	lsls	r3, r2, #30
 800c056:	680e      	ldr	r6, [r1, #0]
 800c058:	bf08      	it	eq
 800c05a:	694b      	ldreq	r3, [r1, #20]
 800c05c:	600f      	str	r7, [r1, #0]
 800c05e:	bf18      	it	ne
 800c060:	2300      	movne	r3, #0
 800c062:	eba6 0807 	sub.w	r8, r6, r7
 800c066:	608b      	str	r3, [r1, #8]
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	dde9      	ble.n	800c042 <__sflush_r+0xae>
 800c06e:	6a21      	ldr	r1, [r4, #32]
 800c070:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c072:	4643      	mov	r3, r8
 800c074:	463a      	mov	r2, r7
 800c076:	4628      	mov	r0, r5
 800c078:	47b0      	blx	r6
 800c07a:	2800      	cmp	r0, #0
 800c07c:	dc08      	bgt.n	800c090 <__sflush_r+0xfc>
 800c07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	f04f 30ff 	mov.w	r0, #4294967295
 800c08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c090:	4407      	add	r7, r0
 800c092:	eba8 0800 	sub.w	r8, r8, r0
 800c096:	e7e7      	b.n	800c068 <__sflush_r+0xd4>
 800c098:	20400001 	.word	0x20400001

0800c09c <_fflush_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	690b      	ldr	r3, [r1, #16]
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	b913      	cbnz	r3, 800c0ac <_fflush_r+0x10>
 800c0a6:	2500      	movs	r5, #0
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	bd38      	pop	{r3, r4, r5, pc}
 800c0ac:	b118      	cbz	r0, 800c0b6 <_fflush_r+0x1a>
 800c0ae:	6a03      	ldr	r3, [r0, #32]
 800c0b0:	b90b      	cbnz	r3, 800c0b6 <_fflush_r+0x1a>
 800c0b2:	f7ff fa15 	bl	800b4e0 <__sinit>
 800c0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d0f3      	beq.n	800c0a6 <_fflush_r+0xa>
 800c0be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0c0:	07d0      	lsls	r0, r2, #31
 800c0c2:	d404      	bmi.n	800c0ce <_fflush_r+0x32>
 800c0c4:	0599      	lsls	r1, r3, #22
 800c0c6:	d402      	bmi.n	800c0ce <_fflush_r+0x32>
 800c0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ca:	f7ff fc32 	bl	800b932 <__retarget_lock_acquire_recursive>
 800c0ce:	4628      	mov	r0, r5
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	f7ff ff5f 	bl	800bf94 <__sflush_r>
 800c0d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0d8:	07da      	lsls	r2, r3, #31
 800c0da:	4605      	mov	r5, r0
 800c0dc:	d4e4      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0de:	89a3      	ldrh	r3, [r4, #12]
 800c0e0:	059b      	lsls	r3, r3, #22
 800c0e2:	d4e1      	bmi.n	800c0a8 <_fflush_r+0xc>
 800c0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0e6:	f7ff fc25 	bl	800b934 <__retarget_lock_release_recursive>
 800c0ea:	e7dd      	b.n	800c0a8 <_fflush_r+0xc>

0800c0ec <__swhatbuf_r>:
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	460c      	mov	r4, r1
 800c0f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0f4:	2900      	cmp	r1, #0
 800c0f6:	b096      	sub	sp, #88	@ 0x58
 800c0f8:	4615      	mov	r5, r2
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	da0d      	bge.n	800c11a <__swhatbuf_r+0x2e>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c104:	f04f 0100 	mov.w	r1, #0
 800c108:	bf14      	ite	ne
 800c10a:	2340      	movne	r3, #64	@ 0x40
 800c10c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c110:	2000      	movs	r0, #0
 800c112:	6031      	str	r1, [r6, #0]
 800c114:	602b      	str	r3, [r5, #0]
 800c116:	b016      	add	sp, #88	@ 0x58
 800c118:	bd70      	pop	{r4, r5, r6, pc}
 800c11a:	466a      	mov	r2, sp
 800c11c:	f000 f826 	bl	800c16c <_fstat_r>
 800c120:	2800      	cmp	r0, #0
 800c122:	dbec      	blt.n	800c0fe <__swhatbuf_r+0x12>
 800c124:	9901      	ldr	r1, [sp, #4]
 800c126:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c12a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c12e:	4259      	negs	r1, r3
 800c130:	4159      	adcs	r1, r3
 800c132:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c136:	e7eb      	b.n	800c110 <__swhatbuf_r+0x24>

0800c138 <memmove>:
 800c138:	4288      	cmp	r0, r1
 800c13a:	b510      	push	{r4, lr}
 800c13c:	eb01 0402 	add.w	r4, r1, r2
 800c140:	d902      	bls.n	800c148 <memmove+0x10>
 800c142:	4284      	cmp	r4, r0
 800c144:	4623      	mov	r3, r4
 800c146:	d807      	bhi.n	800c158 <memmove+0x20>
 800c148:	1e43      	subs	r3, r0, #1
 800c14a:	42a1      	cmp	r1, r4
 800c14c:	d008      	beq.n	800c160 <memmove+0x28>
 800c14e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c152:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c156:	e7f8      	b.n	800c14a <memmove+0x12>
 800c158:	4402      	add	r2, r0
 800c15a:	4601      	mov	r1, r0
 800c15c:	428a      	cmp	r2, r1
 800c15e:	d100      	bne.n	800c162 <memmove+0x2a>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c16a:	e7f7      	b.n	800c15c <memmove+0x24>

0800c16c <_fstat_r>:
 800c16c:	b538      	push	{r3, r4, r5, lr}
 800c16e:	4d07      	ldr	r5, [pc, #28]	@ (800c18c <_fstat_r+0x20>)
 800c170:	2300      	movs	r3, #0
 800c172:	4604      	mov	r4, r0
 800c174:	4608      	mov	r0, r1
 800c176:	4611      	mov	r1, r2
 800c178:	602b      	str	r3, [r5, #0]
 800c17a:	f7f6 fd7c 	bl	8002c76 <_fstat>
 800c17e:	1c43      	adds	r3, r0, #1
 800c180:	d102      	bne.n	800c188 <_fstat_r+0x1c>
 800c182:	682b      	ldr	r3, [r5, #0]
 800c184:	b103      	cbz	r3, 800c188 <_fstat_r+0x1c>
 800c186:	6023      	str	r3, [r4, #0]
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	bf00      	nop
 800c18c:	20000af8 	.word	0x20000af8

0800c190 <memcpy>:
 800c190:	440a      	add	r2, r1
 800c192:	4291      	cmp	r1, r2
 800c194:	f100 33ff 	add.w	r3, r0, #4294967295
 800c198:	d100      	bne.n	800c19c <memcpy+0xc>
 800c19a:	4770      	bx	lr
 800c19c:	b510      	push	{r4, lr}
 800c19e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1a6:	4291      	cmp	r1, r2
 800c1a8:	d1f9      	bne.n	800c19e <memcpy+0xe>
 800c1aa:	bd10      	pop	{r4, pc}

0800c1ac <_realloc_r>:
 800c1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4614      	mov	r4, r2
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	b921      	cbnz	r1, 800c1c2 <_realloc_r+0x16>
 800c1b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c1bc:	4611      	mov	r1, r2
 800c1be:	f7ff b877 	b.w	800b2b0 <_malloc_r>
 800c1c2:	b92a      	cbnz	r2, 800c1d0 <_realloc_r+0x24>
 800c1c4:	f7ff fbb8 	bl	800b938 <_free_r>
 800c1c8:	4625      	mov	r5, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	f000 f81a 	bl	800c208 <_malloc_usable_size_r>
 800c1d4:	4284      	cmp	r4, r0
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	d802      	bhi.n	800c1e0 <_realloc_r+0x34>
 800c1da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1de:	d8f4      	bhi.n	800c1ca <_realloc_r+0x1e>
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4638      	mov	r0, r7
 800c1e4:	f7ff f864 	bl	800b2b0 <_malloc_r>
 800c1e8:	4680      	mov	r8, r0
 800c1ea:	b908      	cbnz	r0, 800c1f0 <_realloc_r+0x44>
 800c1ec:	4645      	mov	r5, r8
 800c1ee:	e7ec      	b.n	800c1ca <_realloc_r+0x1e>
 800c1f0:	42b4      	cmp	r4, r6
 800c1f2:	4622      	mov	r2, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	bf28      	it	cs
 800c1f8:	4632      	movcs	r2, r6
 800c1fa:	f7ff ffc9 	bl	800c190 <memcpy>
 800c1fe:	4629      	mov	r1, r5
 800c200:	4638      	mov	r0, r7
 800c202:	f7ff fb99 	bl	800b938 <_free_r>
 800c206:	e7f1      	b.n	800c1ec <_realloc_r+0x40>

0800c208 <_malloc_usable_size_r>:
 800c208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c20c:	1f18      	subs	r0, r3, #4
 800c20e:	2b00      	cmp	r3, #0
 800c210:	bfbc      	itt	lt
 800c212:	580b      	ldrlt	r3, [r1, r0]
 800c214:	18c0      	addlt	r0, r0, r3
 800c216:	4770      	bx	lr

0800c218 <_init>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	bf00      	nop
 800c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21e:	bc08      	pop	{r3}
 800c220:	469e      	mov	lr, r3
 800c222:	4770      	bx	lr

0800c224 <_fini>:
 800c224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c226:	bf00      	nop
 800c228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c22a:	bc08      	pop	{r3}
 800c22c:	469e      	mov	lr, r3
 800c22e:	4770      	bx	lr

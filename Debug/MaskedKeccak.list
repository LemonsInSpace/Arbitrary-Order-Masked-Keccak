
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0800bd80  0800bd80  0000cd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf80  0800bf80  0000d088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf80  0800bf80  0000cf80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf88  0800bf88  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf88  0800bf88  0000cf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf8c  0800bf8c  0000cf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800bf90  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b789  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048cd  00000000  00000000  00028841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002d110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001101  00000000  00000000  0002e750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263c9  00000000  00000000  0002f851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd32  00000000  00000000  00055c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0b86  00000000  00000000  0007594c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001464d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006488  00000000  00000000  00146518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0014c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd64 	.word	0x0800bd64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800bd64 	.word	0x0800bd64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <debug_log>:
#include <stdio.h>
#include <string.h>
#include "debug_log.h"
extern UART_HandleTypeDef huart2;

void debug_log(const char *fmt, ...) {
 80005ac:	b40f      	push	{r0, r1, r2, r3}
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b0a2      	sub	sp, #136	@ 0x88
 80005b2:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;

    va_start(args, fmt);
 80005b4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80005b8:	603b      	str	r3, [r7, #0]
    vsnprintf(buf, sizeof(buf) - 3, fmt, args);  // Leave space for "\r\n\0"
 80005ba:	1d38      	adds	r0, r7, #4
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80005c2:	217d      	movs	r1, #125	@ 0x7d
 80005c4:	f00a fec4 	bl	800b350 <vsniprintf>
    va_end(args);

    // Append "\r\n" if there's room
    size_t len = strlen(buf);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe00 	bl	80001d0 <strlen>
 80005d0:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    if (len < sizeof(buf) - 2) {
 80005d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005d8:	2b7d      	cmp	r3, #125	@ 0x7d
 80005da:	d819      	bhi.n	8000610 <debug_log+0x64>
        buf[len++] = '\r';
 80005dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005e0:	1c5a      	adds	r2, r3, #1
 80005e2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80005e6:	3388      	adds	r3, #136	@ 0x88
 80005e8:	443b      	add	r3, r7
 80005ea:	220d      	movs	r2, #13
 80005ec:	f803 2c84 	strb.w	r2, [r3, #-132]
        buf[len++] = '\n';
 80005f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80005f4:	1c5a      	adds	r2, r3, #1
 80005f6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80005fa:	3388      	adds	r3, #136	@ 0x88
 80005fc:	443b      	add	r3, r7
 80005fe:	220a      	movs	r2, #10
 8000600:	f803 2c84 	strb.w	r2, [r3, #-132]
        buf[len] = '\0';
 8000604:	1d3a      	adds	r2, r7, #4
 8000606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800060a:	4413      	add	r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8000610:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000614:	b29a      	uxth	r2, r3
 8000616:	1d39      	adds	r1, r7, #4
 8000618:	f04f 33ff 	mov.w	r3, #4294967295
 800061c:	4804      	ldr	r0, [pc, #16]	@ (8000630 <debug_log+0x84>)
 800061e:	f006 fb08 	bl	8006c32 <HAL_UART_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3788      	adds	r7, #136	@ 0x88
 8000626:	46bd      	mov	sp, r7
 8000628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800062c:	b004      	add	sp, #16
 800062e:	4770      	bx	lr
 8000630:	200001a8 	.word	0x200001a8

08000634 <blink_dot>:
#include "main.h"  // for LD5_Pin

#define LED_PORT GPIOD
#define LED_PIN  LD5_Pin

static void blink_dot(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063e:	4808      	ldr	r0, [pc, #32]	@ (8000660 <blink_dot+0x2c>)
 8000640:	f002 fc92 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000644:	20c8      	movs	r0, #200	@ 0xc8
 8000646:	f002 f9bd 	bl	80029c4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000650:	4803      	ldr	r0, [pc, #12]	@ (8000660 <blink_dot+0x2c>)
 8000652:	f002 fc89 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000656:	20c8      	movs	r0, #200	@ 0xc8
 8000658:	f002 f9b4 	bl	80029c4 <HAL_Delay>
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020c00 	.word	0x40020c00

08000664 <blink_dash>:

static void blink_dash(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800066e:	4809      	ldr	r0, [pc, #36]	@ (8000694 <blink_dash+0x30>)
 8000670:	f002 fc7a 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_Delay(600);
 8000674:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8000678:	f002 f9a4 	bl	80029c4 <HAL_Delay>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000682:	4804      	ldr	r0, [pc, #16]	@ (8000694 <blink_dash+0x30>)
 8000684:	f002 fc70 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_Delay(200);
 8000688:	20c8      	movs	r0, #200	@ 0xc8
 800068a:	f002 f99b 	bl	80029c4 <HAL_Delay>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40020c00 	.word	0x40020c00

08000698 <handle_rng_failure>:

void handle_rng_failure(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
    debug_log("ERROR: RNG failure detected — halting.");
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <handle_rng_failure+0x50>)
 800069e:	f7ff ff85 	bl	80005ac <debug_log>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a2:	b672      	cpsid	i
}
 80006a4:	bf00      	nop

    __disable_irq();  // Stop all interrupts

    while (1) {
        // S: ...
        blink_dot(); blink_dot(); blink_dot();
 80006a6:	f7ff ffc5 	bl	8000634 <blink_dot>
 80006aa:	f7ff ffc3 	bl	8000634 <blink_dot>
 80006ae:	f7ff ffc1 	bl	8000634 <blink_dot>

        HAL_Delay(600);  // Gap between letters
 80006b2:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006b6:	f002 f985 	bl	80029c4 <HAL_Delay>

        // O: ---
        blink_dash(); blink_dash(); blink_dash();
 80006ba:	f7ff ffd3 	bl	8000664 <blink_dash>
 80006be:	f7ff ffd1 	bl	8000664 <blink_dash>
 80006c2:	f7ff ffcf 	bl	8000664 <blink_dash>

        HAL_Delay(600);  // Gap between letters
 80006c6:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80006ca:	f002 f97b 	bl	80029c4 <HAL_Delay>

        // S: ...
        blink_dot(); blink_dot(); blink_dot();
 80006ce:	f7ff ffb1 	bl	8000634 <blink_dot>
 80006d2:	f7ff ffaf 	bl	8000634 <blink_dot>
 80006d6:	f7ff ffad 	bl	8000634 <blink_dot>

        HAL_Delay(1400);  // Gap between words (SOS loop)
 80006da:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80006de:	f002 f971 	bl	80029c4 <HAL_Delay>
        blink_dot(); blink_dot(); blink_dot();
 80006e2:	bf00      	nop
 80006e4:	e7df      	b.n	80006a6 <handle_rng_failure+0xe>
 80006e6:	bf00      	nop
 80006e8:	0800bd80 	.word	0x0800bd80

080006ec <get_random64>:
 *
 * This function pulls two 32-bit words from the RNG and combines them
 * into a single 64-bit result. Used for generating random shares or
 * randomness matrices in secure masking.
 */
uint64_t get_random64(void) {
 80006ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;

    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	4815      	ldr	r0, [pc, #84]	@ (8000750 <get_random64+0x64>)
 80006fa:	f006 f96b 	bl	80069d4 <HAL_RNG_GenerateRandomNumber>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <get_random64+0x1c>
        handle_rng_failure();  // Trap or log error
 8000704:	f7ff ffc8 	bl	8000698 <handle_rng_failure>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 8000708:	463b      	mov	r3, r7
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	@ (8000750 <get_random64+0x64>)
 800070e:	f006 f961 	bl	80069d4 <HAL_RNG_GenerateRandomNumber>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <get_random64+0x30>
        handle_rng_failure();  // Trap or log error
 8000718:	f7ff ffbe 	bl	8000698 <handle_rng_failure>
    }

    return ((uint64_t)r1 << 32) | r2;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	469a      	mov	sl, r3
 8000722:	4693      	mov	fp, r2
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	4653      	mov	r3, sl
 800072e:	2200      	movs	r2, #0
 8000730:	6839      	ldr	r1, [r7, #0]
 8000732:	2000      	movs	r0, #0
 8000734:	460c      	mov	r4, r1
 8000736:	4605      	mov	r5, r0
 8000738:	ea42 0804 	orr.w	r8, r2, r4
 800073c:	ea43 0905 	orr.w	r9, r3, r5
 8000740:	4642      	mov	r2, r8
 8000742:	464b      	mov	r3, r9
}
 8000744:	4610      	mov	r0, r2
 8000746:	4619      	mov	r1, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000750:	20000140 	.word	0x20000140

08000754 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	68b9      	ldr	r1, [r7, #8]
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <_write+0x28>)
 800076c:	f006 fa61 	bl	8006c32 <HAL_UART_Transmit>
    return len;
 8000770:	687b      	ldr	r3, [r7, #4]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200001a8 	.word	0x200001a8

08000780 <print_hex_inline>:

static const uint8_t test_input[] = {'a', 'b', 'c'};

#define SHAKE_OUTPUT_LEN 64

static void print_hex_inline(const char *label, const uint8_t *data, size_t len) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b0d2      	sub	sp, #328	@ 0x148
 8000784:	af00      	add	r7, sp, #0
 8000786:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800078a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800078e:	6018      	str	r0, [r3, #0]
 8000790:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8000794:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000798:	6019      	str	r1, [r3, #0]
 800079a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800079e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80007a2:	601a      	str	r2, [r3, #0]
    char buf[300] = {0};
 80007a4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80007a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80007ac:	4618      	mov	r0, r3
 80007ae:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80007b2:	461a      	mov	r2, r3
 80007b4:	2100      	movs	r1, #0
 80007b6:	f00a fdd9 	bl	800b36c <memset>
    size_t offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    offset += snprintf(buf + offset, sizeof(buf) - offset, "%s: ", label);
 80007c0:	f107 0214 	add.w	r2, r7, #20
 80007c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007c8:	18d0      	adds	r0, r2, r3
 80007ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007ce:	f5c3 7196 	rsb	r1, r3, #300	@ 0x12c
 80007d2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80007d6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <print_hex_inline+0xec>)
 80007de:	f00a fd0f 	bl	800b200 <sniprintf>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80007ea:	4413      	add	r3, r2
 80007ec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    for (size_t i = 0; i < len && offset < sizeof(buf) - 4; i++) {
 80007f0:	2300      	movs	r3, #0
 80007f2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80007f6:	e020      	b.n	800083a <print_hex_inline+0xba>
        offset += snprintf(buf + offset, sizeof(buf) - offset, "%02X", data[i]);
 80007f8:	f107 0214 	add.w	r2, r7, #20
 80007fc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000800:	18d0      	adds	r0, r2, r3
 8000802:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000806:	f5c3 7196 	rsb	r1, r3, #300	@ 0x12c
 800080a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800080e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000818:	4413      	add	r3, r2
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4a14      	ldr	r2, [pc, #80]	@ (8000870 <print_hex_inline+0xf0>)
 800081e:	f00a fcef 	bl	800b200 <sniprintf>
 8000822:	4603      	mov	r3, r0
 8000824:	461a      	mov	r2, r3
 8000826:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800082a:	4413      	add	r3, r2
 800082c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    for (size_t i = 0; i < len && offset < sizeof(buf) - 4; i++) {
 8000830:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000834:	3301      	adds	r3, #1
 8000836:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800083a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800083e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8000842:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d204      	bcs.n	8000856 <print_hex_inline+0xd6>
 800084c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000850:	f5b3 7f94 	cmp.w	r3, #296	@ 0x128
 8000854:	d3d0      	bcc.n	80007f8 <print_hex_inline+0x78>
    }

    debug_log("%s", buf);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	@ (8000874 <print_hex_inline+0xf4>)
 800085e:	f7ff fea5 	bl	80005ac <debug_log>
}
 8000862:	bf00      	nop
 8000864:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	0800bdac 	.word	0x0800bdac
 8000870:	0800bdb4 	.word	0x0800bdb4
 8000874:	0800bdbc 	.word	0x0800bdbc

08000878 <init_cycle_counter>:

static void init_cycle_counter(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <init_cycle_counter+0x2c>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	4a08      	ldr	r2, [pc, #32]	@ (80008a4 <init_cycle_counter+0x2c>)
 8000882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000886:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <init_cycle_counter+0x30>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a06      	ldr	r2, [pc, #24]	@ (80008a8 <init_cycle_counter+0x30>)
 800088e:	f043 0301 	orr.w	r3, r3, #1
 8000892:	6013      	str	r3, [r2, #0]
    DWT->CYCCNT = 0;
 8000894:	4b04      	ldr	r3, [pc, #16]	@ (80008a8 <init_cycle_counter+0x30>)
 8000896:	2200      	movs	r2, #0
 8000898:	605a      	str	r2, [r3, #4]
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000edf0 	.word	0xe000edf0
 80008a8:	e0001000 	.word	0xe0001000

080008ac <run_all_hash_tests>:


void run_all_hash_tests(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ce      	sub	sp, #312	@ 0x138
 80008b0:	af00      	add	r7, sp, #0
    uint32_t start, end;

    uint8_t out_224[28];
    start = HAL_GetTick();
 80008b2:	f002 f87b 	bl	80029ac <HAL_GetTick>
 80008b6:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_sha3_224(out_224, test_input, sizeof(test_input));
 80008ba:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80008be:	2203      	movs	r2, #3
 80008c0:	495a      	ldr	r1, [pc, #360]	@ (8000a2c <run_all_hash_tests+0x180>)
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 fcfe 	bl	80022c4 <masked_sha3_224>
    end = HAL_GetTick();
 80008c8:	f002 f870 	bl	80029ac <HAL_GetTick>
 80008cc:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHA3-224", out_224, sizeof(out_224));
 80008d0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80008d4:	221c      	movs	r2, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4855      	ldr	r0, [pc, #340]	@ (8000a30 <run_all_hash_tests+0x184>)
 80008da:	f7ff ff51 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 80008de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80008e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	4619      	mov	r1, r3
 80008ea:	4852      	ldr	r0, [pc, #328]	@ (8000a34 <run_all_hash_tests+0x188>)
 80008ec:	f7ff fe5e 	bl	80005ac <debug_log>

    uint8_t out_256[32];
    start = HAL_GetTick();
 80008f0:	f002 f85c 	bl	80029ac <HAL_GetTick>
 80008f4:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_sha3_256(out_256, test_input, sizeof(test_input));
 80008f8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80008fc:	2203      	movs	r2, #3
 80008fe:	494b      	ldr	r1, [pc, #300]	@ (8000a2c <run_all_hash_tests+0x180>)
 8000900:	4618      	mov	r0, r3
 8000902:	f001 fcf3 	bl	80022ec <masked_sha3_256>
    end = HAL_GetTick();
 8000906:	f002 f851 	bl	80029ac <HAL_GetTick>
 800090a:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHA3-256", out_256, sizeof(out_256));
 800090e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8000912:	2220      	movs	r2, #32
 8000914:	4619      	mov	r1, r3
 8000916:	4848      	ldr	r0, [pc, #288]	@ (8000a38 <run_all_hash_tests+0x18c>)
 8000918:	f7ff ff32 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 800091c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000920:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	4619      	mov	r1, r3
 8000928:	4842      	ldr	r0, [pc, #264]	@ (8000a34 <run_all_hash_tests+0x188>)
 800092a:	f7ff fe3f 	bl	80005ac <debug_log>

    uint8_t out_384[48];
    start = HAL_GetTick();
 800092e:	f002 f83d 	bl	80029ac <HAL_GetTick>
 8000932:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_sha3_384(out_384, test_input, sizeof(test_input));
 8000936:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 800093a:	2203      	movs	r2, #3
 800093c:	493b      	ldr	r1, [pc, #236]	@ (8000a2c <run_all_hash_tests+0x180>)
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fce8 	bl	8002314 <masked_sha3_384>
    end = HAL_GetTick();
 8000944:	f002 f832 	bl	80029ac <HAL_GetTick>
 8000948:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHA3-384", out_384, sizeof(out_384));
 800094c:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8000950:	2230      	movs	r2, #48	@ 0x30
 8000952:	4619      	mov	r1, r3
 8000954:	4839      	ldr	r0, [pc, #228]	@ (8000a3c <run_all_hash_tests+0x190>)
 8000956:	f7ff ff13 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 800095a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800095e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4619      	mov	r1, r3
 8000966:	4833      	ldr	r0, [pc, #204]	@ (8000a34 <run_all_hash_tests+0x188>)
 8000968:	f7ff fe20 	bl	80005ac <debug_log>

    uint8_t out_512[64];
    start = HAL_GetTick();
 800096c:	f002 f81e 	bl	80029ac <HAL_GetTick>
 8000970:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_sha3_512(out_512, test_input, sizeof(test_input));
 8000974:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000978:	2203      	movs	r2, #3
 800097a:	492c      	ldr	r1, [pc, #176]	@ (8000a2c <run_all_hash_tests+0x180>)
 800097c:	4618      	mov	r0, r3
 800097e:	f001 fcdd 	bl	800233c <masked_sha3_512>
    end = HAL_GetTick();
 8000982:	f002 f813 	bl	80029ac <HAL_GetTick>
 8000986:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHA3-512", out_512, sizeof(out_512));
 800098a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800098e:	2240      	movs	r2, #64	@ 0x40
 8000990:	4619      	mov	r1, r3
 8000992:	482b      	ldr	r0, [pc, #172]	@ (8000a40 <run_all_hash_tests+0x194>)
 8000994:	f7ff fef4 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 8000998:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800099c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4619      	mov	r1, r3
 80009a4:	4823      	ldr	r0, [pc, #140]	@ (8000a34 <run_all_hash_tests+0x188>)
 80009a6:	f7ff fe01 	bl	80005ac <debug_log>

    uint8_t out_shake128[SHAKE_OUTPUT_LEN];
    start = HAL_GetTick();
 80009aa:	f001 ffff 	bl	80029ac <HAL_GetTick>
 80009ae:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_shake128(out_shake128, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 80009b2:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80009b6:	2303      	movs	r3, #3
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <run_all_hash_tests+0x180>)
 80009ba:	2140      	movs	r1, #64	@ 0x40
 80009bc:	f001 fcd2 	bl	8002364 <masked_shake128>
    end = HAL_GetTick();
 80009c0:	f001 fff4 	bl	80029ac <HAL_GetTick>
 80009c4:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHAKE128 (64 bytes)", out_shake128, SHAKE_OUTPUT_LEN);
 80009c8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009cc:	2240      	movs	r2, #64	@ 0x40
 80009ce:	4619      	mov	r1, r3
 80009d0:	481c      	ldr	r0, [pc, #112]	@ (8000a44 <run_all_hash_tests+0x198>)
 80009d2:	f7ff fed5 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 80009d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80009da:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	4619      	mov	r1, r3
 80009e2:	4814      	ldr	r0, [pc, #80]	@ (8000a34 <run_all_hash_tests+0x188>)
 80009e4:	f7ff fde2 	bl	80005ac <debug_log>

    uint8_t out_shake256[SHAKE_OUTPUT_LEN];
    start = HAL_GetTick();
 80009e8:	f001 ffe0 	bl	80029ac <HAL_GetTick>
 80009ec:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
    masked_shake256(out_shake256, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	2303      	movs	r3, #3
 80009f4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a2c <run_all_hash_tests+0x180>)
 80009f6:	2140      	movs	r1, #64	@ 0x40
 80009f8:	f001 fcc9 	bl	800238e <masked_shake256>
    end = HAL_GetTick();
 80009fc:	f001 ffd6 	bl	80029ac <HAL_GetTick>
 8000a00:	f8c7 0130 	str.w	r0, [r7, #304]	@ 0x130
    print_hex_inline("SHAKE256 (64 bytes)", out_shake256, SHAKE_OUTPUT_LEN);
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2240      	movs	r2, #64	@ 0x40
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <run_all_hash_tests+0x19c>)
 8000a0c:	f7ff feb8 	bl	8000780 <print_hex_inline>
    debug_log("Time: %lu ms\r\n", end - start);
 8000a10:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8000a14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <run_all_hash_tests+0x188>)
 8000a1e:	f7ff fdc5 	bl	80005ac <debug_log>
}
 8000a22:	bf00      	nop
 8000a24:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	0800be54 	.word	0x0800be54
 8000a30:	0800bdc0 	.word	0x0800bdc0
 8000a34:	0800bdcc 	.word	0x0800bdcc
 8000a38:	0800bddc 	.word	0x0800bddc
 8000a3c:	0800bde8 	.word	0x0800bde8
 8000a40:	0800bdf4 	.word	0x0800bdf4
 8000a44:	0800be00 	.word	0x0800be00
 8000a48:	0800be14 	.word	0x0800be14

08000a4c <run_keccak_benchmarks>:
void run_keccak_benchmarks(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0cc      	sub	sp, #304	@ 0x130
 8000a50:	af00      	add	r7, sp, #0
    init_cycle_counter();
 8000a52:	f7ff ff11 	bl	8000878 <init_cycle_counter>

    uint32_t start, end;

    uint8_t out_224[28];
    DWT->CYCCNT = 0;
 8000a56:	4b4f      	ldr	r3, [pc, #316]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	605a      	str	r2, [r3, #4]
    masked_sha3_224(out_224, test_input, sizeof(test_input));
 8000a5c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a60:	2203      	movs	r2, #3
 8000a62:	494d      	ldr	r1, [pc, #308]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 fc2d 	bl	80022c4 <masked_sha3_224>
    end = DWT->CYCCNT;
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-224", out_224, sizeof(out_224));
 8000a72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000a76:	221c      	movs	r2, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4848      	ldr	r0, [pc, #288]	@ (8000b9c <run_keccak_benchmarks+0x150>)
 8000a7c:	f7ff fe80 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000a80:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000a84:	4846      	ldr	r0, [pc, #280]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000a86:	f7ff fd91 	bl	80005ac <debug_log>

    uint8_t out_256[32];
    DWT->CYCCNT = 0;
 8000a8a:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
    masked_sha3_256(out_256, test_input, sizeof(test_input));
 8000a90:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000a94:	2203      	movs	r2, #3
 8000a96:	4940      	ldr	r1, [pc, #256]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fc27 	bl	80022ec <masked_sha3_256>
    end = DWT->CYCCNT;
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-256", out_256, sizeof(out_256));
 8000aa6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000aaa:	2220      	movs	r2, #32
 8000aac:	4619      	mov	r1, r3
 8000aae:	483d      	ldr	r0, [pc, #244]	@ (8000ba4 <run_keccak_benchmarks+0x158>)
 8000ab0:	f7ff fe66 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000ab4:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000ab8:	4839      	ldr	r0, [pc, #228]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000aba:	f7ff fd77 	bl	80005ac <debug_log>

    uint8_t out_384[48];
    DWT->CYCCNT = 0;
 8000abe:	4b35      	ldr	r3, [pc, #212]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
    masked_sha3_384(out_384, test_input, sizeof(test_input));
 8000ac4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000ac8:	2203      	movs	r2, #3
 8000aca:	4933      	ldr	r1, [pc, #204]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f001 fc21 	bl	8002314 <masked_sha3_384>
    end = DWT->CYCCNT;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-384", out_384, sizeof(out_384));
 8000ada:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000ade:	2230      	movs	r2, #48	@ 0x30
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4831      	ldr	r0, [pc, #196]	@ (8000ba8 <run_keccak_benchmarks+0x15c>)
 8000ae4:	f7ff fe4c 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000ae8:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000aec:	482c      	ldr	r0, [pc, #176]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000aee:	f7ff fd5d 	bl	80005ac <debug_log>

    uint8_t out_512[64];
    DWT->CYCCNT = 0;
 8000af2:	4b28      	ldr	r3, [pc, #160]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
    masked_sha3_512(out_512, test_input, sizeof(test_input));
 8000af8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000afc:	2203      	movs	r2, #3
 8000afe:	4926      	ldr	r1, [pc, #152]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fc1b 	bl	800233c <masked_sha3_512>
    end = DWT->CYCCNT;
 8000b06:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHA3-512", out_512, sizeof(out_512));
 8000b0e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b12:	2240      	movs	r2, #64	@ 0x40
 8000b14:	4619      	mov	r1, r3
 8000b16:	4825      	ldr	r0, [pc, #148]	@ (8000bac <run_keccak_benchmarks+0x160>)
 8000b18:	f7ff fe32 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000b1c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000b20:	481f      	ldr	r0, [pc, #124]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000b22:	f7ff fd43 	bl	80005ac <debug_log>

    uint8_t out_shake128[SHAKE_OUTPUT_LEN];
    DWT->CYCCNT = 0;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
    masked_shake128(out_shake128, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 8000b2c:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000b30:	2303      	movs	r3, #3
 8000b32:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000b34:	2140      	movs	r1, #64	@ 0x40
 8000b36:	f001 fc15 	bl	8002364 <masked_shake128>
    end = DWT->CYCCNT;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHAKE128", out_shake128, SHAKE_OUTPUT_LEN);
 8000b42:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b46:	2240      	movs	r2, #64	@ 0x40
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4819      	ldr	r0, [pc, #100]	@ (8000bb0 <run_keccak_benchmarks+0x164>)
 8000b4c:	f7ff fe18 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000b50:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000b54:	4812      	ldr	r0, [pc, #72]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000b56:	f7ff fd29 	bl	80005ac <debug_log>

    uint8_t out_shake256[SHAKE_OUTPUT_LEN];
    DWT->CYCCNT = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
    masked_shake256(out_shake256, SHAKE_OUTPUT_LEN, test_input, sizeof(test_input));
 8000b60:	4638      	mov	r0, r7
 8000b62:	2303      	movs	r3, #3
 8000b64:	4a0c      	ldr	r2, [pc, #48]	@ (8000b98 <run_keccak_benchmarks+0x14c>)
 8000b66:	2140      	movs	r1, #64	@ 0x40
 8000b68:	f001 fc11 	bl	800238e <masked_shake256>
    end = DWT->CYCCNT;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <run_keccak_benchmarks+0x148>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    print_hex_inline("SHAKE256", out_shake256, SHAKE_OUTPUT_LEN);
 8000b74:	463b      	mov	r3, r7
 8000b76:	2240      	movs	r2, #64	@ 0x40
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <run_keccak_benchmarks+0x168>)
 8000b7c:	f7ff fe00 	bl	8000780 <print_hex_inline>
    debug_log("Cycles: %lu\r\n", end);
 8000b80:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8000b84:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <run_keccak_benchmarks+0x154>)
 8000b86:	f7ff fd11 	bl	80005ac <debug_log>
}
 8000b8a:	bf00      	nop
 8000b8c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	e0001000 	.word	0xe0001000
 8000b98:	0800be54 	.word	0x0800be54
 8000b9c:	0800bdc0 	.word	0x0800bdc0
 8000ba0:	0800be28 	.word	0x0800be28
 8000ba4:	0800bddc 	.word	0x0800bddc
 8000ba8:	0800bde8 	.word	0x0800bde8
 8000bac:	0800bdf4 	.word	0x0800bdf4
 8000bb0:	0800be38 	.word	0x0800be38
 8000bb4:	0800be44 	.word	0x0800be44

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f001 fe8f 	bl	80028e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f835 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 f96f 	bl	8000ea8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bca:	f000 f89b 	bl	8000d04 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000bce:	f000 f8c7 	bl	8000d60 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000bd2:	f000 f909 	bl	8000de8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000bd6:	f009 fdd5 	bl	800a784 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8000bda:	f000 f8f1 	bl	8000dc0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000bde:	f000 f939 	bl	8000e54 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <main+0x6c>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bea:	4a0e      	ldr	r2, [pc, #56]	@ (8000c24 <main+0x6c>)
 8000bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bf0:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <main+0x6c>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8000bfe:	480a      	ldr	r0, [pc, #40]	@ (8000c28 <main+0x70>)
 8000c00:	f005 febe 	bl	8006980 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <main+0x74>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	6898      	ldr	r0, [r3, #8]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	2100      	movs	r1, #0
 8000c10:	f00a fa42 	bl	800b098 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  run_all_hash_tests();
 8000c14:	f7ff fe4a 	bl	80008ac <run_all_hash_tests>
	  run_keccak_benchmarks();
 8000c18:	f7ff ff18 	bl	8000a4c <run_keccak_benchmarks>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c1c:	f009 fdd8 	bl	800a7d0 <MX_USB_HOST_Process>
	  run_all_hash_tests();
 8000c20:	bf00      	nop
 8000c22:	e7f7      	b.n	8000c14 <main+0x5c>
 8000c24:	40023800 	.word	0x40023800
 8000c28:	20000140 	.word	0x20000140
 8000c2c:	20000038 	.word	0x20000038

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b094      	sub	sp, #80	@ 0x50
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	2230      	movs	r2, #48	@ 0x30
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00a fb94 	bl	800b36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	f107 030c 	add.w	r3, r7, #12
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c54:	2300      	movs	r3, #0
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <SystemClock_Config+0xcc>)
 8000c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5c:	4a27      	ldr	r2, [pc, #156]	@ (8000cfc <SystemClock_Config+0xcc>)
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c64:	4b25      	ldr	r3, [pc, #148]	@ (8000cfc <SystemClock_Config+0xcc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <SystemClock_Config+0xd0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a21      	ldr	r2, [pc, #132]	@ (8000d00 <SystemClock_Config+0xd0>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b1f      	ldr	r3, [pc, #124]	@ (8000d00 <SystemClock_Config+0xd0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ca4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 f888 	bl	8005dcc <HAL_RCC_OscConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cc2:	f000 f9ef 	bl	80010a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f005 fae9 	bl	80062bc <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cf0:	f000 f9d8 	bl	80010a4 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	@ 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d0a:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <MX_I2C1_Init+0x54>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d10:	4a12      	ldr	r2, [pc, #72]	@ (8000d5c <MX_I2C1_Init+0x58>)
 8000d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d34:	4b07      	ldr	r3, [pc, #28]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <MX_I2C1_Init+0x50>)
 8000d42:	f004 fa5f 	bl	8005204 <HAL_I2C_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d4c:	f000 f9aa 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	200000a4 	.word	0x200000a4
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	000186a0 	.word	0x000186a0

08000d60 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d66:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <MX_I2S3_Init+0x58>)
 8000d68:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d70:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d72:	4b10      	ldr	r3, [pc, #64]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d78:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d84:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <MX_I2S3_Init+0x5c>)
 8000d8a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d92:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <MX_I2S3_Init+0x54>)
 8000da0:	f004 fb74 	bl	800548c <HAL_I2S_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000daa:	f000 f97b 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000f8 	.word	0x200000f8
 8000db8:	40003c00 	.word	0x40003c00
 8000dbc:	00017700 	.word	0x00017700

08000dc0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_RNG_Init+0x20>)
 8000dc6:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <MX_RNG_Init+0x24>)
 8000dc8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_RNG_Init+0x20>)
 8000dcc:	f005 fdd8 	bl	8006980 <HAL_RNG_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000dd6:	f000 f965 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000140 	.word	0x20000140
 8000de4:	50060800 	.word	0x50060800

08000de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dec:	4b17      	ldr	r3, [pc, #92]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000dee:	4a18      	ldr	r2, [pc, #96]	@ (8000e50 <MX_SPI1_Init+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000df4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e20:	4b0a      	ldr	r3, [pc, #40]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e34:	220a      	movs	r2, #10
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <MX_SPI1_Init+0x64>)
 8000e3a:	f005 fe21 	bl	8006a80 <HAL_SPI_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e44:	f000 f92e 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000150 	.word	0x20000150
 8000e50:	40013000 	.word	0x40013000

08000e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ea4 <MX_USART2_UART_Init+0x50>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	@ (8000ea0 <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f005 fe81 	bl	8006b92 <HAL_UART_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e96:	f000 f905 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001a8 	.word	0x200001a8
 8000ea4:	40004400 	.word	0x40004400

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	@ 0x30
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	4b72      	ldr	r3, [pc, #456]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a71      	ldr	r2, [pc, #452]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000ec8:	f043 0310 	orr.w	r3, r3, #16
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b6f      	ldr	r3, [pc, #444]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0310 	and.w	r3, r3, #16
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	4b6b      	ldr	r3, [pc, #428]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000ee4:	f043 0304 	orr.w	r3, r3, #4
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b68      	ldr	r3, [pc, #416]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f003 0304 	and.w	r3, r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b64      	ldr	r3, [pc, #400]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a63      	ldr	r2, [pc, #396]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b61      	ldr	r3, [pc, #388]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b5a      	ldr	r3, [pc, #360]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	4b56      	ldr	r3, [pc, #344]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a55      	ldr	r2, [pc, #340]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b53      	ldr	r3, [pc, #332]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	4a4e      	ldr	r2, [pc, #312]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800108c <MX_GPIO_Init+0x1e4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4849      	ldr	r0, [pc, #292]	@ (8001090 <MX_GPIO_Init+0x1e8>)
 8000f6c:	f001 fffc 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	4847      	ldr	r0, [pc, #284]	@ (8001094 <MX_GPIO_Init+0x1ec>)
 8000f76:	f001 fff7 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000f80:	4845      	ldr	r0, [pc, #276]	@ (8001098 <MX_GPIO_Init+0x1f0>)
 8000f82:	f001 fff1 	bl	8002f68 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f86:	2308      	movs	r3, #8
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 031c 	add.w	r3, r7, #28
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	483c      	ldr	r0, [pc, #240]	@ (8001090 <MX_GPIO_Init+0x1e8>)
 8000f9e:	f001 fe47 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4836      	ldr	r0, [pc, #216]	@ (8001094 <MX_GPIO_Init+0x1ec>)
 8000fba:	f001 fe39 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fce:	2305      	movs	r3, #5
 8000fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	482e      	ldr	r0, [pc, #184]	@ (8001094 <MX_GPIO_Init+0x1ec>)
 8000fda:	f001 fe29 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000fe2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fec:	f107 031c 	add.w	r3, r7, #28
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	482a      	ldr	r0, [pc, #168]	@ (800109c <MX_GPIO_Init+0x1f4>)
 8000ff4:	f001 fe1c 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ff8:	2304      	movs	r3, #4
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 031c 	add.w	r3, r7, #28
 8001008:	4619      	mov	r1, r3
 800100a:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <MX_GPIO_Init+0x1f8>)
 800100c:	f001 fe10 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001022:	2305      	movs	r3, #5
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <MX_GPIO_Init+0x1f8>)
 800102e:	f001 fdff 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001032:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001036:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001038:	2301      	movs	r3, #1
 800103a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	4619      	mov	r1, r3
 800104a:	4813      	ldr	r0, [pc, #76]	@ (8001098 <MX_GPIO_Init+0x1f0>)
 800104c:	f001 fdf0 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001050:	2320      	movs	r3, #32
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 031c 	add.w	r3, r7, #28
 8001060:	4619      	mov	r1, r3
 8001062:	480d      	ldr	r0, [pc, #52]	@ (8001098 <MX_GPIO_Init+0x1f0>)
 8001064:	f001 fde4 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001068:	2302      	movs	r3, #2
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800106c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 031c 	add.w	r3, r7, #28
 800107a:	4619      	mov	r1, r3
 800107c:	4804      	ldr	r0, [pc, #16]	@ (8001090 <MX_GPIO_Init+0x1e8>)
 800107e:	f001 fdd7 	bl	8002c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	@ 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800
 8001090:	40021000 	.word	0x40021000
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40020000 	.word	0x40020000
 80010a0:	40020400 	.word	0x40020400

080010a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <Error_Handler+0x8>

080010b0 <fill_random_matrix>:
 * shared symmetrically for masked gadget use.
 * Diagonal elements are zeroed.
 *
 * @param r Output 2D matrix of random 64-bit values
 */
void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80010b0:	b5b0      	push	{r4, r5, r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e037      	b.n	800112e <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	e020      	b.n	8001108 <fill_random_matrix+0x58>
            // Each r[i][j] must be a fresh 64-bit random value for secure masking.
            // get_random64() is expected to enforce validity and invoke error handling on failure.
            uint64_t val = get_random64();
 80010c6:	f7ff fb11 	bl	80006ec <get_random64>
 80010ca:	4603      	mov	r3, r0
 80010cc:	17da      	asrs	r2, r3, #31
 80010ce:	461c      	mov	r4, r3
 80010d0:	4615      	mov	r5, r2
 80010d2:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	015b      	lsls	r3, r3, #5
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	441a      	add	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	18d1      	adds	r1, r2, r3
 80010e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	441a      	add	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	18d1      	adds	r1, r2, r3
 80010fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010fe:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	3301      	adds	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d9db      	bls.n	80010c6 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	441a      	add	r2, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	18d1      	adds	r1, r2, r3
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	2b03      	cmp	r3, #3
 8001132:	d9c4      	bls.n	80010be <fill_random_matrix+0xe>
    }

#ifdef DEBUG_LOG_VERBOSE
    debug_log("Randomness matrix filled for masked AND.\r\n");
#endif
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bdb0      	pop	{r4, r5, r7, pc}

0800113e <masked_xor>:
 * @param a First masked operand
 * @param b Second masked operand
 */
void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800113e:	b4b0      	push	{r4, r5, r7}
 8001140:	b087      	sub	sp, #28
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e018      	b.n	8001182 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4413      	add	r3, r2
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	ea80 0402 	eor.w	r4, r0, r2
 800116c:	ea81 0503 	eor.w	r5, r1, r3
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	4413      	add	r3, r2
 8001178:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d9e3      	bls.n	8001150 <masked_xor+0x12>
    }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	bcb0      	pop	{r4, r5, r7}
 8001192:	4770      	bx	lr

08001194 <masked_and>:
// data-dependent timing variation.

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8001194:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001198:	b092      	sub	sp, #72	@ 0x48
 800119a:	af00      	add	r7, sp, #0
 800119c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800119e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80011a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80011a2:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80011a8:	e018      	b.n	80011dc <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 80011aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	ea00 0402 	and.w	r4, r0, r2
 80011c6:	ea01 0503 	and.w	r5, r1, r3
 80011ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80011d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011d8:	3301      	adds	r3, #1
 80011da:	647b      	str	r3, [r7, #68]	@ 0x44
 80011dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d9e3      	bls.n	80011aa <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80011e6:	e078      	b.n	80012da <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80011e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011ea:	3301      	adds	r3, #1
 80011ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80011ee:	e06e      	b.n	80012ce <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 80011f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4413      	add	r3, r2
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	ea00 0802 	and.w	r8, r0, r2
 800120c:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8001210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4413      	add	r3, r2
 8001218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800121c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800121e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	ea00 0a02 	and.w	sl, r0, r2
 800122c:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8001230:	ea88 030a 	eor.w	r3, r8, sl
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	ea89 030b 	eor.w	r3, r9, fp
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001240:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8001244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4413      	add	r3, r2
 800124c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001252:	015a      	lsls	r2, r3, #5
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	441a      	add	r2, r3
 8001258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	ea80 0402 	eor.w	r4, r0, r2
 8001266:	61bc      	str	r4, [r7, #24]
 8001268:	404b      	eors	r3, r1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800126e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001278:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 800127c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800127e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4413      	add	r3, r2
 8001284:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800128a:	015a      	lsls	r2, r3, #5
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	441a      	add	r2, r3
 8001290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4413      	add	r3, r2
 8001296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800129e:	ea80 0602 	eor.w	r6, r0, r2
 80012a2:	613e      	str	r6, [r7, #16]
 80012a4:	404b      	eors	r3, r1
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80012ac:	460b      	mov	r3, r1
 80012ae:	4063      	eors	r3, r4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	406b      	eors	r3, r5
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	4413      	add	r3, r2
 80012c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80012c4:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80012c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ca:	3301      	adds	r3, #1
 80012cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d98d      	bls.n	80011f0 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 80012d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012d6:	3301      	adds	r3, #1
 80012d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80012da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d983      	bls.n	80011e8 <masked_and+0x54>
        }
    }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3748      	adds	r7, #72	@ 0x48
 80012e6:	46bd      	mov	sp, r7
 80012e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012ec:	4770      	bx	lr

080012ee <masked_not>:
 * to maintain correct recombined parity.
 *
 * @param dst Output masked result
 * @param src Input masked operand
 */
void masked_not(masked_uint64_t *dst, const masked_uint64_t *src) {
 80012ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012f2:	b092      	sub	sp, #72	@ 0x48
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	61f8      	str	r0, [r7, #28]
 80012f8:	61b9      	str	r1, [r7, #24]
    // Bitwise NOT of each share — safe for Boolean masking.
    for (size_t i = 0; i < MASKING_N; ++i)
 80012fa:	2300      	movs	r3, #0
 80012fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80012fe:	e012      	b.n	8001326 <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	4413      	add	r3, r2
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	ea6f 0802 	mvn.w	r8, r2
 8001310:	ea6f 0903 	mvn.w	r9, r3
 8001314:	69fa      	ldr	r2, [r7, #28]
 8001316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4413      	add	r3, r2
 800131c:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8001320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001322:	3301      	adds	r3, #1
 8001324:	647b      	str	r3, [r7, #68]	@ 0x44
 8001326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001328:	2b03      	cmp	r3, #3
 800132a:	d9e9      	bls.n	8001300 <masked_not+0x12>

    // Adjust one share so that the recombined NOT is correct.
    uint64_t orig_parity = 0, inv_parity = 0;
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001348:	e024      	b.n	8001394 <masked_not+0xa6>
        orig_parity ^= src->share[i];
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800135a:	ea80 0602 	eor.w	r6, r0, r2
 800135e:	613e      	str	r6, [r7, #16]
 8001360:	404b      	eors	r3, r1
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001368:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4413      	add	r3, r2
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800137c:	ea80 0602 	eor.w	r6, r0, r2
 8001380:	60be      	str	r6, [r7, #8]
 8001382:	404b      	eors	r3, r1
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800138a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 800138e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001390:	3301      	adds	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001396:	2b03      	cmp	r3, #3
 8001398:	d9d7      	bls.n	800134a <masked_not+0x5c>
    }
    uint64_t delta = inv_parity ^ ~orig_parity;
 800139a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800139e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80013a2:	ea80 0402 	eor.w	r4, r0, r2
 80013a6:	ea81 0503 	eor.w	r5, r1, r3
 80013aa:	43e3      	mvns	r3, r4
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	43eb      	mvns	r3, r5
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    dst->share[0] ^= delta;
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80013c4:	ea80 0a02 	eor.w	sl, r0, r2
 80013c8:	ea81 0b03 	eor.w	fp, r1, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	e9c3 ab00 	strd	sl, fp, [r3]
}
 80013d2:	bf00      	nop
 80013d4:	3748      	adds	r7, #72	@ 0x48
 80013d6:	46bd      	mov	sp, r7
 80013d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013dc:	4770      	bx	lr

080013de <rol64>:
    { 28, 55, 25, 21, 56 },
    { 27, 20, 39,  8, 14 }
};

//Performs a circular left shift (rotate-left) of a 64-bit word by n bits.
static inline uint64_t rol64(uint64_t x, unsigned int n) {
 80013de:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
	n &= 63;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013f2:	607b      	str	r3, [r7, #4]
	return (x << n) | (x >> (64 - n));
 80013f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	f1a1 0620 	sub.w	r6, r1, #32
 80013fe:	f1c1 0020 	rsb	r0, r1, #32
 8001402:	fa03 f901 	lsl.w	r9, r3, r1
 8001406:	fa02 f606 	lsl.w	r6, r2, r6
 800140a:	ea49 0906 	orr.w	r9, r9, r6
 800140e:	fa22 f000 	lsr.w	r0, r2, r0
 8001412:	ea49 0900 	orr.w	r9, r9, r0
 8001416:	fa02 f801 	lsl.w	r8, r2, r1
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4249      	negs	r1, r1
 800141e:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8001422:	f1c1 0620 	rsb	r6, r1, #32
 8001426:	f1a1 0020 	sub.w	r0, r1, #32
 800142a:	fa22 f401 	lsr.w	r4, r2, r1
 800142e:	fa03 f606 	lsl.w	r6, r3, r6
 8001432:	4334      	orrs	r4, r6
 8001434:	fa23 f000 	lsr.w	r0, r3, r0
 8001438:	4304      	orrs	r4, r0
 800143a:	fa23 f501 	lsr.w	r5, r3, r1
 800143e:	ea48 0a04 	orr.w	sl, r8, r4
 8001442:	ea49 0b05 	orr.w	fp, r9, r5
 8001446:	4654      	mov	r4, sl
 8001448:	465d      	mov	r5, fp
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5

}
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800145a:	4770      	bx	lr

0800145c <masked_value_set>:

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 800145c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001460:	b088      	sub	sp, #32
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t acc = value;
 800146a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800146e:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // Generate MASKING_N - 1 random shares
    for (int i = 0; i < MASKING_N - 1; i++) {
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	e01c      	b.n	80014b2 <masked_value_set+0x56>
        out->share[i] = get_random64();
 8001478:	f7ff f938 	bl	80006ec <get_random64>
 800147c:	4603      	mov	r3, r0
 800147e:	17da      	asrs	r2, r3, #31
 8001480:	4698      	mov	r8, r3
 8001482:	4691      	mov	r9, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4413      	add	r3, r2
 800148c:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014a0:	ea80 0402 	eor.w	r4, r0, r2
 80014a4:	ea81 0503 	eor.w	r5, r1, r3
 80014a8:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; i++) {
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	dddf      	ble.n	8001478 <masked_value_set+0x1c>
    }

    // Last share ensures that XOR of all shares == value
    out->share[MASKING_N - 1] = acc;
 80014b8:	68f9      	ldr	r1, [r7, #12]
 80014ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014be:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80014c2:	bf00      	nop
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080014cc <masked_squeeze>:
 * @param output      Buffer to receive the output
 * @param output_len  Number of output bytes desired
 * @param state       5x5 masked state to squeeze from
 * @param rate        Sponge bitrate in bytes (e.g. 168 for SHAKE128)
 */
void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5], size_t rate) {
 80014cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014d0:	b08d      	sub	sp, #52	@ 0x34
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	60f8      	str	r0, [r7, #12]
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 80014e0:	e076      	b.n	80015d0 <masked_squeeze+0x104>
        // Pull up to ratebytes per round.
        // This maps each byte of the output to a specific lane+byte within the state.
        for (int i = 0; i < rate&& offset < output_len; i++) {
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014e6:	e064      	b.n	80015b2 <masked_squeeze+0xe6>
            size_t x = (i / 8) % 5;       // X coordinate in the 5×5 grid
 80014e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da00      	bge.n	80014f0 <masked_squeeze+0x24>
 80014ee:	3307      	adds	r3, #7
 80014f0:	10db      	asrs	r3, r3, #3
 80014f2:	4619      	mov	r1, r3
 80014f4:	4b3b      	ldr	r3, [pc, #236]	@ (80015e4 <masked_squeeze+0x118>)
 80014f6:	fb83 2301 	smull	r2, r3, r3, r1
 80014fa:	105a      	asrs	r2, r3, #1
 80014fc:	17cb      	asrs	r3, r1, #31
 80014fe:	1ad2      	subs	r2, r2, r3
 8001500:	4613      	mov	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	1aca      	subs	r2, r1, r3
 8001508:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;       // Y coordinate in the 5×5 grid
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	4a35      	ldr	r2, [pc, #212]	@ (80015e4 <masked_squeeze+0x118>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1112      	asrs	r2, r2, #4
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;      // Byte index within the 64-bit lane
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	425a      	negs	r2, r3
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	f002 0207 	and.w	r2, r2, #7
 8001526:	bf58      	it	pl
 8001528:	4253      	negpl	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

            // === Recombine shares ===
            // Convert the masked lane back into a real value via XOR of all shares.
            uint64_t lane = 0;
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	f04f 0300 	mov.w	r3, #0
 8001534:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	e01a      	b.n	8001574 <masked_squeeze+0xa8>
                lane ^= state[x][y].share[j];
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	015b      	lsls	r3, r3, #5
 8001548:	461a      	mov	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	441a      	add	r2, r3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	0099      	lsls	r1, r3, #2
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	440b      	add	r3, r1
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4413      	add	r3, r2
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001562:	ea80 0802 	eor.w	r8, r0, r2
 8001566:	ea81 0903 	eor.w	r9, r1, r3
 800156a:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3301      	adds	r3, #1
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b03      	cmp	r3, #3
 8001578:	dde1      	ble.n	800153e <masked_squeeze+0x72>
            }

            // Extract the correct byte from the lane.
            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	00d9      	lsls	r1, r3, #3
 800157e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001582:	f1c1 0620 	rsb	r6, r1, #32
 8001586:	f1a1 0020 	sub.w	r0, r1, #32
 800158a:	fa22 f401 	lsr.w	r4, r2, r1
 800158e:	fa03 f606 	lsl.w	r6, r3, r6
 8001592:	4334      	orrs	r4, r6
 8001594:	fa23 f000 	lsr.w	r0, r3, r0
 8001598:	4304      	orrs	r4, r0
 800159a:	fa23 f501 	lsr.w	r5, r3, r1
 800159e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	b2e2      	uxtb	r2, r4
 80015aa:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < rate&& offset < output_len; i++) {
 80015ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ae:	3301      	adds	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d903      	bls.n	80015c2 <masked_squeeze+0xf6>
 80015ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d392      	bcc.n	80014e8 <masked_squeeze+0x1c>
        }

        // === If we need more output ===
        // Keccak is a sponge — we re-permute the state to squeeze more bytes out.
        if (offset < output_len) {
 80015c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d202      	bcs.n	80015d0 <masked_squeeze+0x104>
            masked_keccak_f1600(state);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 fbf8 	bl	8001dc0 <masked_keccak_f1600>
    while (offset < output_len) {
 80015d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d384      	bcc.n	80014e2 <masked_squeeze+0x16>
        }
    }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3734      	adds	r7, #52	@ 0x34
 80015de:	46bd      	mov	sp, r7
 80015e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015e4:	66666667 	.word	0x66666667

080015e8 <masked_theta>:
 * Apply the masked Theta step of Keccak.
 *
 * Theta mixes bits across columns using masked XORs to ensure diffusion.
 * Maintains share alignment (linear operation).
 */
void masked_theta(masked_uint64_t state[5][5]) {
 80015e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015ec:	b0e0      	sub	sp, #384	@ 0x180
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015f4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015f8:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};  // Column parity
 80015fa:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80015fe:	22a0      	movs	r2, #160	@ 0xa0
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f009 feb2 	bl	800b36c <memset>
    masked_uint64_t D[5] = {0};  // Parity difference per column
 8001608:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800160c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001610:	4618      	mov	r0, r3
 8001612:	23a0      	movs	r3, #160	@ 0xa0
 8001614:	461a      	mov	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	f009 fea8 	bl	800b36c <memset>

    // For each column, compute the parity across the 5 lanes.
    // We do this in masked space using XORs, which are safe.
    for (int x = 0; x < 5; x++) {
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001622:	e04f      	b.n	80016c4 <masked_theta+0xdc>
        C[x] = state[x][0];
 8001624:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	015b      	lsls	r3, r3, #5
 8001630:	461a      	mov	r2, r3
 8001632:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001636:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	441a      	add	r2, r3
 800163e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001642:	015b      	lsls	r3, r3, #5
 8001644:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001648:	f107 0108 	add.w	r1, r7, #8
 800164c:	440b      	add	r3, r1
 800164e:	3bd0      	subs	r3, #208	@ 0xd0
 8001650:	461c      	mov	r4, r3
 8001652:	4615      	mov	r5, r2
 8001654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001658:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800165c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001666:	e024      	b.n	80016b2 <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 8001668:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800166c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001670:	015b      	lsls	r3, r3, #5
 8001672:	18d0      	adds	r0, r2, r3
 8001674:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001678:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800167c:	015b      	lsls	r3, r3, #5
 800167e:	18d1      	adds	r1, r2, r3
 8001680:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001684:	4613      	mov	r3, r2
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	4413      	add	r3, r2
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	461a      	mov	r2, r3
 800168e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001692:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	441a      	add	r2, r3
 800169a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800169e:	015b      	lsls	r3, r3, #5
 80016a0:	4413      	add	r3, r2
 80016a2:	461a      	mov	r2, r3
 80016a4:	f7ff fd4b 	bl	800113e <masked_xor>
        for (int y = 1; y < 5; y++) {
 80016a8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80016ac:	3301      	adds	r3, #1
 80016ae:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80016b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	ddd6      	ble.n	8001668 <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 80016ba:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80016be:	3301      	adds	r3, #1
 80016c0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80016c4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80016c8:	2b04      	cmp	r3, #4
 80016ca:	ddab      	ble.n	8001624 <masked_theta+0x3c>
    }

    // Compute the D[x] value used to mix columns with each other.
    // Rotate C[x+1] by 1 bit before XORing with C[x-1].
    // This step spreads influence between adjacent columns.
    for (int x = 0; x < 5; x++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80016d2:	e06f      	b.n	80017b4 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80016da:	e062      	b.n	80017a2 <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 80016dc:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80016e0:	1c59      	adds	r1, r3, #1
 80016e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001898 <masked_theta+0x2b0>)
 80016e4:	fb83 2301 	smull	r2, r3, r3, r1
 80016e8:	105a      	asrs	r2, r3, #1
 80016ea:	17cb      	asrs	r3, r1, #31
 80016ec:	1ad2      	subs	r2, r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	1aca      	subs	r2, r1, r3
 80016f6:	0092      	lsls	r2, r2, #2
 80016f8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001704:	f107 0208 	add.w	r2, r7, #8
 8001708:	4413      	add	r3, r2
 800170a:	3bd0      	subs	r3, #208	@ 0xd0
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> 63);
 8001714:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001718:	0fda      	lsrs	r2, r3, #31
 800171a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4313      	orrs	r3, r2
 8001722:	607b      	str	r3, [r7, #4]
 8001724:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001728:	0fda      	lsrs	r2, r3, #31
 800172a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4313      	orrs	r3, r2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001738:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 800173c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001740:	1d19      	adds	r1, r3, #4
 8001742:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <masked_theta+0x2b0>)
 8001744:	fb83 2301 	smull	r2, r3, r3, r1
 8001748:	105a      	asrs	r2, r3, #1
 800174a:	17cb      	asrs	r3, r1, #31
 800174c:	1ad2      	subs	r2, r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	1aca      	subs	r2, r1, r3
 8001756:	0092      	lsls	r2, r2, #2
 8001758:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	4413      	add	r3, r2
 800176a:	3bd0      	subs	r3, #208	@ 0xd0
 800176c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001770:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001774:	ea80 0a02 	eor.w	sl, r0, r2
 8001778:	ea81 0b03 	eor.w	fp, r1, r3
 800177c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001780:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001784:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001788:	0099      	lsls	r1, r3, #2
 800178a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800178e:	440b      	add	r3, r1
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4413      	add	r3, r2
 8001794:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001798:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800179c:	3301      	adds	r3, #1
 800179e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80017a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	dd98      	ble.n	80016dc <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 80017aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80017ae:	3301      	adds	r3, #1
 80017b0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80017b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	dd8b      	ble.n	80016d4 <masked_theta+0xec>
        }
    }

    // Apply D[x] to every lane in each column to complete the mixing.
    for (int x = 0; x < 5; x++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80017c2:	e05e      	b.n	8001882 <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80017ca:	e051      	b.n	8001870 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80017d2:	e044      	b.n	800185e <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 80017d4:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	015b      	lsls	r3, r3, #5
 80017e0:	461a      	mov	r2, r3
 80017e2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017e6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	441a      	add	r2, r3
 80017ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80017f2:	0099      	lsls	r1, r3, #2
 80017f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017f8:	440b      	add	r3, r1
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	4413      	add	r3, r2
 80017fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001802:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001806:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 800180a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800180e:	0099      	lsls	r1, r3, #2
 8001810:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001814:	440b      	add	r3, r1
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	4413      	add	r3, r2
 800181a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800181e:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	461a      	mov	r2, r3
 800182c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001830:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	441a      	add	r2, r3
 8001838:	ea84 0800 	eor.w	r8, r4, r0
 800183c:	ea85 0901 	eor.w	r9, r5, r1
 8001840:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001844:	0099      	lsls	r1, r3, #2
 8001846:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800184a:	440b      	add	r3, r1
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001854:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001858:	3301      	adds	r3, #1
 800185a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800185e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001862:	2b03      	cmp	r3, #3
 8001864:	ddb6      	ble.n	80017d4 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 8001866:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800186a:	3301      	adds	r3, #1
 800186c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001870:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001874:	2b04      	cmp	r3, #4
 8001876:	dda9      	ble.n	80017cc <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 8001878:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800187c:	3301      	adds	r3, #1
 800187e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001882:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001886:	2b04      	cmp	r3, #4
 8001888:	dd9c      	ble.n	80017c4 <masked_theta+0x1dc>
            }
        }
    }
}
 800188a:	bf00      	nop
 800188c:	bf00      	nop
 800188e:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001892:	46bd      	mov	sp, r7
 8001894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001898:	66666667 	.word	0x66666667

0800189c <masked_rho>:
 * Apply the masked Rho step of Keccak.
 *
 * Rho rotates each lane by a fixed constant offset (same across shares),
 * spreading bits to neighboring positions while preserving the mask structure.
 */
void masked_rho(masked_uint64_t state[5][5]) {
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
    // Rho rotates each lane by a constant offset to scatter bits.
    // It’s important the same rotation is applied to every share
    // so the XOR mask relationship stays valid.
    for (int x = 0; x < 5; x++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	e048      	b.n	800193c <masked_rho+0xa0>
        for (int y = 0; y < 5; y++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e03f      	b.n	8001930 <masked_rho+0x94>
            uint8_t r = keccak_rho_offsets[x][y];
 80018b0:	4926      	ldr	r1, [pc, #152]	@ (800194c <masked_rho+0xb0>)
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	18ca      	adds	r2, r1, r3
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e02c      	b.n	8001924 <masked_rho+0x88>
                uint64_t value = state[x][y].share[i];
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	015b      	lsls	r3, r3, #5
 80018d4:	461a      	mov	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	441a      	add	r2, r3
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	0099      	lsls	r1, r3, #2
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	440b      	add	r3, r1
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	e9c7 2302 	strd	r2, r3, [r7, #8]
                state[x][y].share[i] = rol64(value, r);
 80018ee:	7cf9      	ldrb	r1, [r7, #19]
 80018f0:	69fa      	ldr	r2, [r7, #28]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	015b      	lsls	r3, r3, #5
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	189c      	adds	r4, r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001906:	f7ff fd6a 	bl	80013de <rol64>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	0088      	lsls	r0, r1, #2
 8001912:	6979      	ldr	r1, [r7, #20]
 8001914:	4401      	add	r1, r0
 8001916:	00c9      	lsls	r1, r1, #3
 8001918:	4421      	add	r1, r4
 800191a:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	3301      	adds	r3, #1
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	2b03      	cmp	r3, #3
 8001928:	ddcf      	ble.n	80018ca <masked_rho+0x2e>
        for (int y = 0; y < 5; y++) {
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	3301      	adds	r3, #1
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2b04      	cmp	r3, #4
 8001934:	ddbc      	ble.n	80018b0 <masked_rho+0x14>
    for (int x = 0; x < 5; x++) {
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3301      	adds	r3, #1
 800193a:	61fb      	str	r3, [r7, #28]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b04      	cmp	r3, #4
 8001940:	ddb3      	ble.n	80018aa <masked_rho+0xe>
            }
        }
    }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3724      	adds	r7, #36	@ 0x24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd90      	pop	{r4, r7, pc}
 800194c:	0800bf18 	.word	0x0800bf18

08001950 <masked_pi>:
 * Apply the masked Pi step of Keccak.
 *
 * Pi rearranges lanes within the 5x5 grid using a predefined permutation.
 * All shares of a lane are moved together to preserve masking validity.
 */
void masked_pi(masked_uint64_t state[5][5]) {
 8001950:	b4b0      	push	{r4, r5, r7}
 8001952:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8001956:	af00      	add	r7, sp, #0
 8001958:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800195c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001960:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    // Copy the full masked state first to keep original positions.
    for (int x = 0; x < 5; ++x)
 8001962:	2300      	movs	r3, #0
 8001964:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001968:	e038      	b.n	80019dc <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001970:	e02b      	b.n	80019ca <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 8001972:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	015b      	lsls	r3, r3, #5
 800197e:	461a      	mov	r2, r3
 8001980:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001984:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1899      	adds	r1, r3, r2
 800198c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001990:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8001994:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 80019a2:	4413      	add	r3, r2
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	18c2      	adds	r2, r0, r3
 80019a8:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80019ac:	015b      	lsls	r3, r3, #5
 80019ae:	440b      	add	r3, r1
 80019b0:	4614      	mov	r4, r2
 80019b2:	461d      	mov	r5, r3
 80019b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 80019c0:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80019c4:	3301      	adds	r3, #1
 80019c6:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80019ca:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	ddcf      	ble.n	8001972 <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 80019d2:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80019d6:	3301      	adds	r3, #1
 80019d8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80019dc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80019e0:	2b04      	cmp	r3, #4
 80019e2:	ddc2      	ble.n	800196a <masked_pi+0x1a>

    // Pi permutes the positions of lanes across the 5x5 grid.
    // All shares must move together with their corresponding lane
    // to keep the mask relationships correct.
    for (int x = 0; x < 5; ++x)
 80019e4:	2300      	movs	r3, #0
 80019e6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80019ea:	e051      	b.n	8001a90 <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80019f2:	e044      	b.n	8001a7e <masked_pi+0x12e>
            int new_x = y;
 80019f4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80019f8:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 80019fc:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a00:	0059      	lsls	r1, r3, #1
 8001a02:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	18ca      	adds	r2, r1, r3
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <masked_pi+0x158>)
 8001a10:	fb83 1302 	smull	r1, r3, r3, r2
 8001a14:	1059      	asrs	r1, r3, #1
 8001a16:	17d3      	asrs	r3, r2, #31
 8001a18:	1ac9      	subs	r1, r1, r3
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 8001a26:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	015b      	lsls	r3, r3, #5
 8001a32:	461a      	mov	r2, r3
 8001a34:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001a38:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	441a      	add	r2, r3
 8001a40:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001a44:	015b      	lsls	r3, r3, #5
 8001a46:	18d0      	adds	r0, r2, r3
 8001a48:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001a4c:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001a50:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001a5e:	4413      	add	r3, r2
 8001a60:	015b      	lsls	r3, r3, #5
 8001a62:	440b      	add	r3, r1
 8001a64:	4604      	mov	r4, r0
 8001a66:	461d      	mov	r5, r3
 8001a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001a74:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001a7e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	ddb6      	ble.n	80019f4 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8001a86:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001a90:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	dda9      	ble.n	80019ec <masked_pi+0x9c>
        }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bcb0      	pop	{r4, r5, r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	66666667 	.word	0x66666667

08001aac <masked_chi>:


void masked_chi(masked_uint64_t out[5][5],
                const masked_uint64_t in[5][5],
                const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b09a      	sub	sp, #104	@ 0x68
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
    // Chi mixes bits in each row using a non-linear expression.
    // Since AND is not linear, it’s where leakage can happen — hence the use of
    // fresh randomness and secure masked AND gadgets.

    for (int y = 0; y < 5; y++) {
 8001ab8:	2300      	movs	r3, #0
 8001aba:	667b      	str	r3, [r7, #100]	@ 0x64
 8001abc:	e070      	b.n	8001ba0 <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 8001abe:	2300      	movs	r3, #0
 8001ac0:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ac2:	e067      	b.n	8001b94 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8001ac4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	441a      	add	r2, r3
 8001ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	4413      	add	r3, r2
 8001ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8001adc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <masked_chi+0x104>)
 8001ae2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae6:	1059      	asrs	r1, r3, #1
 8001ae8:	17d3      	asrs	r3, r2, #31
 8001aea:	1ac9      	subs	r1, r1, r3
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	1ad1      	subs	r1, r2, r3
 8001af4:	460a      	mov	r2, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	015b      	lsls	r3, r3, #5
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	441a      	add	r2, r3
 8001b04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4413      	add	r3, r2
 8001b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8001b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b0e:	1c9a      	adds	r2, r3, #2
 8001b10:	4b27      	ldr	r3, [pc, #156]	@ (8001bb0 <masked_chi+0x104>)
 8001b12:	fb83 1302 	smull	r1, r3, r3, r2
 8001b16:	1059      	asrs	r1, r3, #1
 8001b18:	17d3      	asrs	r3, r2, #31
 8001b1a:	1ac9      	subs	r1, r1, r3
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	1ad1      	subs	r1, r2, r3
 8001b24:	460a      	mov	r2, r1
 8001b26:	4613      	mov	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	015b      	lsls	r3, r3, #5
 8001b2e:	461a      	mov	r2, r3
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	441a      	add	r2, r3
 8001b34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b36:	015b      	lsls	r3, r3, #5
 8001b38:	4413      	add	r3, r2
 8001b3a:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fbd3 	bl	80012ee <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8001b48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	01db      	lsls	r3, r3, #7
 8001b52:	461a      	mov	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	441a      	add	r2, r3
 8001b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b5a:	01db      	lsls	r3, r3, #7
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f107 0110 	add.w	r1, r7, #16
 8001b62:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001b66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b68:	f7ff fb14 	bl	8001194 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8001b6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	461a      	mov	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	441a      	add	r2, r3
 8001b7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b7e:	015b      	lsls	r3, r3, #5
 8001b80:	4413      	add	r3, r2
 8001b82:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001b86:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fad8 	bl	800113e <masked_xor>
        for (int x = 0; x < 5; x++) {
 8001b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b90:	3301      	adds	r3, #1
 8001b92:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	dd94      	ble.n	8001ac4 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 8001b9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	dd8b      	ble.n	8001abe <masked_chi+0x12>
        }
    }
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	3768      	adds	r7, #104	@ 0x68
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	66666667 	.word	0x66666667

08001bb4 <masked_iota>:
 * Requires re-masking the result securely to maintain masking invariants.
 *
 * @param state Masked state to update
 * @param rc    Round constant for this permutation round
 */
void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8001bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bb8:	b08e      	sub	sp, #56	@ 0x38
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6178      	str	r0, [r7, #20]
 8001bbe:	e9c7 2302 	strd	r2, r3, [r7, #8]
    // Iota introduces asymmetry by injecting a round constant into lane (0,0).
    // This breaks symmetry and helps distinguish rounds.
    // Because we’re masking, we must re-mask the lane after applying the constant.

    // Step 1: Recombine to get the true value of the lane.
    uint64_t value = 0;
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (int i = 0; i < MASKING_N; ++i)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bd2:	e010      	b.n	8001bf6 <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001be4:	ea80 0a02 	eor.w	sl, r0, r2
 8001be8:	ea81 0b03 	eor.w	fp, r1, r3
 8001bec:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    for (int i = 0; i < MASKING_N; ++i)
 8001bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	ddeb      	ble.n	8001bd4 <masked_iota+0x20>

    // Step 2: XOR in the round constant.
    value ^= rc;
 8001bfc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c04:	ea80 0802 	eor.w	r8, r0, r2
 8001c08:	ea81 0903 	eor.w	r9, r1, r3
 8001c0c:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30

    // Step 3: Randomly re-mask it.
    uint64_t acc = value;
 8001c10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001c14:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 1; i < MASKING_N; ++i) {
 8001c18:	2301      	movs	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	e01e      	b.n	8001c5c <masked_iota+0xa8>
        state[0][0].share[i] = get_random64();
 8001c1e:	f7fe fd65 	bl	80006ec <get_random64>
 8001c22:	4603      	mov	r3, r0
 8001c24:	17da      	asrs	r2, r3, #31
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001c36:	e9c3 1200 	strd	r1, r2, [r3]
        acc ^= state[0][0].share[i];
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001c4a:	ea80 0402 	eor.w	r4, r0, r2
 8001c4e:	ea81 0503 	eor.w	r5, r1, r3
 8001c52:	e9c7 4508 	strd	r4, r5, [r7, #32]
    for (int i = 1; i < MASKING_N; ++i) {
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	dddd      	ble.n	8001c1e <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 8001c62:	6979      	ldr	r1, [r7, #20]
 8001c64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c68:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001c6c:	bf00      	nop
 8001c6e:	3738      	adds	r7, #56	@ 0x38
 8001c70:	46bd      	mov	sp, r7
 8001c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c76 <masked_keccak_round>:
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
        }
    }
}

void masked_keccak_round(masked_uint64_t S[5][5], uint64_t rc) {
 8001c76:	b5b0      	push	{r4, r5, r7, lr}
 8001c78:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8001c82:	f6a1 71b4 	subw	r1, r1, #4020	@ 0xfb4
 8001c86:	6008      	str	r0, [r1, #0]
 8001c88:	4639      	mov	r1, r7
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]

    // Theta mixes each column’s bits into its neighbors to spread information.
    // For masking, we need to preserve XOR relationships between shares here.
    masked_theta(S);
 8001c8e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001c92:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	f7ff fca6 	bl	80015e8 <masked_theta>

    // Rho rotates each lane by a fixed offset.
    // Since we’re masking, we have to apply the same rotation to every share.
    masked_rho(S);
 8001c9c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001ca0:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7ff fdf9 	bl	800189c <masked_rho>

    // Pi moves lanes around — it's a shuffle of the 5×5 grid.
    // All shares for each lane must move together to keep masking valid.
    masked_pi(S);
 8001caa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001cae:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	f7ff fe4c 	bl	8001950 <masked_pi>

    // Chi is non-linear, and this is where leakage can happen — we need fresh randomness.
    // One matrix of random values per lane to feed into masked ANDs.
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8001cbe:	e020      	b.n	8001d02 <masked_keccak_round+0x8c>
        for (int x = 0; x < 5; ++x)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8001cc6:	e013      	b.n	8001cf0 <masked_keccak_round+0x7a>
            fill_random_matrix(r_chi[x][y]);
 8001cc8:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8001ccc:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 8001cda:	4413      	add	r3, r2
 8001cdc:	01db      	lsls	r3, r3, #7
 8001cde:	440b      	add	r3, r1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f9e5 	bl	80010b0 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8001ce6:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8001cea:	3301      	adds	r3, #1
 8001cec:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8001cf0:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	dde7      	ble.n	8001cc8 <masked_keccak_round+0x52>
    for (int y = 0; y < 5; ++y)
 8001cf8:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8001d02:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	ddda      	ble.n	8001cc0 <masked_keccak_round+0x4a>
    // We build a new state instead of modifying in place — safer and avoids weird bugs.
    masked_uint64_t chi_out[5][5];

    // Chi mixes rows using NOT and AND.
    // Because we’re masking, this step is the trickiest and needs careful randomness.
    masked_chi(chi_out, S, r_chi);
 8001d0a:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8001d0e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001d12:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001d16:	f107 0010 	add.w	r0, r7, #16
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	f7ff fec6 	bl	8001aac <masked_chi>

    // Iota adds in the round constant — this breaks symmetry and keeps things unpredictable.
    // Only touch share[0] to avoid messing up the masking.
    masked_iota(chi_out, rc);
 8001d20:	463b      	mov	r3, r7
 8001d22:	f107 0110 	add.w	r1, r7, #16
 8001d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2a:	4608      	mov	r0, r1
 8001d2c:	f7ff ff42 	bl	8001bb4 <masked_iota>

    // Move the updated state back into S so it's ready for the next round.
    for (int y = 0; y < 5; ++y)
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8001d36:	e038      	b.n	8001daa <masked_keccak_round+0x134>
        for (int x = 0; x < 5; ++x)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8001d3e:	e02b      	b.n	8001d98 <masked_keccak_round+0x122>
            S[x][y] = chi_out[x][y];
 8001d40:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	015b      	lsls	r3, r3, #5
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001d52:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	441a      	add	r2, r3
 8001d5a:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001d5e:	015b      	lsls	r3, r3, #5
 8001d60:	18d0      	adds	r0, r2, r3
 8001d62:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001d66:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 8001d6a:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 8001d78:	4413      	add	r3, r2
 8001d7a:	015b      	lsls	r3, r3, #5
 8001d7c:	440b      	add	r3, r1
 8001d7e:	4604      	mov	r4, r0
 8001d80:	461d      	mov	r5, r3
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; ++x)
 8001d8e:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8001d92:	3301      	adds	r3, #1
 8001d94:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8001d98:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	ddcf      	ble.n	8001d40 <masked_keccak_round+0xca>
    for (int y = 0; y < 5; ++y)
 8001da0:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001da4:	3301      	adds	r3, #1
 8001da6:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8001daa:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	ddc2      	ble.n	8001d38 <masked_keccak_round+0xc2>
}
 8001db2:	bf00      	nop
 8001db4:	bf00      	nop
 8001db6:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001dc0 <masked_keccak_f1600>:
 * Applies all 24 rounds of the Keccak permutation to the given masked state.
 * Each round applies the full sequence: Theta, Rho, Pi, Chi, Iota.
 *
 * state is the 5×5 masked Keccak state.
 */
void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	e00b      	b.n	8001de6 <masked_keccak_f1600+0x26>
        masked_keccak_round(state, RC[i]);
 8001dce:	4a0a      	ldr	r2, [pc, #40]	@ (8001df8 <masked_keccak_f1600+0x38>)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff4b 	bl	8001c76 <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	3301      	adds	r3, #1
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2b17      	cmp	r3, #23
 8001dea:	ddf0      	ble.n	8001dce <masked_keccak_f1600+0xe>
    }
}
 8001dec:	bf00      	nop
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	0800be58 	.word	0x0800be58

08001dfc <masked_keccak_sponge>:
#include "params.h"

// === Public API Implementations ===
void masked_keccak_sponge(uint8_t *output, size_t output_len,
                          const uint8_t *input, size_t input_len,
                          size_t rate, uint8_t domain_sep) {
 8001dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e00:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	f507 7474 	add.w	r4, r7, #976	@ 0x3d0
 8001e0a:	f5a4 7467 	sub.w	r4, r4, #924	@ 0x39c
 8001e0e:	6020      	str	r0, [r4, #0]
 8001e10:	f507 7074 	add.w	r0, r7, #976	@ 0x3d0
 8001e14:	f5a0 7068 	sub.w	r0, r0, #928	@ 0x3a0
 8001e18:	6001      	str	r1, [r0, #0]
 8001e1a:	f507 7174 	add.w	r1, r7, #976	@ 0x3d0
 8001e1e:	f5a1 7169 	sub.w	r1, r1, #932	@ 0x3a4
 8001e22:	600a      	str	r2, [r1, #0]
 8001e24:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8001e28:	f5a2 726a 	sub.w	r2, r2, #936	@ 0x3a8
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	466b      	mov	r3, sp
 8001e30:	461c      	mov	r4, r3
    masked_uint64_t state[5][5];

    //Step 1: Initialize state
    for (int x = 0; x < 5; x++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001e38:	e036      	b.n	8001ea8 <masked_keccak_sponge+0xac>
        for (int y = 0; y < 5; y++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8001e40:	e029      	b.n	8001e96 <masked_keccak_sponge+0x9a>
            for (int i = 0; i < MASKING_N; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001e48:	e01c      	b.n	8001e84 <masked_keccak_sponge+0x88>
                state[x][y].share[i] = 0;
 8001e4a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001e4e:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8001e52:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001e56:	461a      	mov	r2, r3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001e60:	4413      	add	r3, r2
 8001e62:	009a      	lsls	r2, r3, #2
 8001e64:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4419      	add	r1, r3
 8001e6e:	f04f 0200 	mov.w	r2, #0
 8001e72:	f04f 0300 	mov.w	r3, #0
 8001e76:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001e7a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001e7e:	3301      	adds	r3, #1
 8001e80:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8001e84:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	ddde      	ble.n	8001e4a <masked_keccak_sponge+0x4e>
        for (int y = 0; y < 5; y++) {
 8001e8c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001e90:	3301      	adds	r3, #1
 8001e92:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8001e96:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	ddd1      	ble.n	8001e42 <masked_keccak_sponge+0x46>
    for (int x = 0; x < 5; x++) {
 8001e9e:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8001ea8:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	ddc4      	ble.n	8001e3a <masked_keccak_sponge+0x3e>
            }
        }
    }

    //Step 2: Absorb full input blocks
    size_t offset = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
    while (input_len >= rate) {
 8001eb6:	e0b2      	b.n	800201e <masked_keccak_sponge+0x222>
        for (int i = 0; i < rate; i += 8) {
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001ebe:	e08e      	b.n	8001fde <masked_keccak_sponge+0x1e2>
            uint64_t lane = 0;
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001ed2:	e03a      	b.n	8001f4a <masked_keccak_sponge+0x14e>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8001ed4:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001ed8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8001edc:	441a      	add	r2, r3
 8001ede:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001ee2:	441a      	add	r2, r3
 8001ee4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8001ee8:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001efa:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001efe:	00d9      	lsls	r1, r3, #3
 8001f00:	f1a1 0320 	sub.w	r3, r1, #32
 8001f04:	f1c1 0220 	rsb	r2, r1, #32
 8001f08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f0a:	fa00 fb01 	lsl.w	fp, r0, r1
 8001f0e:	6a38      	ldr	r0, [r7, #32]
 8001f10:	fa00 f303 	lsl.w	r3, r0, r3
 8001f14:	ea4b 0b03 	orr.w	fp, fp, r3
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	fa23 f202 	lsr.w	r2, r3, r2
 8001f1e:	ea4b 0b02 	orr.w	fp, fp, r2
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	fa03 fa01 	lsl.w	sl, r3, r1
 8001f28:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 8001f2c:	ea42 010a 	orr.w	r1, r2, sl
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	ea43 030b 	orr.w	r3, r3, fp
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3c:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 8001f40:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001f44:	3301      	adds	r3, #1
 8001f46:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001f4a:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8001f4e:	2b07      	cmp	r3, #7
 8001f50:	ddc0      	ble.n	8001ed4 <masked_keccak_sponge+0xd8>
            }

            size_t x = (i / 8) % 5;
 8001f52:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	da00      	bge.n	8001f5c <masked_keccak_sponge+0x160>
 8001f5a:	3307      	adds	r3, #7
 8001f5c:	10db      	asrs	r3, r3, #3
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4bd7      	ldr	r3, [pc, #860]	@ (80022c0 <masked_keccak_sponge+0x4c4>)
 8001f62:	fb83 2301 	smull	r2, r3, r3, r1
 8001f66:	105a      	asrs	r2, r3, #1
 8001f68:	17cb      	asrs	r3, r1, #31
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	441a      	add	r2, r3
 8001f72:	1a8b      	subs	r3, r1, r2
 8001f74:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
            size_t y = (i / 8) / 5;
 8001f78:	f8d7 13bc 	ldr.w	r1, [r7, #956]	@ 0x3bc
 8001f7c:	4bd0      	ldr	r3, [pc, #832]	@ (80022c0 <masked_keccak_sponge+0x4c4>)
 8001f7e:	fb83 2301 	smull	r2, r3, r3, r1
 8001f82:	111a      	asrs	r2, r3, #4
 8001f84:	17cb      	asrs	r3, r1, #31
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8001f8c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001f90:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 8001f94:	4608      	mov	r0, r1
 8001f96:	f7ff fa61 	bl	800145c <masked_value_set>
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8001f9a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001f9e:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	441a      	add	r2, r3
 8001fa8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001fac:	4413      	add	r3, r2
 8001fae:	015b      	lsls	r3, r3, #5
 8001fb0:	18c8      	adds	r0, r1, r3
 8001fb2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001fb6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001fba:	461a      	mov	r2, r3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	441a      	add	r2, r3
 8001fc0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001fc4:	4413      	add	r3, r2
 8001fc6:	015b      	lsls	r3, r3, #5
 8001fc8:	4419      	add	r1, r3
 8001fca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fce:	461a      	mov	r2, r3
 8001fd0:	f7ff f8b5 	bl	800113e <masked_xor>
        for (int i = 0; i < rate; i += 8) {
 8001fd4:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8001fd8:	3308      	adds	r3, #8
 8001fda:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001fde:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8001fe2:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f63f af6a 	bhi.w	8001ec0 <masked_keccak_sponge+0xc4>
        }

        masked_keccak_f1600(state);
 8001fec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fee5 	bl	8001dc0 <masked_keccak_f1600>
        offset += rate;
 8001ff6:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8001ffa:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8001ffe:	4413      	add	r3, r2
 8002000:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        input_len -= rate;
 8002004:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002008:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 800200c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002010:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	600b      	str	r3, [r1, #0]
    while (input_len >= rate) {
 800201e:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002022:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800202c:	429a      	cmp	r2, r3
 800202e:	f4bf af43 	bcs.w	8001eb8 <masked_keccak_sponge+0xbc>
    }

    //Step 3: Final padded block with domain separation
    uint8_t block[rate];
 8002032:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	@ 0x3f8
 8002036:	460b      	mov	r3, r1
 8002038:	3b01      	subs	r3, #1
 800203a:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 800203e:	2300      	movs	r3, #0
 8002040:	61b9      	str	r1, [r7, #24]
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002050:	4658      	mov	r0, fp
 8002052:	00c3      	lsls	r3, r0, #3
 8002054:	4650      	mov	r0, sl
 8002056:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800205a:	4650      	mov	r0, sl
 800205c:	00c2      	lsls	r2, r0, #3
 800205e:	2300      	movs	r3, #0
 8002060:	6139      	str	r1, [r7, #16]
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002070:	4658      	mov	r0, fp
 8002072:	00c3      	lsls	r3, r0, #3
 8002074:	4650      	mov	r0, sl
 8002076:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800207a:	4650      	mov	r0, sl
 800207c:	00c2      	lsls	r2, r0, #3
 800207e:	1dcb      	adds	r3, r1, #7
 8002080:	08db      	lsrs	r3, r3, #3
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	ebad 0d03 	sub.w	sp, sp, r3
 8002088:	466b      	mov	r3, sp
 800208a:	3300      	adds	r3, #0
 800208c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    for (size_t i = 0; i < rate; ++i) {
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8002096:	e00b      	b.n	80020b0 <masked_keccak_sponge+0x2b4>
        block[i] = 0;
 8002098:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800209c:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80020a0:	4413      	add	r3, r2
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < rate; ++i) {
 80020a6:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80020aa:	3301      	adds	r3, #1
 80020ac:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 80020b0:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80020b4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3ed      	bcc.n	8002098 <masked_keccak_sponge+0x29c>
    }

    for (size_t i = 0; i < input_len; ++i) {
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80020c2:	e017      	b.n	80020f4 <masked_keccak_sponge+0x2f8>
        block[i] = input[offset + i];
 80020c4:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 80020c8:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80020cc:	4413      	add	r3, r2
 80020ce:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 80020d2:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	4413      	add	r3, r2
 80020da:	7819      	ldrb	r1, [r3, #0]
 80020dc:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80020e0:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80020e4:	4413      	add	r3, r2
 80020e6:	460a      	mov	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; ++i) {
 80020ea:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 80020ee:	3301      	adds	r3, #1
 80020f0:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80020f4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80020f8:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 80020fc:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3de      	bcc.n	80020c4 <masked_keccak_sponge+0x2c8>
    }

    block[input_len] ^= domain_sep;   // Domain separation marker (e.g., 0x06 or 0x1F)
 8002106:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800210a:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800210e:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4413      	add	r3, r2
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	f897 33fc 	ldrb.w	r3, [r7, #1020]	@ 0x3fc
 800211c:	4053      	eors	r3, r2
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8002124:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002128:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	460a      	mov	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
    block[rate - 1] ^= 0x80;          // Padding rule per Keccak spec
 8002134:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8002138:	3b01      	subs	r3, #1
 800213a:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8002144:	3a01      	subs	r2, #1
 8002146:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 800214a:	43db      	mvns	r3, r3
 800214c:	b2d9      	uxtb	r1, r3
 800214e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8002152:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < rate; i += 8) {
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 800215a:	e08d      	b.n	8002278 <masked_keccak_sponge+0x47c>
        uint64_t lane = 0;
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 800216e:	e02f      	b.n	80021d0 <masked_keccak_sponge+0x3d4>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8002170:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8002174:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8002178:	4413      	add	r3, r2
 800217a:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2200      	movs	r2, #0
 8002184:	461d      	mov	r5, r3
 8002186:	4616      	mov	r6, r2
 8002188:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	f1a3 0120 	sub.w	r1, r3, #32
 8002192:	f1c3 0220 	rsb	r2, r3, #32
 8002196:	fa06 f903 	lsl.w	r9, r6, r3
 800219a:	fa05 f101 	lsl.w	r1, r5, r1
 800219e:	ea49 0901 	orr.w	r9, r9, r1
 80021a2:	fa25 f202 	lsr.w	r2, r5, r2
 80021a6:	ea49 0902 	orr.w	r9, r9, r2
 80021aa:	fa05 f803 	lsl.w	r8, r5, r3
 80021ae:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80021b2:	ea42 0108 	orr.w	r1, r2, r8
 80021b6:	6039      	str	r1, [r7, #0]
 80021b8:	ea43 0309 	orr.w	r3, r3, r9
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021c2:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 80021c6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80021ca:	3301      	adds	r3, #1
 80021cc:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80021d0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80021d4:	2b07      	cmp	r3, #7
 80021d6:	dc09      	bgt.n	80021ec <masked_keccak_sponge+0x3f0>
 80021d8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80021dc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80021e0:	4413      	add	r3, r2
 80021e2:	461a      	mov	r2, r3
 80021e4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d8c1      	bhi.n	8002170 <masked_keccak_sponge+0x374>
        }

        size_t x = (i / 8) % 5;
 80021ec:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	da00      	bge.n	80021f6 <masked_keccak_sponge+0x3fa>
 80021f4:	3307      	adds	r3, #7
 80021f6:	10db      	asrs	r3, r3, #3
 80021f8:	4619      	mov	r1, r3
 80021fa:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <masked_keccak_sponge+0x4c4>)
 80021fc:	fb83 2301 	smull	r2, r3, r3, r1
 8002200:	105a      	asrs	r2, r3, #1
 8002202:	17cb      	asrs	r3, r1, #31
 8002204:	1ad2      	subs	r2, r2, r3
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	1aca      	subs	r2, r1, r3
 800220e:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
        size_t y = (i / 8) / 5;
 8002212:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002216:	4a2a      	ldr	r2, [pc, #168]	@ (80022c0 <masked_keccak_sponge+0x4c4>)
 8002218:	fb82 1203 	smull	r1, r2, r2, r3
 800221c:	1112      	asrs	r2, r2, #4
 800221e:	17db      	asrs	r3, r3, #31
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 8002226:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800222a:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 800222e:	4608      	mov	r0, r1
 8002230:	f7ff f914 	bl	800145c <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8002234:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002238:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8002246:	4413      	add	r3, r2
 8002248:	015b      	lsls	r3, r3, #5
 800224a:	18c8      	adds	r0, r1, r3
 800224c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002250:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 800225e:	4413      	add	r3, r2
 8002260:	015b      	lsls	r3, r3, #5
 8002262:	440b      	add	r3, r1
 8002264:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002268:	4619      	mov	r1, r3
 800226a:	f7fe ff68 	bl	800113e <masked_xor>
    for (int i = 0; i < rate; i += 8) {
 800226e:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8002272:	3308      	adds	r3, #8
 8002274:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8002278:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800227c:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 8002280:	429a      	cmp	r2, r3
 8002282:	f63f af6b 	bhi.w	800215c <masked_keccak_sponge+0x360>
    }

    masked_keccak_f1600(state);
 8002286:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fd98 	bl	8001dc0 <masked_keccak_f1600>

    //Step 4: Squeeze the requested output
    masked_squeeze(output, output_len, state, rate);
 8002290:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8002294:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8002298:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 800229c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80022a0:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 80022a4:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80022a8:	6809      	ldr	r1, [r1, #0]
 80022aa:	6800      	ldr	r0, [r0, #0]
 80022ac:	f7ff f90e 	bl	80014cc <masked_squeeze>
 80022b0:	46a5      	mov	sp, r4
}
 80022b2:	bf00      	nop
 80022b4:	f507 7775 	add.w	r7, r7, #980	@ 0x3d4
 80022b8:	46bd      	mov	sp, r7
 80022ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022be:	bf00      	nop
 80022c0:	66666667 	.word	0x66666667

080022c4 <masked_sha3_224>:


// SHA3-224: 28-byte output, 1152-bit rate
void masked_sha3_224(uint8_t *output, const uint8_t *input, size_t input_len) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 28, input, input_len, 1152 / 8, DOMAIN_SHA3);
 80022d0:	2306      	movs	r3, #6
 80022d2:	9301      	str	r3, [sp, #4]
 80022d4:	2390      	movs	r3, #144	@ 0x90
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	211c      	movs	r1, #28
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f7ff fd8c 	bl	8001dfc <masked_keccak_sponge>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <masked_sha3_256>:

// SHA3-256: Output = 32 bytes, Rate = 136 bytes (1088 bits)
void masked_sha3_256(uint8_t *output, const uint8_t *input, size_t input_len) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 32, input, input_len, 136, DOMAIN_SHA3);
 80022f8:	2306      	movs	r3, #6
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2388      	movs	r3, #136	@ 0x88
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	2120      	movs	r1, #32
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff fd78 	bl	8001dfc <masked_keccak_sponge>
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <masked_sha3_384>:

// SHA3-384: 48-byte output, 832-bit rate
void masked_sha3_384(uint8_t *output, const uint8_t *input, size_t input_len) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 48, input, input_len, 832 / 8, DOMAIN_SHA3);
 8002320:	2306      	movs	r3, #6
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2368      	movs	r3, #104	@ 0x68
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	2130      	movs	r1, #48	@ 0x30
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff fd64 	bl	8001dfc <masked_keccak_sponge>
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <masked_sha3_512>:

// SHA3-512: Output = 64 bytes, Rate = 72 bytes (576 bits)
void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 64, input, input_len, 72, DOMAIN_SHA3);
 8002348:	2306      	movs	r3, #6
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	2348      	movs	r3, #72	@ 0x48
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	2140      	movs	r1, #64	@ 0x40
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff fd50 	bl	8001dfc <masked_keccak_sponge>
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <masked_shake128>:

// SHAKE128: Extendable output, Rate = 168 bytes (1344 bits)
void masked_shake128(uint8_t *output, size_t output_len, const uint8_t *input, size_t input_len) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
    masked_keccak_sponge(output, output_len, input, input_len, 168, DOMAIN_SHAKE);
 8002372:	231f      	movs	r3, #31
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	23a8      	movs	r3, #168	@ 0xa8
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	68b9      	ldr	r1, [r7, #8]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fd3b 	bl	8001dfc <masked_keccak_sponge>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <masked_shake256>:

// SHAKE256: Extendable output, Rate = 136 bytes (1088 bits)
void masked_shake256(uint8_t *output, size_t output_len, const uint8_t *input, size_t input_len) {
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af02      	add	r7, sp, #8
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	603b      	str	r3, [r7, #0]
    masked_keccak_sponge(output, output_len, input, input_len, 136, DOMAIN_SHAKE);
 800239c:	231f      	movs	r3, #31
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2388      	movs	r3, #136	@ 0x88
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f7ff fd26 	bl	8001dfc <masked_keccak_sponge>
}
 80023b0:	bf00      	nop
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002404 <HAL_MspInit+0x4c>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002404 <HAL_MspInit+0x4c>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023d6:	607b      	str	r3, [r7, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a08      	ldr	r2, [pc, #32]	@ (8002404 <HAL_MspInit+0x4c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b06      	ldr	r3, [pc, #24]	@ (8002404 <HAL_MspInit+0x4c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80023f6:	2007      	movs	r0, #7
 80023f8:	f000 fbd8 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40023800 	.word	0x40023800

08002408 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a19      	ldr	r2, [pc, #100]	@ (800248c <HAL_I2C_MspInit+0x84>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d12c      	bne.n	8002484 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a17      	ldr	r2, [pc, #92]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002446:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800244c:	2312      	movs	r3, #18
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002450:	2301      	movs	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002458:	2304      	movs	r3, #4
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	480c      	ldr	r0, [pc, #48]	@ (8002494 <HAL_I2C_MspInit+0x8c>)
 8002464:	f000 fbe4 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 8002472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002476:	6413      	str	r3, [r2, #64]	@ 0x40
 8002478:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_I2C_MspInit+0x88>)
 800247a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	@ 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40005400 	.word	0x40005400
 8002490:	40023800 	.word	0x40023800
 8002494:	40020400 	.word	0x40020400

08002498 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08e      	sub	sp, #56	@ 0x38
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a31      	ldr	r2, [pc, #196]	@ (8002588 <HAL_I2S_MspInit+0xf0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d15a      	bne.n	800257e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80024c8:	2301      	movs	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80024cc:	23c0      	movs	r3, #192	@ 0xc0
 80024ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4618      	mov	r0, r3
 80024da:	f004 f90f 	bl	80066fc <HAL_RCCEx_PeriphCLKConfig>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80024e4:	f7fe fdde 	bl	80010a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80024e8:	2300      	movs	r3, #0
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	4a26      	ldr	r2, [pc, #152]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 80024f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f8:	4b24      	ldr	r3, [pc, #144]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	4b20      	ldr	r3, [pc, #128]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 800250a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250c:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 800250e:	f043 0301 	orr.w	r3, r3, #1
 8002512:	6313      	str	r3, [r2, #48]	@ 0x30
 8002514:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 8002516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	4a18      	ldr	r2, [pc, #96]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002530:	4b16      	ldr	r3, [pc, #88]	@ (800258c <HAL_I2S_MspInit+0xf4>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800253c:	2310      	movs	r3, #16
 800253e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800254c:	2306      	movs	r3, #6
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002554:	4619      	mov	r1, r3
 8002556:	480e      	ldr	r0, [pc, #56]	@ (8002590 <HAL_I2S_MspInit+0xf8>)
 8002558:	f000 fb6a 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800255c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256a:	2300      	movs	r3, #0
 800256c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800256e:	2306      	movs	r3, #6
 8002570:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002576:	4619      	mov	r1, r3
 8002578:	4806      	ldr	r0, [pc, #24]	@ (8002594 <HAL_I2S_MspInit+0xfc>)
 800257a:	f000 fb59 	bl	8002c30 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800257e:	bf00      	nop
 8002580:	3738      	adds	r7, #56	@ 0x38
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40003c00 	.word	0x40003c00
 800258c:	40023800 	.word	0x40023800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020800 	.word	0x40020800

08002598 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0b      	ldr	r2, [pc, #44]	@ (80025d4 <HAL_RNG_MspInit+0x3c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d10d      	bne.n	80025c6 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b0a      	ldr	r3, [pc, #40]	@ (80025d8 <HAL_RNG_MspInit+0x40>)
 80025b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b2:	4a09      	ldr	r2, [pc, #36]	@ (80025d8 <HAL_RNG_MspInit+0x40>)
 80025b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <HAL_RNG_MspInit+0x40>)
 80025bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	50060800 	.word	0x50060800
 80025d8:	40023800 	.word	0x40023800

080025dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	@ 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a19      	ldr	r2, [pc, #100]	@ (8002660 <HAL_SPI_MspInit+0x84>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d12b      	bne.n	8002656 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	4b18      	ldr	r3, [pc, #96]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a17      	ldr	r2, [pc, #92]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b11      	ldr	r3, [pc, #68]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a10      	ldr	r2, [pc, #64]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b0e      	ldr	r3, [pc, #56]	@ (8002664 <HAL_SPI_MspInit+0x88>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002636:	23e0      	movs	r3, #224	@ 0xe0
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002646:	2305      	movs	r3, #5
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	4619      	mov	r1, r3
 8002650:	4805      	ldr	r0, [pc, #20]	@ (8002668 <HAL_SPI_MspInit+0x8c>)
 8002652:	f000 faed 	bl	8002c30 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002656:	bf00      	nop
 8002658:	3728      	adds	r7, #40	@ 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40013000 	.word	0x40013000
 8002664:	40023800 	.word	0x40023800
 8002668:	40020000 	.word	0x40020000

0800266c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 0314 	add.w	r3, r7, #20
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a19      	ldr	r2, [pc, #100]	@ (80026f0 <HAL_UART_MspInit+0x84>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d12b      	bne.n	80026e6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	4a17      	ldr	r2, [pc, #92]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269c:	6413      	str	r3, [r2, #64]	@ 0x40
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	4b11      	ldr	r3, [pc, #68]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a10      	ldr	r2, [pc, #64]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b0e      	ldr	r3, [pc, #56]	@ (80026f4 <HAL_UART_MspInit+0x88>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	60fb      	str	r3, [r7, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026c6:	230c      	movs	r3, #12
 80026c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d2:	2303      	movs	r3, #3
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d6:	2307      	movs	r3, #7
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <HAL_UART_MspInit+0x8c>)
 80026e2:	f000 faa5 	bl	8002c30 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80026e6:	bf00      	nop
 80026e8:	3728      	adds	r7, #40	@ 0x28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	40004400 	.word	0x40004400
 80026f4:	40023800 	.word	0x40023800
 80026f8:	40020000 	.word	0x40020000

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <NMI_Handler+0x4>

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <HardFault_Handler+0x4>

0800270c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <MemManage_Handler+0x4>

08002714 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <BusFault_Handler+0x4>

0800271c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <UsageFault_Handler+0x4>

08002724 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr

0800274e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002752:	f000 f917 	bl	8002984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002760:	4802      	ldr	r0, [pc, #8]	@ (800276c <OTG_FS_IRQHandler+0x10>)
 8002762:	f000 fefb 	bl	800355c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200005d4 	.word	0x200005d4

08002770 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	e00a      	b.n	8002798 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002782:	f3af 8000 	nop.w
 8002786:	4601      	mov	r1, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	60ba      	str	r2, [r7, #8]
 800278e:	b2ca      	uxtb	r2, r1
 8002790:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3301      	adds	r3, #1
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	dbf0      	blt.n	8002782 <_read+0x12>
  }

  return len;
 80027a0:	687b      	ldr	r3, [r7, #4]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3718      	adds	r7, #24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80027aa:	b480      	push	{r7}
 80027ac:	b083      	sub	sp, #12
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027d2:	605a      	str	r2, [r3, #4]
  return 0;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002804:	4a14      	ldr	r2, [pc, #80]	@ (8002858 <_sbrk+0x5c>)
 8002806:	4b15      	ldr	r3, [pc, #84]	@ (800285c <_sbrk+0x60>)
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002810:	4b13      	ldr	r3, [pc, #76]	@ (8002860 <_sbrk+0x64>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002818:	4b11      	ldr	r3, [pc, #68]	@ (8002860 <_sbrk+0x64>)
 800281a:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <_sbrk+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <_sbrk+0x64>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4413      	add	r3, r2
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	429a      	cmp	r2, r3
 800282a:	d207      	bcs.n	800283c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800282c:	f008 fdfc 	bl	800b428 <__errno>
 8002830:	4603      	mov	r3, r0
 8002832:	220c      	movs	r2, #12
 8002834:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002836:	f04f 33ff 	mov.w	r3, #4294967295
 800283a:	e009      	b.n	8002850 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <_sbrk+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <_sbrk+0x64>)
 800284c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800284e:	68fb      	ldr	r3, [r7, #12]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20020000 	.word	0x20020000
 800285c:	00000400 	.word	0x00000400
 8002860:	200001f0 	.word	0x200001f0
 8002864:	20000b00 	.word	0x20000b00

08002868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <SystemInit+0x20>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002872:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <SystemInit+0x20>)
 8002874:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002878:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800287c:	bf00      	nop
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800288c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002890:	f7ff ffea 	bl	8002868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002894:	480c      	ldr	r0, [pc, #48]	@ (80028c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002896:	490d      	ldr	r1, [pc, #52]	@ (80028cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002898:	4a0d      	ldr	r2, [pc, #52]	@ (80028d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800289c:	e002      	b.n	80028a4 <LoopCopyDataInit>

0800289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028a2:	3304      	adds	r3, #4

080028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028a8:	d3f9      	bcc.n	800289e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028ac:	4c0a      	ldr	r4, [pc, #40]	@ (80028d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b0:	e001      	b.n	80028b6 <LoopFillZerobss>

080028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028b4:	3204      	adds	r2, #4

080028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028b8:	d3fb      	bcc.n	80028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ba:	f008 fdbb 	bl	800b434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028be:	f7fe f97b 	bl	8000bb8 <main>
  bx  lr    
 80028c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028cc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80028d0:	0800bf90 	.word	0x0800bf90
  ldr r2, =_sbss
 80028d4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80028d8:	20000b00 	.word	0x20000b00

080028dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC_IRQHandler>
	...

080028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002920 <HAL_Init+0x40>)
 80028ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002920 <HAL_Init+0x40>)
 80028f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028fc:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a07      	ldr	r2, [pc, #28]	@ (8002920 <HAL_Init+0x40>)
 8002902:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002906:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002908:	2003      	movs	r0, #3
 800290a:	f000 f94f 	bl	8002bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800290e:	2000      	movs	r0, #0
 8002910:	f000 f808 	bl	8002924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002914:	f7ff fd50 	bl	80023b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023c00 	.word	0x40023c00

08002924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800292c:	4b12      	ldr	r3, [pc, #72]	@ (8002978 <HAL_InitTick+0x54>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_InitTick+0x58>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4619      	mov	r1, r3
 8002936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800293a:	fbb3 f3f1 	udiv	r3, r3, r1
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f967 	bl	8002c16 <HAL_SYSTICK_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e00e      	b.n	8002970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b0f      	cmp	r3, #15
 8002956:	d80a      	bhi.n	800296e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002958:	2200      	movs	r2, #0
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	f04f 30ff 	mov.w	r0, #4294967295
 8002960:	f000 f92f 	bl	8002bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002964:	4a06      	ldr	r2, [pc, #24]	@ (8002980 <HAL_InitTick+0x5c>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
 800296c:	e000      	b.n	8002970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000000 	.word	0x20000000
 800297c:	20000008 	.word	0x20000008
 8002980:	20000004 	.word	0x20000004

08002984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002988:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_IncTick+0x20>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b06      	ldr	r3, [pc, #24]	@ (80029a8 <HAL_IncTick+0x24>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4413      	add	r3, r2
 8002994:	4a04      	ldr	r2, [pc, #16]	@ (80029a8 <HAL_IncTick+0x24>)
 8002996:	6013      	str	r3, [r2, #0]
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000008 	.word	0x20000008
 80029a8:	200001f4 	.word	0x200001f4

080029ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  return uwTick;
 80029b0:	4b03      	ldr	r3, [pc, #12]	@ (80029c0 <HAL_GetTick+0x14>)
 80029b2:	681b      	ldr	r3, [r3, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	200001f4 	.word	0x200001f4

080029c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029cc:	f7ff ffee 	bl	80029ac <HAL_GetTick>
 80029d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d005      	beq.n	80029ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029de:	4b0a      	ldr	r3, [pc, #40]	@ (8002a08 <HAL_Delay+0x44>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4413      	add	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ea:	bf00      	nop
 80029ec:	f7ff ffde 	bl	80029ac <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d8f7      	bhi.n	80029ec <HAL_Delay+0x28>
  {
  }
}
 80029fc:	bf00      	nop
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000008 	.word	0x20000008

08002a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a3e:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <__NVIC_SetPriorityGrouping+0x44>)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	60d3      	str	r3, [r2, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a58:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <__NVIC_GetPriorityGrouping+0x18>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	f003 0307 	and.w	r3, r3, #7
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	db0b      	blt.n	8002a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4907      	ldr	r1, [pc, #28]	@ (8002aa8 <__NVIC_EnableIRQ+0x38>)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2001      	movs	r0, #1
 8002a92:	fa00 f202 	lsl.w	r2, r0, r2
 8002a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000e100 	.word	0xe000e100

08002aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	db0a      	blt.n	8002ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	490c      	ldr	r1, [pc, #48]	@ (8002af8 <__NVIC_SetPriority+0x4c>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	0112      	lsls	r2, r2, #4
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ad4:	e00a      	b.n	8002aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4908      	ldr	r1, [pc, #32]	@ (8002afc <__NVIC_SetPriority+0x50>)
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	3b04      	subs	r3, #4
 8002ae4:	0112      	lsls	r2, r2, #4
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	440b      	add	r3, r1
 8002aea:	761a      	strb	r2, [r3, #24]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000e100 	.word	0xe000e100
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b089      	sub	sp, #36	@ 0x24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f1c3 0307 	rsb	r3, r3, #7
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	bf28      	it	cs
 8002b1e:	2304      	movcs	r3, #4
 8002b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3304      	adds	r3, #4
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d902      	bls.n	8002b30 <NVIC_EncodePriority+0x30>
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3b03      	subs	r3, #3
 8002b2e:	e000      	b.n	8002b32 <NVIC_EncodePriority+0x32>
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	43da      	mvns	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	401a      	ands	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b58:	4313      	orrs	r3, r2
         );
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b78:	d301      	bcc.n	8002b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e00f      	b.n	8002b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba8 <SysTick_Config+0x40>)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b86:	210f      	movs	r1, #15
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295
 8002b8c:	f7ff ff8e 	bl	8002aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <SysTick_Config+0x40>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b96:	4b04      	ldr	r3, [pc, #16]	@ (8002ba8 <SysTick_Config+0x40>)
 8002b98:	2207      	movs	r2, #7
 8002b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	e000e010 	.word	0xe000e010

08002bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f7ff ff29 	bl	8002a0c <__NVIC_SetPriorityGrouping>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b086      	sub	sp, #24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bd4:	f7ff ff3e 	bl	8002a54 <__NVIC_GetPriorityGrouping>
 8002bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	6978      	ldr	r0, [r7, #20]
 8002be0:	f7ff ff8e 	bl	8002b00 <NVIC_EncodePriority>
 8002be4:	4602      	mov	r2, r0
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff ff5d 	bl	8002aac <__NVIC_SetPriority>
}
 8002bf2:	bf00      	nop
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4603      	mov	r3, r0
 8002c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff31 	bl	8002a70 <__NVIC_EnableIRQ>
}
 8002c0e:	bf00      	nop
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ffa2 	bl	8002b68 <SysTick_Config>
 8002c24:	4603      	mov	r3, r0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	@ 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e16b      	b.n	8002f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 815a 	bne.w	8002f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80b4 	beq.w	8002f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b60      	ldr	r3, [pc, #384]	@ (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f40 <HAL_GPIO_Init+0x310>)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	@ (8002f44 <HAL_GPIO_Init+0x314>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02b      	beq.n	8002e56 <HAL_GPIO_Init+0x226>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a51      	ldr	r2, [pc, #324]	@ (8002f48 <HAL_GPIO_Init+0x318>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d025      	beq.n	8002e52 <HAL_GPIO_Init+0x222>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a50      	ldr	r2, [pc, #320]	@ (8002f4c <HAL_GPIO_Init+0x31c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01f      	beq.n	8002e4e <HAL_GPIO_Init+0x21e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	@ (8002f50 <HAL_GPIO_Init+0x320>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x21a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4e      	ldr	r2, [pc, #312]	@ (8002f54 <HAL_GPIO_Init+0x324>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x216>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4d      	ldr	r2, [pc, #308]	@ (8002f58 <HAL_GPIO_Init+0x328>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	@ (8002f5c <HAL_GPIO_Init+0x32c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	@ (8002f60 <HAL_GPIO_Init+0x330>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x20a>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e00e      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e00c      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e3e:	2306      	movs	r3, #6
 8002e40:	e00a      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e42:	2305      	movs	r3, #5
 8002e44:	e008      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e56:	2300      	movs	r3, #0
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e68:	4935      	ldr	r1, [pc, #212]	@ (8002f40 <HAL_GPIO_Init+0x310>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b3b      	ldr	r3, [pc, #236]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a32      	ldr	r2, [pc, #200]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b30      	ldr	r3, [pc, #192]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a27      	ldr	r2, [pc, #156]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eca:	4b26      	ldr	r3, [pc, #152]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eee:	4a1d      	ldr	r2, [pc, #116]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f18:	4a12      	ldr	r2, [pc, #72]	@ (8002f64 <HAL_GPIO_Init+0x334>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f67f ae90 	bls.w	8002c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40021c00 	.word	0x40021c00
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f84:	e003      	b.n	8002f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e059      	b.n	8003060 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f007 fc3a 	bl	800a840 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fda:	d102      	bne.n	8002fe2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fa53 	bl	8007492 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7c1a      	ldrb	r2, [r3, #16]
 8002ff4:	f88d 2000 	strb.w	r2, [sp]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffc:	f004 f9d4 	bl	80073a8 <USB_CoreInit>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e026      	b.n	8003060 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fa4b 	bl	80074b4 <USB_SetCurrentMode>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e017      	b.n	8003060 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7c1a      	ldrb	r2, [r3, #16]
 8003038:	f88d 2000 	strb.w	r2, [sp]
 800303c:	3304      	adds	r3, #4
 800303e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003040:	f004 fbee 	bl	8007820 <USB_HostInit>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e004      	b.n	8003060 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b08b      	sub	sp, #44	@ 0x2c
 800306c:	af04      	add	r7, sp, #16
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	70fb      	strb	r3, [r7, #3]
 800307a:	460b      	mov	r3, r1
 800307c:	70bb      	strb	r3, [r7, #2]
 800307e:	4613      	mov	r3, r2
 8003080:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003082:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003084:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_HCD_HC_Init+0x2c>
 8003090:	2302      	movs	r3, #2
 8003092:	e09d      	b.n	80031d0 <HAL_HCD_HC_Init+0x168>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3319      	adds	r3, #25
 80030ac:	2200      	movs	r2, #0
 80030ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3314      	adds	r3, #20
 80030c0:	787a      	ldrb	r2, [r7, #1]
 80030c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3315      	adds	r3, #21
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3326      	adds	r3, #38	@ 0x26
 80030e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80030ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	78bb      	ldrb	r3, [r7, #2]
 80030f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f6:	b2d8      	uxtb	r0, r3
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3316      	adds	r3, #22
 8003106:	4602      	mov	r2, r0
 8003108:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fbc8 	bl	80038a4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003114:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003118:	2b00      	cmp	r3, #0
 800311a:	da0a      	bge.n	8003132 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	011b      	lsls	r3, r3, #4
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	3317      	adds	r3, #23
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
 8003130:	e009      	b.n	8003146 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3317      	adds	r3, #23
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f004 fccc 	bl	8007ae8 <USB_GetHostSpeed>
 8003150:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003152:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d10b      	bne.n	8003172 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800315a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_HCD_HC_Init+0x10a>
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d104      	bne.n	8003172 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2bbc      	cmp	r3, #188	@ 0xbc
 800316c:	d901      	bls.n	8003172 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800316e:	23bc      	movs	r3, #188	@ 0xbc
 8003170:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	3318      	adds	r3, #24
 8003182:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003186:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	b298      	uxth	r0, r3
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3328      	adds	r3, #40	@ 0x28
 800319c:	4602      	mov	r2, r0
 800319e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	787c      	ldrb	r4, [r7, #1]
 80031aa:	78ba      	ldrb	r2, [r7, #2]
 80031ac:	78f9      	ldrb	r1, [r7, #3]
 80031ae:	9302      	str	r3, [sp, #8]
 80031b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4623      	mov	r3, r4
 80031be:	f004 fcbb 	bl	8007b38 <USB_HC_Init>
 80031c2:	4603      	mov	r3, r0
 80031c4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80031ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd90      	pop	{r4, r7, pc}

080031d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_HCD_HC_Halt+0x1e>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e00f      	b.n	8003216 <HAL_HCD_HC_Halt+0x3e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f005 f84d 	bl	80082a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003214:	7bfb      	ldrb	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	70fb      	strb	r3, [r7, #3]
 8003232:	460b      	mov	r3, r1
 8003234:	70bb      	strb	r3, [r7, #2]
 8003236:	4613      	mov	r3, r2
 8003238:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3317      	adds	r3, #23
 800324a:	78ba      	ldrb	r2, [r7, #2]
 800324c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	3326      	adds	r3, #38	@ 0x26
 800325e:	787a      	ldrb	r2, [r7, #1]
 8003260:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003262:	7c3b      	ldrb	r3, [r7, #16]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d114      	bne.n	8003292 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	332a      	adds	r3, #42	@ 0x2a
 8003278:	2203      	movs	r2, #3
 800327a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3319      	adds	r3, #25
 800328c:	7f3a      	ldrb	r2, [r7, #28]
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e009      	b.n	80032a6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	332a      	adds	r3, #42	@ 0x2a
 80032a2:	2202      	movs	r2, #2
 80032a4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80032a6:	787b      	ldrb	r3, [r7, #1]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	f200 8102 	bhi.w	80034b2 <HAL_HCD_HC_SubmitRequest+0x292>
 80032ae:	a201      	add	r2, pc, #4	@ (adr r2, 80032b4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80032b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	0800349d 	.word	0x0800349d
 80032bc:	08003389 	.word	0x08003389
 80032c0:	08003413 	.word	0x08003413
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80032c4:	7c3b      	ldrb	r3, [r7, #16]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	f040 80f5 	bne.w	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80032cc:	78bb      	ldrb	r3, [r7, #2]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d12d      	bne.n	800332e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80032d2:	8b3b      	ldrh	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d109      	bne.n	80032ec <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	333d      	adds	r3, #61	@ 0x3d
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	333d      	adds	r3, #61	@ 0x3d
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	332a      	adds	r3, #42	@ 0x2a
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8003316:	e0ce      	b.n	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	332a      	adds	r3, #42	@ 0x2a
 8003328:	2202      	movs	r2, #2
 800332a:	701a      	strb	r2, [r3, #0]
      break;
 800332c:	e0c3      	b.n	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	331a      	adds	r3, #26
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 80b8 	bne.w	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	333c      	adds	r3, #60	@ 0x3c
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	332a      	adds	r3, #42	@ 0x2a
 800336c:	2200      	movs	r2, #0
 800336e:	701a      	strb	r2, [r3, #0]
      break;
 8003370:	e0a1      	b.n	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	332a      	adds	r3, #42	@ 0x2a
 8003382:	2202      	movs	r2, #2
 8003384:	701a      	strb	r2, [r3, #0]
      break;
 8003386:	e096      	b.n	80034b6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003388:	78bb      	ldrb	r3, [r7, #2]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d120      	bne.n	80033d0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	333d      	adds	r3, #61	@ 0x3d
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	332a      	adds	r3, #42	@ 0x2a
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80033b8:	e07e      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	332a      	adds	r3, #42	@ 0x2a
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]
      break;
 80033ce:	e073      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	333c      	adds	r3, #60	@ 0x3c
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10a      	bne.n	80033fc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	332a      	adds	r3, #42	@ 0x2a
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
      break;
 80033fa:	e05d      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	332a      	adds	r3, #42	@ 0x2a
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]
      break;
 8003410:	e052      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003412:	78bb      	ldrb	r3, [r7, #2]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d120      	bne.n	800345a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	333d      	adds	r3, #61	@ 0x3d
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	332a      	adds	r3, #42	@ 0x2a
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003442:	e039      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	332a      	adds	r3, #42	@ 0x2a
 8003454:	2202      	movs	r2, #2
 8003456:	701a      	strb	r2, [r3, #0]
      break;
 8003458:	e02e      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	333c      	adds	r3, #60	@ 0x3c
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10a      	bne.n	8003486 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	332a      	adds	r3, #42	@ 0x2a
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]
      break;
 8003484:	e018      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	011b      	lsls	r3, r3, #4
 800348e:	1a9b      	subs	r3, r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	440b      	add	r3, r1
 8003494:	332a      	adds	r3, #42	@ 0x2a
 8003496:	2202      	movs	r2, #2
 8003498:	701a      	strb	r2, [r3, #0]
      break;
 800349a:	e00d      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	332a      	adds	r3, #42	@ 0x2a
 80034ac:	2200      	movs	r2, #0
 80034ae:	701a      	strb	r2, [r3, #0]
      break;
 80034b0:	e002      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80034b6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	332c      	adds	r3, #44	@ 0x2c
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	8b39      	ldrh	r1, [r7, #24]
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4403      	add	r3, r0
 80034dc:	3334      	adds	r3, #52	@ 0x34
 80034de:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80034e0:	78fa      	ldrb	r2, [r7, #3]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	1a9b      	subs	r3, r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	334c      	adds	r3, #76	@ 0x4c
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3338      	adds	r3, #56	@ 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3315      	adds	r3, #21
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	334d      	adds	r3, #77	@ 0x4d
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	3310      	adds	r3, #16
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	4413      	add	r3, r2
 8003544:	1d19      	adds	r1, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	799b      	ldrb	r3, [r3, #6]
 800354a:	461a      	mov	r2, r3
 800354c:	f004 fc20 	bl	8007d90 <USB_HC_StartXfer>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop

0800355c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f004 f914 	bl	80077a0 <USB_GetMode>
 8003578:	4603      	mov	r3, r0
 800357a:	2b01      	cmp	r3, #1
 800357c:	f040 80fb 	bne.w	8003776 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f004 f8d7 	bl	8007738 <USB_ReadInterrupts>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80f1 	beq.w	8003774 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f004 f8ce 	bl	8007738 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a6:	d104      	bne.n	80035b2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80035b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 f8be 	bl	8007738 <USB_ReadInterrupts>
 80035bc:	4603      	mov	r3, r0
 80035be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035c6:	d104      	bne.n	80035d2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80035d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 f8ae 	bl	8007738 <USB_ReadInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80035e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e6:	d104      	bne.n	80035f2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035f0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 f89e 	bl	8007738 <USB_ReadInterrupts>
 80035fc:	4603      	mov	r3, r0
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d103      	bne.n	800360e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2202      	movs	r2, #2
 800360c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f004 f890 	bl	8007738 <USB_ReadInterrupts>
 8003618:	4603      	mov	r3, r0
 800361a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800361e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003622:	d120      	bne.n	8003666 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800362c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d113      	bne.n	8003666 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800363e:	2110      	movs	r1, #16
 8003640:	6938      	ldr	r0, [r7, #16]
 8003642:	f003 ff83 	bl	800754c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003646:	6938      	ldr	r0, [r7, #16]
 8003648:	f003 ffb2 	bl	80075b0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	7a5b      	ldrb	r3, [r3, #9]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d105      	bne.n	8003660 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f004 f9a4 	bl	80079a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f007 f96b 	bl	800a93c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f004 f864 	bl	8007738 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003676:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800367a:	d102      	bne.n	8003682 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 fd4d 	bl	800511c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f004 f856 	bl	8007738 <USB_ReadInterrupts>
 800368c:	4603      	mov	r3, r0
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b08      	cmp	r3, #8
 8003694:	d106      	bne.n	80036a4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f007 f934 	bl	800a904 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f004 f845 	bl	8007738 <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b8:	d139      	bne.n	800372e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f004 fde0 	bl	8008284 <USB_HC_ReadInterrupt>
 80036c4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
 80036ca:	e025      	b.n	8003718 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d018      	beq.n	8003712 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d106      	bne.n	8003706 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f905 	bl	800390e <HCD_HC_IN_IRQHandler>
 8003704:	e005      	b.n	8003712 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	4619      	mov	r1, r3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 ff67 	bl	80045e0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	3301      	adds	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	795b      	ldrb	r3, [r3, #5]
 800371c:	461a      	mov	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	4293      	cmp	r3, r2
 8003722:	d3d3      	bcc.n	80036cc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800372c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f004 f800 	bl	8007738 <USB_ReadInterrupts>
 8003738:	4603      	mov	r3, r0
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d101      	bne.n	8003746 <HAL_HCD_IRQHandler+0x1ea>
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <HAL_HCD_IRQHandler+0x1ec>
 8003746:	2300      	movs	r3, #0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0210 	bic.w	r2, r2, #16
 800375a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f001 fbfe 	bl	8004f5e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0210 	orr.w	r2, r2, #16
 8003770:	619a      	str	r2, [r3, #24]
 8003772:	e000      	b.n	8003776 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003774:	bf00      	nop
    }
  }
}
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_HCD_Start+0x16>
 800378e:	2302      	movs	r3, #2
 8003790:	e013      	b.n	80037ba <HAL_HCD_Start+0x3e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f004 f968 	bl	8007a76 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fe60 	bl	8007470 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_HCD_Stop+0x16>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e00d      	b.n	80037f4 <HAL_HCD_Stop+0x32>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 febb 	bl	8008560 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f004 f90a 	bl	8007a22 <USB_ResetPort>
 800380e:	4603      	mov	r3, r0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	334c      	adds	r3, #76	@ 0x4c
 8003834:	781b      	ldrb	r3, [r3, #0]
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3338      	adds	r3, #56	@ 0x38
 800385e:	681b      	ldr	r3, [r3, #0]
}
 8003860:	4618      	mov	r0, r3
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f004 f94c 	bl	8007b16 <USB_GetCurrentFrame>
 800387e:	4603      	mov	r3, r0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 f927 	bl	8007ae8 <USB_GetHostSpeed>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	331a      	adds	r3, #26
 80038c0:	2200      	movs	r2, #0
 80038c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	331b      	adds	r3, #27
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3325      	adds	r3, #37	@ 0x25
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3324      	adds	r3, #36	@ 0x24
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f003 ff16 	bl	800775e <USB_ReadChInterrupts>
 8003932:	4603      	mov	r3, r0
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11a      	bne.n	8003972 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4413      	add	r3, r2
 8003944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003948:	461a      	mov	r2, r3
 800394a:	2304      	movs	r3, #4
 800394c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	334d      	adds	r3, #77	@ 0x4d
 800395e:	2207      	movs	r2, #7
 8003960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f004 fc9b 	bl	80082a6 <USB_HC_Halt>
 8003970:	e09e      	b.n	8003ab0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	78fa      	ldrb	r2, [r7, #3]
 8003978:	4611      	mov	r1, r2
 800397a:	4618      	mov	r0, r3
 800397c:	f003 feef 	bl	800775e <USB_ReadChInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	d11b      	bne.n	80039c4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	4413      	add	r3, r2
 8003994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003998:	461a      	mov	r2, r3
 800399a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800399e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	334d      	adds	r3, #77	@ 0x4d
 80039b0:	2208      	movs	r2, #8
 80039b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 fc72 	bl	80082a6 <USB_HC_Halt>
 80039c2:	e075      	b.n	8003ab0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f003 fec6 	bl	800775e <USB_ReadChInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d11a      	bne.n	8003a12 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	2308      	movs	r3, #8
 80039ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334d      	adds	r3, #77	@ 0x4d
 80039fe:	2206      	movs	r2, #6
 8003a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fc4b 	bl	80082a6 <USB_HC_Halt>
 8003a10:	e04e      	b.n	8003ab0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f003 fe9f 	bl	800775e <USB_ReadChInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2a:	d11b      	bne.n	8003a64 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	015a      	lsls	r2, r3, #5
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4413      	add	r3, r2
 8003a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a38:	461a      	mov	r2, r3
 8003a3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	334d      	adds	r3, #77	@ 0x4d
 8003a50:	2209      	movs	r2, #9
 8003a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f004 fc22 	bl	80082a6 <USB_HC_Halt>
 8003a62:	e025      	b.n	8003ab0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fe76 	bl	800775e <USB_ReadChInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a78:	2b80      	cmp	r3, #128	@ 0x80
 8003a7a:	d119      	bne.n	8003ab0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	2207      	movs	r2, #7
 8003aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 fbfb 	bl	80082a6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 fe50 	bl	800775e <USB_ReadChInterrupts>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac8:	d112      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f004 fbe7 	bl	80082a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003aea:	6093      	str	r3, [r2, #8]
 8003aec:	f000 bd75 	b.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fe30 	bl	800775e <USB_ReadChInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 8128 	bne.w	8003d5a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	2320      	movs	r3, #32
 8003b1a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	331b      	adds	r3, #27
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d119      	bne.n	8003b66 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331b      	adds	r3, #27
 8003b42:	2200      	movs	r2, #0
 8003b44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b46:	78fb      	ldrb	r3, [r7, #3]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b64:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	799b      	ldrb	r3, [r3, #6]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01b      	beq.n	8003ba6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3330      	adds	r3, #48	@ 0x30
 8003b7e:	6819      	ldr	r1, [r3, #0]
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	1ac9      	subs	r1, r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4403      	add	r3, r0
 8003ba2:	3338      	adds	r3, #56	@ 0x38
 8003ba4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	334d      	adds	r3, #77	@ 0x4d
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3344      	adds	r3, #68	@ 0x44
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bda:	461a      	mov	r2, r3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3326      	adds	r3, #38	@ 0x26
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3326      	adds	r3, #38	@ 0x26
 8003c06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d110      	bne.n	8003c2e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fb46 	bl	80082a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c26:	461a      	mov	r2, r3
 8003c28:	2310      	movs	r3, #16
 8003c2a:	6093      	str	r3, [r2, #8]
 8003c2c:	e03d      	b.n	8003caa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c2e:	78fa      	ldrb	r2, [r7, #3]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	1a9b      	subs	r3, r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	3326      	adds	r3, #38	@ 0x26
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d00a      	beq.n	8003c5a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	1a9b      	subs	r3, r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3326      	adds	r3, #38	@ 0x26
 8003c54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d127      	bne.n	8003caa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	0151      	lsls	r1, r2, #5
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	440a      	add	r2, r1
 8003c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003c78:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334c      	adds	r3, #76	@ 0x4c
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334c      	adds	r3, #76	@ 0x4c
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f006 fe57 	bl	800a958 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	799b      	ldrb	r3, [r3, #6]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d13b      	bne.n	8003d2a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3338      	adds	r3, #56	@ 0x38
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	78fa      	ldrb	r2, [r7, #3]
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	1a9b      	subs	r3, r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4403      	add	r3, r0
 8003cd2:	3328      	adds	r3, #40	@ 0x28
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	440b      	add	r3, r1
 8003cd8:	1e59      	subs	r1, r3, #1
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4403      	add	r3, r0
 8003ce8:	3328      	adds	r3, #40	@ 0x28
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8470 	beq.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	1a9b      	subs	r3, r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	440b      	add	r3, r1
 8003d08:	333c      	adds	r3, #60	@ 0x3c
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	f083 0301 	eor.w	r3, r3, #1
 8003d12:	b2d8      	uxtb	r0, r3
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	1a9b      	subs	r3, r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	333c      	adds	r3, #60	@ 0x3c
 8003d22:	4602      	mov	r2, r0
 8003d24:	701a      	strb	r2, [r3, #0]
 8003d26:	f000 bc58 	b.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	333c      	adds	r3, #60	@ 0x3c
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	f083 0301 	eor.w	r3, r3, #1
 8003d42:	b2d8      	uxtb	r0, r3
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	333c      	adds	r3, #60	@ 0x3c
 8003d52:	4602      	mov	r2, r0
 8003d54:	701a      	strb	r2, [r3, #0]
 8003d56:	f000 bc40 	b.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 fcfb 	bl	800775e <USB_ReadChInterrupts>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	d131      	bne.n	8003dd6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2320      	movs	r3, #32
 8003d82:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	331a      	adds	r3, #26
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 841f 	bne.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	331b      	adds	r3, #27
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	334d      	adds	r3, #77	@ 0x4d
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f004 fa6a 	bl	80082a6 <USB_HC_Halt>
 8003dd2:	f000 bc02 	b.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	78fa      	ldrb	r2, [r7, #3]
 8003ddc:	4611      	mov	r1, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 fcbd 	bl	800775e <USB_ReadChInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	f040 8305 	bne.w	80043fa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	2302      	movs	r3, #2
 8003e00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334d      	adds	r3, #77	@ 0x4d
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d114      	bne.n	8003e42 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	334d      	adds	r3, #77	@ 0x4d
 8003e28:	2202      	movs	r2, #2
 8003e2a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334c      	adds	r3, #76	@ 0x4c
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e2cc      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003e42:	78fa      	ldrb	r2, [r7, #3]
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	334d      	adds	r3, #77	@ 0x4d
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	2b06      	cmp	r3, #6
 8003e56:	d114      	bne.n	8003e82 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	334d      	adds	r3, #77	@ 0x4d
 8003e68:	2202      	movs	r2, #2
 8003e6a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334c      	adds	r3, #76	@ 0x4c
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e2ac      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334d      	adds	r3, #77	@ 0x4d
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	d00b      	beq.n	8003eb0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e98:	78fa      	ldrb	r2, [r7, #3]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	1a9b      	subs	r3, r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	334d      	adds	r3, #77	@ 0x4d
 8003ea8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003eaa:	2b09      	cmp	r3, #9
 8003eac:	f040 80a6 	bne.w	8003ffc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eb0:	78fa      	ldrb	r2, [r7, #3]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334d      	adds	r3, #77	@ 0x4d
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3344      	adds	r3, #68	@ 0x44
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4403      	add	r3, r0
 8003ee4:	3344      	adds	r3, #68	@ 0x44
 8003ee6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3344      	adds	r3, #68	@ 0x44
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d943      	bls.n	8003f86 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	3344      	adds	r3, #68	@ 0x44
 8003f0e:	2200      	movs	r2, #0
 8003f10:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	331a      	adds	r3, #26
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d123      	bne.n	8003f70 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	331b      	adds	r3, #27
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	331c      	adds	r3, #28
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f70:	78fa      	ldrb	r2, [r7, #3]
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	4613      	mov	r3, r2
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	334c      	adds	r3, #76	@ 0x4c
 8003f80:	2204      	movs	r2, #4
 8003f82:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f84:	e229      	b.n	80043da <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	334c      	adds	r3, #76	@ 0x4c
 8003f96:	2202      	movs	r2, #2
 8003f98:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3326      	adds	r3, #38	@ 0x26
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00b      	beq.n	8003fc8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	1a9b      	subs	r3, r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3326      	adds	r3, #38	@ 0x26
 8003fc0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	f040 8209 	bne.w	80043da <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fde:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fe6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ffa:	e1ee      	b.n	80043da <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334d      	adds	r3, #77	@ 0x4d
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b05      	cmp	r3, #5
 8004010:	f040 80c8 	bne.w	80041a4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	334d      	adds	r3, #77	@ 0x4d
 8004024:	2202      	movs	r2, #2
 8004026:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	331b      	adds	r3, #27
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b01      	cmp	r3, #1
 800403c:	f040 81ce 	bne.w	80043dc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	3326      	adds	r3, #38	@ 0x26
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b03      	cmp	r3, #3
 8004054:	d16b      	bne.n	800412e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	3348      	adds	r3, #72	@ 0x48
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	1c59      	adds	r1, r3, #1
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4403      	add	r3, r0
 8004076:	3348      	adds	r3, #72	@ 0x48
 8004078:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3348      	adds	r3, #72	@ 0x48
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d943      	bls.n	8004118 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004090:	78fa      	ldrb	r2, [r7, #3]
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	4613      	mov	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3348      	adds	r3, #72	@ 0x48
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	331b      	adds	r3, #27
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3344      	adds	r3, #68	@ 0x44
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d809      	bhi.n	80040e2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80040ce:	78fa      	ldrb	r2, [r7, #3]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	331c      	adds	r3, #28
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040e2:	78fb      	ldrb	r3, [r7, #3]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	78fa      	ldrb	r2, [r7, #3]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80040fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004100:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	334c      	adds	r3, #76	@ 0x4c
 8004112:	2204      	movs	r2, #4
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e014      	b.n	8004142 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	334c      	adds	r3, #76	@ 0x4c
 8004128:	2202      	movs	r2, #2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e009      	b.n	8004142 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800412e:	78fa      	ldrb	r2, [r7, #3]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	1a9b      	subs	r3, r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	334c      	adds	r3, #76	@ 0x4c
 800413e:	2202      	movs	r2, #2
 8004140:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004142:	78fa      	ldrb	r2, [r7, #3]
 8004144:	6879      	ldr	r1, [r7, #4]
 8004146:	4613      	mov	r3, r2
 8004148:	011b      	lsls	r3, r3, #4
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	440b      	add	r3, r1
 8004150:	3326      	adds	r3, #38	@ 0x26
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00b      	beq.n	8004170 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3326      	adds	r3, #38	@ 0x26
 8004168:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800416a:	2b02      	cmp	r3, #2
 800416c:	f040 8136 	bne.w	80043dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800418e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004190:	78fb      	ldrb	r3, [r7, #3]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800419c:	461a      	mov	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e11b      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334d      	adds	r3, #77	@ 0x4d
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	f040 8081 	bne.w	80042be <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041bc:	78fa      	ldrb	r2, [r7, #3]
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	011b      	lsls	r3, r3, #4
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	334d      	adds	r3, #77	@ 0x4d
 80041cc:	2202      	movs	r2, #2
 80041ce:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	331b      	adds	r3, #27
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 80fa 	bne.w	80043dc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	4613      	mov	r3, r2
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	1a9b      	subs	r3, r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	440b      	add	r3, r1
 80041f6:	334c      	adds	r3, #76	@ 0x4c
 80041f8:	2202      	movs	r2, #2
 80041fa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	0151      	lsls	r1, r2, #5
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	440a      	add	r2, r1
 8004212:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	0151      	lsls	r1, r2, #5
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	440a      	add	r2, r1
 8004232:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800423a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	440a      	add	r2, r1
 8004252:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004256:	f023 0320 	bic.w	r3, r3, #32
 800425a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	3326      	adds	r3, #38	@ 0x26
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00b      	beq.n	800428a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	3326      	adds	r3, #38	@ 0x26
 8004282:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004284:	2b02      	cmp	r3, #2
 8004286:	f040 80a9 	bne.w	80043dc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	4413      	add	r3, r2
 8004292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042a0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042a8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6013      	str	r3, [r2, #0]
 80042bc:	e08e      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	334d      	adds	r3, #77	@ 0x4d
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d143      	bne.n	800435c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	334d      	adds	r3, #77	@ 0x4d
 80042e4:	2202      	movs	r2, #2
 80042e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	334c      	adds	r3, #76	@ 0x4c
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3326      	adds	r3, #38	@ 0x26
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	3326      	adds	r3, #38	@ 0x26
 8004322:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004324:	2b02      	cmp	r3, #2
 8004326:	d159      	bne.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800433e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004346:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004354:	461a      	mov	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e03f      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	334d      	adds	r3, #77	@ 0x4d
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b08      	cmp	r3, #8
 8004370:	d126      	bne.n	80043c0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004372:	78fa      	ldrb	r2, [r7, #3]
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	440b      	add	r3, r1
 8004380:	334d      	adds	r3, #77	@ 0x4d
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	3344      	adds	r3, #68	@ 0x44
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	1c59      	adds	r1, r3, #1
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	3344      	adds	r3, #68	@ 0x44
 80043a8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	1a9b      	subs	r3, r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	334c      	adds	r3, #76	@ 0x4c
 80043ba:	2204      	movs	r2, #4
 80043bc:	701a      	strb	r2, [r3, #0]
 80043be:	e00d      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80043c0:	78fa      	ldrb	r2, [r7, #3]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	334d      	adds	r3, #77	@ 0x4d
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f000 8100 	beq.w	80045d8 <HCD_HC_IN_IRQHandler+0xcca>
 80043d8:	e000      	b.n	80043dc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80043da:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	334c      	adds	r3, #76	@ 0x4c
 80043ec:	781a      	ldrb	r2, [r3, #0]
 80043ee:	78fb      	ldrb	r3, [r7, #3]
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f006 fab0 	bl	800a958 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043f8:	e0ef      	b.n	80045da <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f003 f9ab 	bl	800775e <USB_ReadChInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800440e:	2b40      	cmp	r3, #64	@ 0x40
 8004410:	d12f      	bne.n	8004472 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004412:	78fb      	ldrb	r3, [r7, #3]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800441e:	461a      	mov	r2, r3
 8004420:	2340      	movs	r3, #64	@ 0x40
 8004422:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	334d      	adds	r3, #77	@ 0x4d
 8004434:	2205      	movs	r2, #5
 8004436:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	331a      	adds	r3, #26
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800444e:	78fa      	ldrb	r2, [r7, #3]
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	1a9b      	subs	r3, r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	3344      	adds	r3, #68	@ 0x44
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f003 ff1b 	bl	80082a6 <USB_HC_Halt>
 8004470:	e0b3      	b.n	80045da <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	4611      	mov	r1, r2
 800447a:	4618      	mov	r0, r3
 800447c:	f003 f96f 	bl	800775e <USB_ReadChInterrupts>
 8004480:	4603      	mov	r3, r0
 8004482:	f003 0310 	and.w	r3, r3, #16
 8004486:	2b10      	cmp	r3, #16
 8004488:	f040 80a7 	bne.w	80045da <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	1a9b      	subs	r3, r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3326      	adds	r3, #38	@ 0x26
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d11b      	bne.n	80044da <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	1a9b      	subs	r3, r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3344      	adds	r3, #68	@ 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	1a9b      	subs	r3, r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	440b      	add	r3, r1
 80044c4:	334d      	adds	r3, #77	@ 0x4d
 80044c6:	2204      	movs	r2, #4
 80044c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f003 fee7 	bl	80082a6 <USB_HC_Halt>
 80044d8:	e03f      	b.n	800455a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3326      	adds	r3, #38	@ 0x26
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	3326      	adds	r3, #38	@ 0x26
 8004500:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004502:	2b02      	cmp	r3, #2
 8004504:	d129      	bne.n	800455a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3344      	adds	r3, #68	@ 0x44
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	799b      	ldrb	r3, [r3, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <HCD_HC_IN_IRQHandler+0xc2a>
 8004522:	78fa      	ldrb	r2, [r7, #3]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	1a9b      	subs	r3, r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	440b      	add	r3, r1
 8004530:	331b      	adds	r3, #27
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d110      	bne.n	800455a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004538:	78fa      	ldrb	r2, [r7, #3]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	011b      	lsls	r3, r3, #4
 8004540:	1a9b      	subs	r3, r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	334d      	adds	r3, #77	@ 0x4d
 8004548:	2204      	movs	r2, #4
 800454a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	78fa      	ldrb	r2, [r7, #3]
 8004552:	4611      	mov	r1, r2
 8004554:	4618      	mov	r0, r3
 8004556:	f003 fea6 	bl	80082a6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	331b      	adds	r3, #27
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d129      	bne.n	80045c4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	331b      	adds	r3, #27
 8004580:	2200      	movs	r2, #0
 8004582:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	440a      	add	r2, r1
 800459a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800459e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80045be:	f043 0320 	orr.w	r3, r3, #32
 80045c2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045d0:	461a      	mov	r2, r3
 80045d2:	2310      	movs	r3, #16
 80045d4:	6093      	str	r3, [r2, #8]
 80045d6:	e000      	b.n	80045da <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80045d8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	460b      	mov	r3, r1
 80045ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f003 f8ad 	bl	800775e <USB_ReadChInterrupts>
 8004604:	4603      	mov	r3, r0
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b04      	cmp	r3, #4
 800460c:	d11b      	bne.n	8004646 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800460e:	78fb      	ldrb	r3, [r7, #3]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	4413      	add	r3, r2
 8004616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461a:	461a      	mov	r2, r3
 800461c:	2304      	movs	r3, #4
 800461e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	334d      	adds	r3, #77	@ 0x4d
 8004630:	2207      	movs	r2, #7
 8004632:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	78fa      	ldrb	r2, [r7, #3]
 800463a:	4611      	mov	r1, r2
 800463c:	4618      	mov	r0, r3
 800463e:	f003 fe32 	bl	80082a6 <USB_HC_Halt>
 8004642:	f000 bc89 	b.w	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	78fa      	ldrb	r2, [r7, #3]
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f003 f885 	bl	800775e <USB_ReadChInterrupts>
 8004654:	4603      	mov	r3, r0
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	f040 8082 	bne.w	8004764 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466c:	461a      	mov	r2, r3
 800466e:	2320      	movs	r3, #32
 8004670:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	3319      	adds	r3, #25
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d124      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3319      	adds	r3, #25
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800469c:	78fa      	ldrb	r2, [r7, #3]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2202      	movs	r2, #2
 80046ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80046b0:	78fa      	ldrb	r2, [r7, #3]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	334d      	adds	r3, #77	@ 0x4d
 80046c0:	2203      	movs	r2, #3
 80046c2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f003 fdea 	bl	80082a6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80046d2:	78fa      	ldrb	r2, [r7, #3]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	1a9b      	subs	r3, r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	331a      	adds	r3, #26
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	f040 8437 	bne.w	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	331b      	adds	r3, #27
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 842b 	bne.w	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004702:	78fa      	ldrb	r2, [r7, #3]
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	4613      	mov	r3, r2
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3326      	adds	r3, #38	@ 0x26
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d009      	beq.n	800472c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	331b      	adds	r3, #27
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	334d      	adds	r3, #77	@ 0x4d
 800473c:	2203      	movs	r2, #3
 800473e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	78fa      	ldrb	r2, [r7, #3]
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f003 fdac 	bl	80082a6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3344      	adds	r3, #68	@ 0x44
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
 8004762:	e3f9      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	78fa      	ldrb	r2, [r7, #3]
 800476a:	4611      	mov	r1, r2
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fff6 	bl	800775e <USB_ReadChInterrupts>
 8004772:	4603      	mov	r3, r0
 8004774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800477c:	d111      	bne.n	80047a2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800477e:	78fb      	ldrb	r3, [r7, #3]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478a:	461a      	mov	r2, r3
 800478c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004790:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	4611      	mov	r1, r2
 800479a:	4618      	mov	r0, r3
 800479c:	f003 fd83 	bl	80082a6 <USB_HC_Halt>
 80047a0:	e3da      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 ffd7 	bl	800775e <USB_ReadChInterrupts>
 80047b0:	4603      	mov	r3, r0
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d168      	bne.n	800488c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	3344      	adds	r3, #68	@ 0x44
 80047ca:	2200      	movs	r2, #0
 80047cc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	4611      	mov	r1, r2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 ffc1 	bl	800775e <USB_ReadChInterrupts>
 80047dc:	4603      	mov	r3, r0
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d112      	bne.n	800480c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80047e6:	78fa      	ldrb	r2, [r7, #3]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	3319      	adds	r3, #25
 80047f6:	2201      	movs	r2, #1
 80047f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	015a      	lsls	r2, r3, #5
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	4413      	add	r3, r2
 8004802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004806:	461a      	mov	r2, r3
 8004808:	2340      	movs	r3, #64	@ 0x40
 800480a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	011b      	lsls	r3, r3, #4
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	331b      	adds	r3, #27
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	331b      	adds	r3, #27
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4413      	add	r3, r2
 800483e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	0151      	lsls	r1, r2, #5
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	440a      	add	r2, r1
 800484c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004854:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004862:	461a      	mov	r2, r3
 8004864:	2301      	movs	r3, #1
 8004866:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004868:	78fa      	ldrb	r2, [r7, #3]
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	4613      	mov	r3, r2
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	1a9b      	subs	r3, r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	334d      	adds	r3, #77	@ 0x4d
 8004878:	2201      	movs	r2, #1
 800487a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	4611      	mov	r1, r2
 8004884:	4618      	mov	r0, r3
 8004886:	f003 fd0e 	bl	80082a6 <USB_HC_Halt>
 800488a:	e365      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	4611      	mov	r1, r2
 8004894:	4618      	mov	r0, r3
 8004896:	f002 ff62 	bl	800775e <USB_ReadChInterrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a0:	2b40      	cmp	r3, #64	@ 0x40
 80048a2:	d139      	bne.n	8004918 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4613      	mov	r3, r2
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	334d      	adds	r3, #77	@ 0x4d
 80048b4:	2205      	movs	r2, #5
 80048b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048b8:	78fa      	ldrb	r2, [r7, #3]
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	331a      	adds	r3, #26
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	6879      	ldr	r1, [r7, #4]
 80048d2:	4613      	mov	r3, r2
 80048d4:	011b      	lsls	r3, r3, #4
 80048d6:	1a9b      	subs	r3, r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	440b      	add	r3, r1
 80048dc:	3319      	adds	r3, #25
 80048de:	2201      	movs	r2, #1
 80048e0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6879      	ldr	r1, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	3344      	adds	r3, #68	@ 0x44
 80048f2:	2200      	movs	r2, #0
 80048f4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	4611      	mov	r1, r2
 80048fe:	4618      	mov	r0, r3
 8004900:	f003 fcd1 	bl	80082a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4413      	add	r3, r2
 800490c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004910:	461a      	mov	r2, r3
 8004912:	2340      	movs	r3, #64	@ 0x40
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	e31f      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f002 ff1c 	bl	800775e <USB_ReadChInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f003 0308 	and.w	r3, r3, #8
 800492c:	2b08      	cmp	r3, #8
 800492e:	d11a      	bne.n	8004966 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	4413      	add	r3, r2
 8004938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800493c:	461a      	mov	r2, r3
 800493e:	2308      	movs	r3, #8
 8004940:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334d      	adds	r3, #77	@ 0x4d
 8004952:	2206      	movs	r2, #6
 8004954:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f003 fca1 	bl	80082a6 <USB_HC_Halt>
 8004964:	e2f8      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f002 fef5 	bl	800775e <USB_ReadChInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b10      	cmp	r3, #16
 800497c:	d144      	bne.n	8004a08 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3344      	adds	r3, #68	@ 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004992:	78fa      	ldrb	r2, [r7, #3]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	1a9b      	subs	r3, r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	334d      	adds	r3, #77	@ 0x4d
 80049a2:	2204      	movs	r2, #4
 80049a4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80049a6:	78fa      	ldrb	r2, [r7, #3]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	1a9b      	subs	r3, r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	3319      	adds	r3, #25
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d114      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	3318      	adds	r3, #24
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	3319      	adds	r3, #25
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	4611      	mov	r1, r2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f003 fc59 	bl	80082a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80049f4:	78fb      	ldrb	r3, [r7, #3]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a00:	461a      	mov	r2, r3
 8004a02:	2310      	movs	r3, #16
 8004a04:	6093      	str	r3, [r2, #8]
 8004a06:	e2a7      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	4611      	mov	r1, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f002 fea4 	bl	800775e <USB_ReadChInterrupts>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	2b80      	cmp	r3, #128	@ 0x80
 8004a1e:	f040 8083 	bne.w	8004b28 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	799b      	ldrb	r3, [r3, #6]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d111      	bne.n	8004a4e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	334d      	adds	r3, #77	@ 0x4d
 8004a3a:	2207      	movs	r2, #7
 8004a3c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f003 fc2d 	bl	80082a6 <USB_HC_Halt>
 8004a4c:	e062      	b.n	8004b14 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3344      	adds	r3, #68	@ 0x44
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4403      	add	r3, r0
 8004a6e:	3344      	adds	r3, #68	@ 0x44
 8004a70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a72:	78fa      	ldrb	r2, [r7, #3]
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	4613      	mov	r3, r2
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	1a9b      	subs	r3, r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	440b      	add	r3, r1
 8004a80:	3344      	adds	r3, #68	@ 0x44
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d922      	bls.n	8004ace <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a88:	78fa      	ldrb	r2, [r7, #3]
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	1a9b      	subs	r3, r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	3344      	adds	r3, #68	@ 0x44
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a9c:	78fa      	ldrb	r2, [r7, #3]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	1a9b      	subs	r3, r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	334c      	adds	r3, #76	@ 0x4c
 8004aac:	2204      	movs	r2, #4
 8004aae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004ab0:	78fa      	ldrb	r2, [r7, #3]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	1a9b      	subs	r3, r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	334c      	adds	r3, #76	@ 0x4c
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f005 ff46 	bl	800a958 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004acc:	e022      	b.n	8004b14 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	011b      	lsls	r3, r3, #4
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	334c      	adds	r3, #76	@ 0x4c
 8004ade:	2202      	movs	r2, #2
 8004ae0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ae2:	78fb      	ldrb	r3, [r7, #3]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004af8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b00:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b02:	78fb      	ldrb	r3, [r7, #3]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b20:	461a      	mov	r2, r3
 8004b22:	2380      	movs	r3, #128	@ 0x80
 8004b24:	6093      	str	r3, [r2, #8]
 8004b26:	e217      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f002 fe14 	bl	800775e <USB_ReadChInterrupts>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b40:	d11b      	bne.n	8004b7a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	334d      	adds	r3, #77	@ 0x4d
 8004b52:	2209      	movs	r2, #9
 8004b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	4611      	mov	r1, r2
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f003 fba1 	bl	80082a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b70:	461a      	mov	r2, r3
 8004b72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b76:	6093      	str	r3, [r2, #8]
 8004b78:	e1ee      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	78fa      	ldrb	r2, [r7, #3]
 8004b80:	4611      	mov	r1, r2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f002 fdeb 	bl	800775e <USB_ReadChInterrupts>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	f040 81df 	bne.w	8004f52 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004ba6:	78fa      	ldrb	r2, [r7, #3]
 8004ba8:	6879      	ldr	r1, [r7, #4]
 8004baa:	4613      	mov	r3, r2
 8004bac:	011b      	lsls	r3, r3, #4
 8004bae:	1a9b      	subs	r3, r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	334d      	adds	r3, #77	@ 0x4d
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 8093 	bne.w	8004ce4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bbe:	78fa      	ldrb	r2, [r7, #3]
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	334d      	adds	r3, #77	@ 0x4d
 8004bce:	2202      	movs	r2, #2
 8004bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	334c      	adds	r3, #76	@ 0x4c
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3326      	adds	r3, #38	@ 0x26
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d00b      	beq.n	8004c14 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3326      	adds	r3, #38	@ 0x26
 8004c0c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	f040 8190 	bne.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	799b      	ldrb	r3, [r3, #6]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d115      	bne.n	8004c48 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	4613      	mov	r3, r2
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	333d      	adds	r3, #61	@ 0x3d
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	f083 0301 	eor.w	r3, r3, #1
 8004c34:	b2d8      	uxtb	r0, r3
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	333d      	adds	r3, #61	@ 0x3d
 8004c44:	4602      	mov	r2, r0
 8004c46:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	799b      	ldrb	r3, [r3, #6]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 8171 	bne.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3334      	adds	r3, #52	@ 0x34
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8165 	beq.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3334      	adds	r3, #52	@ 0x34
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4403      	add	r3, r0
 8004c8a:	3328      	adds	r3, #40	@ 0x28
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	440b      	add	r3, r1
 8004c90:	1e59      	subs	r1, r3, #1
 8004c92:	78fa      	ldrb	r2, [r7, #3]
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	1a9b      	subs	r3, r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4403      	add	r3, r0
 8004ca0:	3328      	adds	r3, #40	@ 0x28
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ca8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 813f 	beq.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	333d      	adds	r3, #61	@ 0x3d
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	f083 0301 	eor.w	r3, r3, #1
 8004cce:	b2d8      	uxtb	r0, r3
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	333d      	adds	r3, #61	@ 0x3d
 8004cde:	4602      	mov	r2, r0
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e127      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	334d      	adds	r3, #77	@ 0x4d
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d120      	bne.n	8004d3c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004cfa:	78fa      	ldrb	r2, [r7, #3]
 8004cfc:	6879      	ldr	r1, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	011b      	lsls	r3, r3, #4
 8004d02:	1a9b      	subs	r3, r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	440b      	add	r3, r1
 8004d08:	334d      	adds	r3, #77	@ 0x4d
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d0e:	78fa      	ldrb	r2, [r7, #3]
 8004d10:	6879      	ldr	r1, [r7, #4]
 8004d12:	4613      	mov	r3, r2
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	331b      	adds	r3, #27
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 8107 	bne.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d26:	78fa      	ldrb	r2, [r7, #3]
 8004d28:	6879      	ldr	r1, [r7, #4]
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	440b      	add	r3, r1
 8004d34:	334c      	adds	r3, #76	@ 0x4c
 8004d36:	2202      	movs	r2, #2
 8004d38:	701a      	strb	r2, [r3, #0]
 8004d3a:	e0fb      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004d3c:	78fa      	ldrb	r2, [r7, #3]
 8004d3e:	6879      	ldr	r1, [r7, #4]
 8004d40:	4613      	mov	r3, r2
 8004d42:	011b      	lsls	r3, r3, #4
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	334d      	adds	r3, #77	@ 0x4d
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d13a      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	011b      	lsls	r3, r3, #4
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	440b      	add	r3, r1
 8004d60:	334d      	adds	r3, #77	@ 0x4d
 8004d62:	2202      	movs	r2, #2
 8004d64:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	334c      	adds	r3, #76	@ 0x4c
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	331b      	adds	r3, #27
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	f040 80d1 	bne.w	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	4613      	mov	r3, r2
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	1a9b      	subs	r3, r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	440b      	add	r3, r1
 8004da0:	331b      	adds	r3, #27
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004dc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dc4:	6053      	str	r3, [r2, #4]
 8004dc6:	e0b5      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	334d      	adds	r3, #77	@ 0x4d
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b05      	cmp	r3, #5
 8004ddc:	d114      	bne.n	8004e08 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334d      	adds	r3, #77	@ 0x4d
 8004dee:	2202      	movs	r2, #2
 8004df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	334c      	adds	r3, #76	@ 0x4c
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e095      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	334d      	adds	r3, #77	@ 0x4d
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b06      	cmp	r3, #6
 8004e1c:	d114      	bne.n	8004e48 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	334d      	adds	r3, #77	@ 0x4d
 8004e2e:	2202      	movs	r2, #2
 8004e30:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	334c      	adds	r3, #76	@ 0x4c
 8004e42:	2205      	movs	r2, #5
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e075      	b.n	8004f34 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e48:	78fa      	ldrb	r2, [r7, #3]
 8004e4a:	6879      	ldr	r1, [r7, #4]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	011b      	lsls	r3, r3, #4
 8004e50:	1a9b      	subs	r3, r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	334d      	adds	r3, #77	@ 0x4d
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b07      	cmp	r3, #7
 8004e5c:	d00a      	beq.n	8004e74 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004e5e:	78fa      	ldrb	r2, [r7, #3]
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	334d      	adds	r3, #77	@ 0x4d
 8004e6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e70:	2b09      	cmp	r3, #9
 8004e72:	d170      	bne.n	8004f56 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e74:	78fa      	ldrb	r2, [r7, #3]
 8004e76:	6879      	ldr	r1, [r7, #4]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	1a9b      	subs	r3, r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	440b      	add	r3, r1
 8004e82:	334d      	adds	r3, #77	@ 0x4d
 8004e84:	2202      	movs	r2, #2
 8004e86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	011b      	lsls	r3, r3, #4
 8004e90:	1a9b      	subs	r3, r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3344      	adds	r3, #68	@ 0x44
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	1c59      	adds	r1, r3, #1
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	011b      	lsls	r3, r3, #4
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4403      	add	r3, r0
 8004ea8:	3344      	adds	r3, #68	@ 0x44
 8004eaa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004eac:	78fa      	ldrb	r2, [r7, #3]
 8004eae:	6879      	ldr	r1, [r7, #4]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	011b      	lsls	r3, r3, #4
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	440b      	add	r3, r1
 8004eba:	3344      	adds	r3, #68	@ 0x44
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d914      	bls.n	8004eec <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004ec2:	78fa      	ldrb	r2, [r7, #3]
 8004ec4:	6879      	ldr	r1, [r7, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	440b      	add	r3, r1
 8004ed0:	3344      	adds	r3, #68	@ 0x44
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	1a9b      	subs	r3, r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	334c      	adds	r3, #76	@ 0x4c
 8004ee6:	2204      	movs	r2, #4
 8004ee8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004eea:	e022      	b.n	8004f32 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	334c      	adds	r3, #76	@ 0x4c
 8004efc:	2202      	movs	r2, #2
 8004efe:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	015a      	lsls	r2, r3, #5
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	4413      	add	r3, r2
 8004f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f16:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f1e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f32:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	334c      	adds	r3, #76	@ 0x4c
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f005 fd04 	bl	800a958 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f50:	e002      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004f52:	bf00      	nop
 8004f54:	e000      	b.n	8004f58 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004f56:	bf00      	nop
  }
}
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b08a      	sub	sp, #40	@ 0x28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	0c5b      	lsrs	r3, r3, #17
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f92:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d004      	beq.n	8004fa4 <HCD_RXQLVL_IRQHandler+0x46>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b05      	cmp	r3, #5
 8004f9e:	f000 80b6 	beq.w	800510e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004fa2:	e0b7      	b.n	8005114 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 80b3 	beq.w	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	332c      	adds	r3, #44	@ 0x2c
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 80a7 	beq.w	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3338      	adds	r3, #56	@ 0x38
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	18d1      	adds	r1, r2, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4403      	add	r3, r0
 8004fe8:	3334      	adds	r3, #52	@ 0x34
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4299      	cmp	r1, r3
 8004fee:	f200 8083 	bhi.w	80050f8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6818      	ldr	r0, [r3, #0]
 8004ff6:	6879      	ldr	r1, [r7, #4]
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	332c      	adds	r3, #44	@ 0x2c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	b292      	uxth	r2, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f002 fb3b 	bl	8007688 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4613      	mov	r3, r2
 8005018:	011b      	lsls	r3, r3, #4
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	440b      	add	r3, r1
 8005020:	332c      	adds	r3, #44	@ 0x2c
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	18d1      	adds	r1, r2, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4613      	mov	r3, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4403      	add	r3, r0
 8005036:	332c      	adds	r3, #44	@ 0x2c
 8005038:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4613      	mov	r3, r2
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	1a9b      	subs	r3, r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3338      	adds	r3, #56	@ 0x38
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	18d1      	adds	r1, r2, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4403      	add	r3, r0
 800505e:	3338      	adds	r3, #56	@ 0x38
 8005060:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	4413      	add	r3, r2
 800506a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	0cdb      	lsrs	r3, r3, #19
 8005072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005076:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	4613      	mov	r3, r2
 800507e:	011b      	lsls	r3, r3, #4
 8005080:	1a9b      	subs	r3, r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3328      	adds	r3, #40	@ 0x28
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	4293      	cmp	r3, r2
 8005090:	d13f      	bne.n	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d03c      	beq.n	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050ae:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050b6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c4:	461a      	mov	r2, r3
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	4613      	mov	r3, r2
 80050d0:	011b      	lsls	r3, r3, #4
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	333c      	adds	r3, #60	@ 0x3c
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2d8      	uxtb	r0, r3
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	4613      	mov	r3, r2
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	1a9b      	subs	r3, r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	333c      	adds	r3, #60	@ 0x3c
 80050f2:	4602      	mov	r2, r0
 80050f4:	701a      	strb	r2, [r3, #0]
      break;
 80050f6:	e00c      	b.n	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	334c      	adds	r3, #76	@ 0x4c
 8005108:	2204      	movs	r2, #4
 800510a:	701a      	strb	r2, [r3, #0]
      break;
 800510c:	e001      	b.n	8005112 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800510e:	bf00      	nop
 8005110:	e000      	b.n	8005114 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005112:	bf00      	nop
  }
}
 8005114:	bf00      	nop
 8005116:	3728      	adds	r7, #40	@ 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005148:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d10b      	bne.n	800516c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f005 fbde 	bl	800a920 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f043 0302 	orr.w	r3, r3, #2
 800516a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b08      	cmp	r3, #8
 8005174:	d132      	bne.n	80051dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f043 0308 	orr.w	r3, r3, #8
 800517c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b04      	cmp	r3, #4
 8005186:	d126      	bne.n	80051d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	7a5b      	ldrb	r3, [r3, #9]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d113      	bne.n	80051b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005196:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800519a:	d106      	bne.n	80051aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f002 fc00 	bl	80079a8 <USB_InitFSLSPClkSel>
 80051a8:	e011      	b.n	80051ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2101      	movs	r1, #1
 80051b0:	4618      	mov	r0, r3
 80051b2:	f002 fbf9 	bl	80079a8 <USB_InitFSLSPClkSel>
 80051b6:	e00a      	b.n	80051ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	79db      	ldrb	r3, [r3, #7]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d106      	bne.n	80051ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051c6:	461a      	mov	r2, r3
 80051c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80051cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f005 fbd0 	bl	800a974 <HAL_HCD_PortEnabled_Callback>
 80051d4:	e002      	b.n	80051dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f005 fbda 	bl	800a990 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	d103      	bne.n	80051ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f043 0320 	orr.w	r3, r3, #32
 80051ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051f4:	461a      	mov	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6013      	str	r3, [r2, #0]
}
 80051fa:	bf00      	nop
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e12b      	b.n	800546e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd f8ec 	bl	8002408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2224      	movs	r2, #36	@ 0x24
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f022 0201 	bic.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005268:	f001 fa20 	bl	80066ac <HAL_RCC_GetPCLK1Freq>
 800526c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	4a81      	ldr	r2, [pc, #516]	@ (8005478 <HAL_I2C_Init+0x274>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d807      	bhi.n	8005288 <HAL_I2C_Init+0x84>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a80      	ldr	r2, [pc, #512]	@ (800547c <HAL_I2C_Init+0x278>)
 800527c:	4293      	cmp	r3, r2
 800527e:	bf94      	ite	ls
 8005280:	2301      	movls	r3, #1
 8005282:	2300      	movhi	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e006      	b.n	8005296 <HAL_I2C_Init+0x92>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a7d      	ldr	r2, [pc, #500]	@ (8005480 <HAL_I2C_Init+0x27c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	bf94      	ite	ls
 8005290:	2301      	movls	r3, #1
 8005292:	2300      	movhi	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e0e7      	b.n	800546e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4a78      	ldr	r2, [pc, #480]	@ (8005484 <HAL_I2C_Init+0x280>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0c9b      	lsrs	r3, r3, #18
 80052a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005478 <HAL_I2C_Init+0x274>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d802      	bhi.n	80052d8 <HAL_I2C_Init+0xd4>
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	3301      	adds	r3, #1
 80052d6:	e009      	b.n	80052ec <HAL_I2C_Init+0xe8>
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	4a69      	ldr	r2, [pc, #420]	@ (8005488 <HAL_I2C_Init+0x284>)
 80052e4:	fba2 2303 	umull	r2, r3, r2, r3
 80052e8:	099b      	lsrs	r3, r3, #6
 80052ea:	3301      	adds	r3, #1
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	430b      	orrs	r3, r1
 80052f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	495c      	ldr	r1, [pc, #368]	@ (8005478 <HAL_I2C_Init+0x274>)
 8005308:	428b      	cmp	r3, r1
 800530a:	d819      	bhi.n	8005340 <HAL_I2C_Init+0x13c>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1e59      	subs	r1, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	fbb1 f3f3 	udiv	r3, r1, r3
 800531a:	1c59      	adds	r1, r3, #1
 800531c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005320:	400b      	ands	r3, r1
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_I2C_Init+0x138>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	1e59      	subs	r1, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	fbb1 f3f3 	udiv	r3, r1, r3
 8005334:	3301      	adds	r3, #1
 8005336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533a:	e051      	b.n	80053e0 <HAL_I2C_Init+0x1dc>
 800533c:	2304      	movs	r3, #4
 800533e:	e04f      	b.n	80053e0 <HAL_I2C_Init+0x1dc>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d111      	bne.n	800536c <HAL_I2C_Init+0x168>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1e58      	subs	r0, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	440b      	add	r3, r1
 8005356:	fbb0 f3f3 	udiv	r3, r0, r3
 800535a:	3301      	adds	r3, #1
 800535c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	e012      	b.n	8005392 <HAL_I2C_Init+0x18e>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	1e58      	subs	r0, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6859      	ldr	r1, [r3, #4]
 8005374:	460b      	mov	r3, r1
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	0099      	lsls	r1, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005382:	3301      	adds	r3, #1
 8005384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <HAL_I2C_Init+0x196>
 8005396:	2301      	movs	r3, #1
 8005398:	e022      	b.n	80053e0 <HAL_I2C_Init+0x1dc>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10e      	bne.n	80053c0 <HAL_I2C_Init+0x1bc>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1e58      	subs	r0, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6859      	ldr	r1, [r3, #4]
 80053aa:	460b      	mov	r3, r1
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	440b      	add	r3, r1
 80053b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b4:	3301      	adds	r3, #1
 80053b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053be:	e00f      	b.n	80053e0 <HAL_I2C_Init+0x1dc>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	1e58      	subs	r0, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6859      	ldr	r1, [r3, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	0099      	lsls	r1, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053d6:	3301      	adds	r3, #1
 80053d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	6809      	ldr	r1, [r1, #0]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800540e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6911      	ldr	r1, [r2, #16]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68d2      	ldr	r2, [r2, #12]
 800541a:	4311      	orrs	r1, r2
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	430b      	orrs	r3, r1
 8005422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695a      	ldr	r2, [r3, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	431a      	orrs	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	000186a0 	.word	0x000186a0
 800547c:	001e847f 	.word	0x001e847f
 8005480:	003d08ff 	.word	0x003d08ff
 8005484:	431bde83 	.word	0x431bde83
 8005488:	10624dd3 	.word	0x10624dd3

0800548c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e128      	b.n	80056f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a90      	ldr	r2, [pc, #576]	@ (80056f8 <HAL_I2S_Init+0x26c>)
 80054b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f7fc ffed 	bl	8002498 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80054d4:	f023 030f 	bic.w	r3, r3, #15
 80054d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2202      	movs	r2, #2
 80054e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d060      	beq.n	80055ac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d102      	bne.n	80054f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80054f2:	2310      	movs	r3, #16
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	e001      	b.n	80054fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80054f8:	2320      	movs	r3, #32
 80054fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b20      	cmp	r3, #32
 8005502:	d802      	bhi.n	800550a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800550a:	2001      	movs	r0, #1
 800550c:	f001 f9d8 	bl	80068c0 <HAL_RCCEx_GetPeriphCLKFreq>
 8005510:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551a:	d125      	bne.n	8005568 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d010      	beq.n	8005546 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	fbb2 f2f3 	udiv	r2, r2, r3
 800552e:	4613      	mov	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4413      	add	r3, r2
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	3305      	adds	r3, #5
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	e01f      	b.n	8005586 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	461a      	mov	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	3305      	adds	r3, #5
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e00e      	b.n	8005586 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005582:	3305      	adds	r3, #5
 8005584:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a5c      	ldr	r2, [pc, #368]	@ (80056fc <HAL_I2S_Init+0x270>)
 800558a:	fba2 2303 	umull	r2, r3, r2, r3
 800558e:	08db      	lsrs	r3, r3, #3
 8005590:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80055ac:	2302      	movs	r3, #2
 80055ae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d902      	bls.n	80055c0 <HAL_I2S_Init+0x134>
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2bff      	cmp	r3, #255	@ 0xff
 80055be:	d907      	bls.n	80055d0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c4:	f043 0210 	orr.w	r2, r3, #16
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e08f      	b.n	80056f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	ea42 0103 	orr.w	r1, r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80055ee:	f023 030f 	bic.w	r3, r3, #15
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6851      	ldr	r1, [r2, #4]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6892      	ldr	r2, [r2, #8]
 80055fa:	4311      	orrs	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	68d2      	ldr	r2, [r2, #12]
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6992      	ldr	r2, [r2, #24]
 8005606:	430a      	orrs	r2, r1
 8005608:	431a      	orrs	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005612:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d161      	bne.n	80056e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a38      	ldr	r2, [pc, #224]	@ (8005700 <HAL_I2S_Init+0x274>)
 8005620:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a37      	ldr	r2, [pc, #220]	@ (8005704 <HAL_I2S_Init+0x278>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d101      	bne.n	8005630 <HAL_I2S_Init+0x1a4>
 800562c:	4b36      	ldr	r3, [pc, #216]	@ (8005708 <HAL_I2S_Init+0x27c>)
 800562e:	e001      	b.n	8005634 <HAL_I2S_Init+0x1a8>
 8005630:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	4932      	ldr	r1, [pc, #200]	@ (8005704 <HAL_I2S_Init+0x278>)
 800563c:	428a      	cmp	r2, r1
 800563e:	d101      	bne.n	8005644 <HAL_I2S_Init+0x1b8>
 8005640:	4a31      	ldr	r2, [pc, #196]	@ (8005708 <HAL_I2S_Init+0x27c>)
 8005642:	e001      	b.n	8005648 <HAL_I2S_Init+0x1bc>
 8005644:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005648:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800564c:	f023 030f 	bic.w	r3, r3, #15
 8005650:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a2b      	ldr	r2, [pc, #172]	@ (8005704 <HAL_I2S_Init+0x278>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d101      	bne.n	8005660 <HAL_I2S_Init+0x1d4>
 800565c:	4b2a      	ldr	r3, [pc, #168]	@ (8005708 <HAL_I2S_Init+0x27c>)
 800565e:	e001      	b.n	8005664 <HAL_I2S_Init+0x1d8>
 8005660:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005664:	2202      	movs	r2, #2
 8005666:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a25      	ldr	r2, [pc, #148]	@ (8005704 <HAL_I2S_Init+0x278>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d101      	bne.n	8005676 <HAL_I2S_Init+0x1ea>
 8005672:	4b25      	ldr	r3, [pc, #148]	@ (8005708 <HAL_I2S_Init+0x27c>)
 8005674:	e001      	b.n	800567a <HAL_I2S_Init+0x1ee>
 8005676:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005686:	d003      	beq.n	8005690 <HAL_I2S_Init+0x204>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e001      	b.n	800569c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056a6:	4313      	orrs	r3, r2
 80056a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80056ba:	4313      	orrs	r3, r2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	897b      	ldrh	r3, [r7, #10]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80056c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005704 <HAL_I2S_Init+0x278>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_I2S_Init+0x24c>
 80056d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005708 <HAL_I2S_Init+0x27c>)
 80056d6:	e001      	b.n	80056dc <HAL_I2S_Init+0x250>
 80056d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056dc:	897a      	ldrh	r2, [r7, #10]
 80056de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	08005803 	.word	0x08005803
 80056fc:	cccccccd 	.word	0xcccccccd
 8005700:	08005919 	.word	0x08005919
 8005704:	40003800 	.word	0x40003800
 8005708:	40003400 	.word	0x40003400

0800570c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10e      	bne.n	800579c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800578c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ffb8 	bl	800570c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057b6:	b292      	uxth	r2, r2
 80057b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	1c9a      	adds	r2, r3, #2
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10e      	bne.n	80057fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff93 	bl	8005720 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b086      	sub	sp, #24
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b04      	cmp	r3, #4
 800581c:	d13a      	bne.n	8005894 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b01      	cmp	r3, #1
 8005826:	d109      	bne.n	800583c <I2S_IRQHandler+0x3a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	d102      	bne.n	800583c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff ffb4 	bl	80057a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005842:	2b40      	cmp	r3, #64	@ 0x40
 8005844:	d126      	bne.n	8005894 <I2S_IRQHandler+0x92>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b20      	cmp	r3, #32
 8005852:	d11f      	bne.n	8005894 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005862:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005864:	2300      	movs	r3, #0
 8005866:	613b      	str	r3, [r7, #16]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f043 0202 	orr.w	r2, r3, #2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff ff50 	bl	8005734 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b03      	cmp	r3, #3
 800589e:	d136      	bne.n	800590e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d109      	bne.n	80058be <I2S_IRQHandler+0xbc>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b4:	2b80      	cmp	r3, #128	@ 0x80
 80058b6:	d102      	bne.n	80058be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff ff45 	bl	8005748 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d122      	bne.n	800590e <I2S_IRQHandler+0x10c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d11b      	bne.n	800590e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff13 	bl	8005734 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800590e:	bf00      	nop
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a92      	ldr	r2, [pc, #584]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d101      	bne.n	8005936 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005932:	4b92      	ldr	r3, [pc, #584]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005934:	e001      	b.n	800593a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005936:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a8b      	ldr	r2, [pc, #556]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d101      	bne.n	8005954 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005950:	4b8a      	ldr	r3, [pc, #552]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005952:	e001      	b.n	8005958 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005954:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005964:	d004      	beq.n	8005970 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8099 	bne.w	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b02      	cmp	r3, #2
 8005978:	d107      	bne.n	800598a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005980:	2b00      	cmp	r3, #0
 8005982:	d002      	beq.n	800598a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f925 	bl	8005bd4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b01      	cmp	r3, #1
 8005992:	d107      	bne.n	80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d002      	beq.n	80059a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f9c8 	bl	8005d34 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059aa:	2b40      	cmp	r3, #64	@ 0x40
 80059ac:	d13a      	bne.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f003 0320 	and.w	r3, r3, #32
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d035      	beq.n	8005a24 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6e      	ldr	r2, [pc, #440]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80059c2:	4b6e      	ldr	r3, [pc, #440]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c4:	e001      	b.n	80059ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80059c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4969      	ldr	r1, [pc, #420]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059d2:	428b      	cmp	r3, r1
 80059d4:	d101      	bne.n	80059da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80059d6:	4b69      	ldr	r3, [pc, #420]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059d8:	e001      	b.n	80059de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80059da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80059f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fe88 	bl	8005734 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b08      	cmp	r3, #8
 8005a2c:	f040 80c3 	bne.w	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80bd 	beq.w	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a4a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a49      	ldr	r2, [pc, #292]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d101      	bne.n	8005a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005a56:	4b49      	ldr	r3, [pc, #292]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a58:	e001      	b.n	8005a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005a5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4944      	ldr	r1, [pc, #272]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a66:	428b      	cmp	r3, r1
 8005a68:	d101      	bne.n	8005a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005a6a:	4b44      	ldr	r3, [pc, #272]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a6c:	e001      	b.n	8005a72 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005a6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a72:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a76:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	f043 0204 	orr.w	r2, r3, #4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fe4a 	bl	8005734 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aa0:	e089      	b.n	8005bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d107      	bne.n	8005abc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8be 	bl	8005c38 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d107      	bne.n	8005ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f8fd 	bl	8005cd0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d12f      	bne.n	8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d02a      	beq.n	8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005af8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1e      	ldr	r2, [pc, #120]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b04:	4b1d      	ldr	r3, [pc, #116]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b06:	e001      	b.n	8005b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b08:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4919      	ldr	r1, [pc, #100]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b14:	428b      	cmp	r3, r1
 8005b16:	d101      	bne.n	8005b1c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005b18:	4b18      	ldr	r3, [pc, #96]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b1a:	e001      	b.n	8005b20 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005b1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b32:	f043 0202 	orr.w	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7ff fdfa 	bl	8005734 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d136      	bne.n	8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d031      	beq.n	8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a07      	ldr	r2, [pc, #28]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005b5e:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b60:	e001      	b.n	8005b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005b62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4902      	ldr	r1, [pc, #8]	@ (8005b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b6e:	428b      	cmp	r3, r1
 8005b70:	d106      	bne.n	8005b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005b72:	4b02      	ldr	r3, [pc, #8]	@ (8005b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b74:	e006      	b.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005b76:	bf00      	nop
 8005b78:	40003800 	.word	0x40003800
 8005b7c:	40003400 	.word	0x40003400
 8005b80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b88:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685a      	ldr	r2, [r3, #4]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fdc0 	bl	8005734 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bb4:	e000      	b.n	8005bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005bb6:	bf00      	nop
}
 8005bb8:	bf00      	nop
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be0:	1c99      	adds	r1, r3, #2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d113      	bne.n	8005c2e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d106      	bne.n	8005c2e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ffc9 	bl	8005bc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	1c99      	adds	r1, r3, #2
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c4a:	8819      	ldrh	r1, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d101      	bne.n	8005c5a <I2SEx_TxISR_I2SExt+0x22>
 8005c56:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <I2SEx_TxISR_I2SExt+0x94>)
 8005c58:	e001      	b.n	8005c5e <I2SEx_TxISR_I2SExt+0x26>
 8005c5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c5e:	460a      	mov	r2, r1
 8005c60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d121      	bne.n	8005cbe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a12      	ldr	r2, [pc, #72]	@ (8005cc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <I2SEx_TxISR_I2SExt+0x50>
 8005c84:	4b11      	ldr	r3, [pc, #68]	@ (8005ccc <I2SEx_TxISR_I2SExt+0x94>)
 8005c86:	e001      	b.n	8005c8c <I2SEx_TxISR_I2SExt+0x54>
 8005c88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	490d      	ldr	r1, [pc, #52]	@ (8005cc8 <I2SEx_TxISR_I2SExt+0x90>)
 8005c94:	428b      	cmp	r3, r1
 8005c96:	d101      	bne.n	8005c9c <I2SEx_TxISR_I2SExt+0x64>
 8005c98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ccc <I2SEx_TxISR_I2SExt+0x94>)
 8005c9a:	e001      	b.n	8005ca0 <I2SEx_TxISR_I2SExt+0x68>
 8005c9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ca0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ca4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ff81 	bl	8005bc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40003800 	.word	0x40003800
 8005ccc:	40003400 	.word	0x40003400

08005cd0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68d8      	ldr	r0, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	1c99      	adds	r1, r3, #2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ce8:	b282      	uxth	r2, r0
 8005cea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d12:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff ff4a 	bl	8005bc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	3708      	adds	r7, #8
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}

08005d34 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a20      	ldr	r2, [pc, #128]	@ (8005dc4 <I2SEx_RxISR_I2SExt+0x90>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d101      	bne.n	8005d4a <I2SEx_RxISR_I2SExt+0x16>
 8005d46:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <I2SEx_RxISR_I2SExt+0x94>)
 8005d48:	e001      	b.n	8005d4e <I2SEx_RxISR_I2SExt+0x1a>
 8005d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d4e:	68d8      	ldr	r0, [r3, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	1c99      	adds	r1, r3, #2
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d5a:	b282      	uxth	r2, r0
 8005d5c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d121      	bne.n	8005dba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a12      	ldr	r2, [pc, #72]	@ (8005dc4 <I2SEx_RxISR_I2SExt+0x90>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d101      	bne.n	8005d84 <I2SEx_RxISR_I2SExt+0x50>
 8005d80:	4b11      	ldr	r3, [pc, #68]	@ (8005dc8 <I2SEx_RxISR_I2SExt+0x94>)
 8005d82:	e001      	b.n	8005d88 <I2SEx_RxISR_I2SExt+0x54>
 8005d84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	490d      	ldr	r1, [pc, #52]	@ (8005dc4 <I2SEx_RxISR_I2SExt+0x90>)
 8005d90:	428b      	cmp	r3, r1
 8005d92:	d101      	bne.n	8005d98 <I2SEx_RxISR_I2SExt+0x64>
 8005d94:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc8 <I2SEx_RxISR_I2SExt+0x94>)
 8005d96:	e001      	b.n	8005d9c <I2SEx_RxISR_I2SExt+0x68>
 8005d98:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d9c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005da0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ff03 	bl	8005bc0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005dba:	bf00      	nop
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40003800 	.word	0x40003800
 8005dc8:	40003400 	.word	0x40003400

08005dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e267      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d075      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005dea:	4b88      	ldr	r3, [pc, #544]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f003 030c 	and.w	r3, r3, #12
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00c      	beq.n	8005e10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005df6:	4b85      	ldr	r3, [pc, #532]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005dfe:	2b08      	cmp	r3, #8
 8005e00:	d112      	bne.n	8005e28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e02:	4b82      	ldr	r3, [pc, #520]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e0e:	d10b      	bne.n	8005e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	4b7e      	ldr	r3, [pc, #504]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d05b      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x108>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d157      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e242      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e30:	d106      	bne.n	8005e40 <HAL_RCC_OscConfig+0x74>
 8005e32:	4b76      	ldr	r3, [pc, #472]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a75      	ldr	r2, [pc, #468]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	6013      	str	r3, [r2, #0]
 8005e3e:	e01d      	b.n	8005e7c <HAL_RCC_OscConfig+0xb0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e48:	d10c      	bne.n	8005e64 <HAL_RCC_OscConfig+0x98>
 8005e4a:	4b70      	ldr	r3, [pc, #448]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	4b6d      	ldr	r3, [pc, #436]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	e00b      	b.n	8005e7c <HAL_RCC_OscConfig+0xb0>
 8005e64:	4b69      	ldr	r3, [pc, #420]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a68      	ldr	r2, [pc, #416]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b66      	ldr	r3, [pc, #408]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a65      	ldr	r2, [pc, #404]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d013      	beq.n	8005eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fc fd92 	bl	80029ac <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e8c:	f7fc fd8e 	bl	80029ac <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b64      	cmp	r3, #100	@ 0x64
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e207      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0xc0>
 8005eaa:	e014      	b.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7fc fd7e 	bl	80029ac <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb4:	f7fc fd7a 	bl	80029ac <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e1f3      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ec6:	4b51      	ldr	r3, [pc, #324]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0xe8>
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d063      	beq.n	8005faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005eee:	4b47      	ldr	r3, [pc, #284]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d11c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efa:	4b44      	ldr	r3, [pc, #272]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d116      	bne.n	8005f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f06:	4b41      	ldr	r3, [pc, #260]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_RCC_OscConfig+0x152>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e1c7      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4937      	ldr	r1, [pc, #220]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f32:	e03a      	b.n	8005faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f3c:	4b34      	ldr	r3, [pc, #208]	@ (8006010 <HAL_RCC_OscConfig+0x244>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f42:	f7fc fd33 	bl	80029ac <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f48:	e008      	b.n	8005f5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f4a:	f7fc fd2f 	bl	80029ac <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d901      	bls.n	8005f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	e1a8      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0f0      	beq.n	8005f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f68:	4b28      	ldr	r3, [pc, #160]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4925      	ldr	r1, [pc, #148]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	600b      	str	r3, [r1, #0]
 8005f7c:	e015      	b.n	8005faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f7e:	4b24      	ldr	r3, [pc, #144]	@ (8006010 <HAL_RCC_OscConfig+0x244>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fc fd12 	bl	80029ac <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f8c:	f7fc fd0e 	bl	80029ac <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e187      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f0      	bne.n	8005f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0308 	and.w	r3, r3, #8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d036      	beq.n	8006024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fbe:	4b15      	ldr	r3, [pc, #84]	@ (8006014 <HAL_RCC_OscConfig+0x248>)
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fc fcf2 	bl	80029ac <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fcc:	f7fc fcee 	bl	80029ac <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e167      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fde:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_RCC_OscConfig+0x240>)
 8005fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x200>
 8005fea:	e01b      	b.n	8006024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fec:	4b09      	ldr	r3, [pc, #36]	@ (8006014 <HAL_RCC_OscConfig+0x248>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff2:	f7fc fcdb 	bl	80029ac <HAL_GetTick>
 8005ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ff8:	e00e      	b.n	8006018 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffa:	f7fc fcd7 	bl	80029ac <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d907      	bls.n	8006018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	e150      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
 800600c:	40023800 	.word	0x40023800
 8006010:	42470000 	.word	0x42470000
 8006014:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006018:	4b88      	ldr	r3, [pc, #544]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 800601a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1ea      	bne.n	8005ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 8097 	beq.w	8006160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006036:	4b81      	ldr	r3, [pc, #516]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d10f      	bne.n	8006062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	4b7d      	ldr	r3, [pc, #500]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604a:	4a7c      	ldr	r2, [pc, #496]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 800604c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006050:	6413      	str	r3, [r2, #64]	@ 0x40
 8006052:	4b7a      	ldr	r3, [pc, #488]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800605e:	2301      	movs	r3, #1
 8006060:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006062:	4b77      	ldr	r3, [pc, #476]	@ (8006240 <HAL_RCC_OscConfig+0x474>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800606a:	2b00      	cmp	r3, #0
 800606c:	d118      	bne.n	80060a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800606e:	4b74      	ldr	r3, [pc, #464]	@ (8006240 <HAL_RCC_OscConfig+0x474>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a73      	ldr	r2, [pc, #460]	@ (8006240 <HAL_RCC_OscConfig+0x474>)
 8006074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607a:	f7fc fc97 	bl	80029ac <HAL_GetTick>
 800607e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006080:	e008      	b.n	8006094 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006082:	f7fc fc93 	bl	80029ac <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d901      	bls.n	8006094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e10c      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006094:	4b6a      	ldr	r3, [pc, #424]	@ (8006240 <HAL_RCC_OscConfig+0x474>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0f0      	beq.n	8006082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d106      	bne.n	80060b6 <HAL_RCC_OscConfig+0x2ea>
 80060a8:	4b64      	ldr	r3, [pc, #400]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ac:	4a63      	ldr	r2, [pc, #396]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060b4:	e01c      	b.n	80060f0 <HAL_RCC_OscConfig+0x324>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x30c>
 80060be:	4b5f      	ldr	r3, [pc, #380]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c2:	4a5e      	ldr	r2, [pc, #376]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060c4:	f043 0304 	orr.w	r3, r3, #4
 80060c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80060ca:	4b5c      	ldr	r3, [pc, #368]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ce:	4a5b      	ldr	r2, [pc, #364]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060d0:	f043 0301 	orr.w	r3, r3, #1
 80060d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0x324>
 80060d8:	4b58      	ldr	r3, [pc, #352]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060dc:	4a57      	ldr	r2, [pc, #348]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060de:	f023 0301 	bic.w	r3, r3, #1
 80060e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80060e4:	4b55      	ldr	r3, [pc, #340]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e8:	4a54      	ldr	r2, [pc, #336]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80060ea:	f023 0304 	bic.w	r3, r3, #4
 80060ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f8:	f7fc fc58 	bl	80029ac <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fe:	e00a      	b.n	8006116 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006100:	f7fc fc54 	bl	80029ac <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e0cb      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006116:	4b49      	ldr	r3, [pc, #292]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ee      	beq.n	8006100 <HAL_RCC_OscConfig+0x334>
 8006122:	e014      	b.n	800614e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006124:	f7fc fc42 	bl	80029ac <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612a:	e00a      	b.n	8006142 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612c:	f7fc fc3e 	bl	80029ac <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e0b5      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006142:	4b3e      	ldr	r3, [pc, #248]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1ee      	bne.n	800612c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800614e:	7dfb      	ldrb	r3, [r7, #23]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d105      	bne.n	8006160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006154:	4b39      	ldr	r3, [pc, #228]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006158:	4a38      	ldr	r2, [pc, #224]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 800615a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800615e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80a1 	beq.w	80062ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800616a:	4b34      	ldr	r3, [pc, #208]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f003 030c 	and.w	r3, r3, #12
 8006172:	2b08      	cmp	r3, #8
 8006174:	d05c      	beq.n	8006230 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	2b02      	cmp	r3, #2
 800617c:	d141      	bne.n	8006202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800617e:	4b31      	ldr	r3, [pc, #196]	@ (8006244 <HAL_RCC_OscConfig+0x478>)
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006184:	f7fc fc12 	bl	80029ac <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fc fc0e 	bl	80029ac <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e087      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800619e:	4b27      	ldr	r3, [pc, #156]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1f0      	bne.n	800618c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	431a      	orrs	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	431a      	orrs	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c0:	085b      	lsrs	r3, r3, #1
 80061c2:	3b01      	subs	r3, #1
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061cc:	061b      	lsls	r3, r3, #24
 80061ce:	491b      	ldr	r1, [pc, #108]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006244 <HAL_RCC_OscConfig+0x478>)
 80061d6:	2201      	movs	r2, #1
 80061d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061da:	f7fc fbe7 	bl	80029ac <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061e0:	e008      	b.n	80061f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e2:	f7fc fbe3 	bl	80029ac <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e05c      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f4:	4b11      	ldr	r3, [pc, #68]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d0f0      	beq.n	80061e2 <HAL_RCC_OscConfig+0x416>
 8006200:	e054      	b.n	80062ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006202:	4b10      	ldr	r3, [pc, #64]	@ (8006244 <HAL_RCC_OscConfig+0x478>)
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006208:	f7fc fbd0 	bl	80029ac <HAL_GetTick>
 800620c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800620e:	e008      	b.n	8006222 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006210:	f7fc fbcc 	bl	80029ac <HAL_GetTick>
 8006214:	4602      	mov	r2, r0
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	1ad3      	subs	r3, r2, r3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d901      	bls.n	8006222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e045      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006222:	4b06      	ldr	r3, [pc, #24]	@ (800623c <HAL_RCC_OscConfig+0x470>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1f0      	bne.n	8006210 <HAL_RCC_OscConfig+0x444>
 800622e:	e03d      	b.n	80062ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d107      	bne.n	8006248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e038      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
 800623c:	40023800 	.word	0x40023800
 8006240:	40007000 	.word	0x40007000
 8006244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006248:	4b1b      	ldr	r3, [pc, #108]	@ (80062b8 <HAL_RCC_OscConfig+0x4ec>)
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d028      	beq.n	80062a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006260:	429a      	cmp	r2, r3
 8006262:	d121      	bne.n	80062a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800626e:	429a      	cmp	r2, r3
 8006270:	d11a      	bne.n	80062a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800627e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006280:	4293      	cmp	r3, r2
 8006282:	d111      	bne.n	80062a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	085b      	lsrs	r3, r3, #1
 8006290:	3b01      	subs	r3, #1
 8006292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d107      	bne.n	80062a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d001      	beq.n	80062ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e000      	b.n	80062ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40023800 	.word	0x40023800

080062bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e0cc      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062d0:	4b68      	ldr	r3, [pc, #416]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d90c      	bls.n	80062f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b65      	ldr	r3, [pc, #404]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062e6:	4b63      	ldr	r3, [pc, #396]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0307 	and.w	r3, r3, #7
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d001      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0b8      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d020      	beq.n	8006346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d005      	beq.n	800631c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006310:	4b59      	ldr	r3, [pc, #356]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	4a58      	ldr	r2, [pc, #352]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800631a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0308 	and.w	r3, r3, #8
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006328:	4b53      	ldr	r3, [pc, #332]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	4a52      	ldr	r2, [pc, #328]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006334:	4b50      	ldr	r3, [pc, #320]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	494d      	ldr	r1, [pc, #308]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	4313      	orrs	r3, r2
 8006344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d044      	beq.n	80063dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d107      	bne.n	800636a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800635a:	4b47      	ldr	r3, [pc, #284]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006362:	2b00      	cmp	r3, #0
 8006364:	d119      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e07f      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d003      	beq.n	800637a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006376:	2b03      	cmp	r3, #3
 8006378:	d107      	bne.n	800638a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800637a:	4b3f      	ldr	r3, [pc, #252]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e06f      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800638a:	4b3b      	ldr	r3, [pc, #236]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e067      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800639a:	4b37      	ldr	r3, [pc, #220]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	f023 0203 	bic.w	r2, r3, #3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4934      	ldr	r1, [pc, #208]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063ac:	f7fc fafe 	bl	80029ac <HAL_GetTick>
 80063b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b2:	e00a      	b.n	80063ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063b4:	f7fc fafa 	bl	80029ac <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e04f      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f003 020c 	and.w	r2, r3, #12
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	429a      	cmp	r2, r3
 80063da:	d1eb      	bne.n	80063b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063dc:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d20c      	bcs.n	8006404 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b22      	ldr	r3, [pc, #136]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f2:	4b20      	ldr	r3, [pc, #128]	@ (8006474 <HAL_RCC_ClockConfig+0x1b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d001      	beq.n	8006404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e032      	b.n	800646a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b00      	cmp	r3, #0
 800640e:	d008      	beq.n	8006422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006410:	4b19      	ldr	r3, [pc, #100]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4916      	ldr	r1, [pc, #88]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	4313      	orrs	r3, r2
 8006420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0308 	and.w	r3, r3, #8
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800642e:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	490e      	ldr	r1, [pc, #56]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800643e:	4313      	orrs	r3, r2
 8006440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006442:	f000 f821 	bl	8006488 <HAL_RCC_GetSysClockFreq>
 8006446:	4602      	mov	r2, r0
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	091b      	lsrs	r3, r3, #4
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	490a      	ldr	r1, [pc, #40]	@ (800647c <HAL_RCC_ClockConfig+0x1c0>)
 8006454:	5ccb      	ldrb	r3, [r1, r3]
 8006456:	fa22 f303 	lsr.w	r3, r2, r3
 800645a:	4a09      	ldr	r2, [pc, #36]	@ (8006480 <HAL_RCC_ClockConfig+0x1c4>)
 800645c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800645e:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <HAL_RCC_ClockConfig+0x1c8>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f7fc fa5e 	bl	8002924 <HAL_InitTick>

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	40023c00 	.word	0x40023c00
 8006478:	40023800 	.word	0x40023800
 800647c:	0800bf34 	.word	0x0800bf34
 8006480:	20000000 	.word	0x20000000
 8006484:	20000004 	.word	0x20000004

08006488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800648c:	b094      	sub	sp, #80	@ 0x50
 800648e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064a0:	4b79      	ldr	r3, [pc, #484]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d00d      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x40>
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	f200 80e1 	bhi.w	8006674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_RCC_GetSysClockFreq+0x34>
 80064b6:	2b04      	cmp	r3, #4
 80064b8:	d003      	beq.n	80064c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80064ba:	e0db      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064bc:	4b73      	ldr	r3, [pc, #460]	@ (800668c <HAL_RCC_GetSysClockFreq+0x204>)
 80064be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064c0:	e0db      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064c2:	4b73      	ldr	r3, [pc, #460]	@ (8006690 <HAL_RCC_GetSysClockFreq+0x208>)
 80064c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064c6:	e0d8      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d063      	beq.n	80065a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064de:	4b6a      	ldr	r3, [pc, #424]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	099b      	lsrs	r3, r3, #6
 80064e4:	2200      	movs	r2, #0
 80064e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f2:	2300      	movs	r3, #0
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80064fa:	4622      	mov	r2, r4
 80064fc:	462b      	mov	r3, r5
 80064fe:	f04f 0000 	mov.w	r0, #0
 8006502:	f04f 0100 	mov.w	r1, #0
 8006506:	0159      	lsls	r1, r3, #5
 8006508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650c:	0150      	lsls	r0, r2, #5
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4621      	mov	r1, r4
 8006514:	1a51      	subs	r1, r2, r1
 8006516:	6139      	str	r1, [r7, #16]
 8006518:	4629      	mov	r1, r5
 800651a:	eb63 0301 	sbc.w	r3, r3, r1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800652c:	4659      	mov	r1, fp
 800652e:	018b      	lsls	r3, r1, #6
 8006530:	4651      	mov	r1, sl
 8006532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006536:	4651      	mov	r1, sl
 8006538:	018a      	lsls	r2, r1, #6
 800653a:	4651      	mov	r1, sl
 800653c:	ebb2 0801 	subs.w	r8, r2, r1
 8006540:	4659      	mov	r1, fp
 8006542:	eb63 0901 	sbc.w	r9, r3, r1
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800655a:	4690      	mov	r8, r2
 800655c:	4699      	mov	r9, r3
 800655e:	4623      	mov	r3, r4
 8006560:	eb18 0303 	adds.w	r3, r8, r3
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	462b      	mov	r3, r5
 8006568:	eb49 0303 	adc.w	r3, r9, r3
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	f04f 0200 	mov.w	r2, #0
 8006572:	f04f 0300 	mov.w	r3, #0
 8006576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800657a:	4629      	mov	r1, r5
 800657c:	024b      	lsls	r3, r1, #9
 800657e:	4621      	mov	r1, r4
 8006580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006584:	4621      	mov	r1, r4
 8006586:	024a      	lsls	r2, r1, #9
 8006588:	4610      	mov	r0, r2
 800658a:	4619      	mov	r1, r3
 800658c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800658e:	2200      	movs	r2, #0
 8006590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006598:	f7f9 fe72 	bl	8000280 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4613      	mov	r3, r2
 80065a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a4:	e058      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a6:	4b38      	ldr	r3, [pc, #224]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	2200      	movs	r2, #0
 80065ae:	4618      	mov	r0, r3
 80065b0:	4611      	mov	r1, r2
 80065b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80065b6:	623b      	str	r3, [r7, #32]
 80065b8:	2300      	movs	r3, #0
 80065ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80065bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80065c0:	4642      	mov	r2, r8
 80065c2:	464b      	mov	r3, r9
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f04f 0100 	mov.w	r1, #0
 80065cc:	0159      	lsls	r1, r3, #5
 80065ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d2:	0150      	lsls	r0, r2, #5
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4641      	mov	r1, r8
 80065da:	ebb2 0a01 	subs.w	sl, r2, r1
 80065de:	4649      	mov	r1, r9
 80065e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80065f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80065f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80065f8:	ebb2 040a 	subs.w	r4, r2, sl
 80065fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	f04f 0300 	mov.w	r3, #0
 8006608:	00eb      	lsls	r3, r5, #3
 800660a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800660e:	00e2      	lsls	r2, r4, #3
 8006610:	4614      	mov	r4, r2
 8006612:	461d      	mov	r5, r3
 8006614:	4643      	mov	r3, r8
 8006616:	18e3      	adds	r3, r4, r3
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	464b      	mov	r3, r9
 800661c:	eb45 0303 	adc.w	r3, r5, r3
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800662e:	4629      	mov	r1, r5
 8006630:	028b      	lsls	r3, r1, #10
 8006632:	4621      	mov	r1, r4
 8006634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006638:	4621      	mov	r1, r4
 800663a:	028a      	lsls	r2, r1, #10
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006642:	2200      	movs	r2, #0
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	61fa      	str	r2, [r7, #28]
 8006648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664c:	f7f9 fe18 	bl	8000280 <__aeabi_uldivmod>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4613      	mov	r3, r2
 8006656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006658:	4b0b      	ldr	r3, [pc, #44]	@ (8006688 <HAL_RCC_GetSysClockFreq+0x200>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	0c1b      	lsrs	r3, r3, #16
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	3301      	adds	r3, #1
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800666a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800666c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006672:	e002      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006674:	4b05      	ldr	r3, [pc, #20]	@ (800668c <HAL_RCC_GetSysClockFreq+0x204>)
 8006676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800667a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800667c:	4618      	mov	r0, r3
 800667e:	3750      	adds	r7, #80	@ 0x50
 8006680:	46bd      	mov	sp, r7
 8006682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006686:	bf00      	nop
 8006688:	40023800 	.word	0x40023800
 800668c:	00f42400 	.word	0x00f42400
 8006690:	007a1200 	.word	0x007a1200

08006694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006694:	b480      	push	{r7}
 8006696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006698:	4b03      	ldr	r3, [pc, #12]	@ (80066a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800669a:	681b      	ldr	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20000000 	.word	0x20000000

080066ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066b0:	f7ff fff0 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 80066b4:	4602      	mov	r2, r0
 80066b6:	4b05      	ldr	r3, [pc, #20]	@ (80066cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	0a9b      	lsrs	r3, r3, #10
 80066bc:	f003 0307 	and.w	r3, r3, #7
 80066c0:	4903      	ldr	r1, [pc, #12]	@ (80066d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066c2:	5ccb      	ldrb	r3, [r1, r3]
 80066c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	40023800 	.word	0x40023800
 80066d0:	0800bf44 	.word	0x0800bf44

080066d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80066d8:	f7ff ffdc 	bl	8006694 <HAL_RCC_GetHCLKFreq>
 80066dc:	4602      	mov	r2, r0
 80066de:	4b05      	ldr	r3, [pc, #20]	@ (80066f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	0b5b      	lsrs	r3, r3, #13
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	4903      	ldr	r1, [pc, #12]	@ (80066f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ea:	5ccb      	ldrb	r3, [r1, r3]
 80066ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	40023800 	.word	0x40023800
 80066f8:	0800bf44 	.word	0x0800bf44

080066fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006720:	2b00      	cmp	r3, #0
 8006722:	d035      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006724:	4b62      	ldr	r3, [pc, #392]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800672a:	f7fc f93f 	bl	80029ac <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006732:	f7fc f93b 	bl	80029ac <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e0b0      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006744:	4b5b      	ldr	r3, [pc, #364]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1f0      	bne.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	019a      	lsls	r2, r3, #6
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	071b      	lsls	r3, r3, #28
 800675c:	4955      	ldr	r1, [pc, #340]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006764:	4b52      	ldr	r3, [pc, #328]	@ (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006766:	2201      	movs	r2, #1
 8006768:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800676a:	f7fc f91f 	bl	80029ac <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006770:	e008      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006772:	f7fc f91b 	bl	80029ac <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d901      	bls.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e090      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006784:	4b4b      	ldr	r3, [pc, #300]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f0      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 8083 	beq.w	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	4b44      	ldr	r3, [pc, #272]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	4a43      	ldr	r2, [pc, #268]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ae:	4b41      	ldr	r3, [pc, #260]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067b6:	60fb      	str	r3, [r7, #12]
 80067b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067ba:	4b3f      	ldr	r3, [pc, #252]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a3e      	ldr	r2, [pc, #248]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067c6:	f7fc f8f1 	bl	80029ac <HAL_GetTick>
 80067ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067cc:	e008      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067ce:	f7fc f8ed 	bl	80029ac <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e062      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80067e0:	4b35      	ldr	r3, [pc, #212]	@ (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067ec:	4b31      	ldr	r3, [pc, #196]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d02f      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	429a      	cmp	r2, r3
 8006808:	d028      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800680a:	4b2a      	ldr	r3, [pc, #168]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800680c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006812:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006814:	4b29      	ldr	r3, [pc, #164]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006816:	2201      	movs	r2, #1
 8006818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800681a:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800681c:	2200      	movs	r2, #0
 800681e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006820:	4a24      	ldr	r2, [pc, #144]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006826:	4b23      	ldr	r3, [pc, #140]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b01      	cmp	r3, #1
 8006830:	d114      	bne.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006832:	f7fc f8bb 	bl	80029ac <HAL_GetTick>
 8006836:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006838:	e00a      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800683a:	f7fc f8b7 	bl	80029ac <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006848:	4293      	cmp	r3, r2
 800684a:	d901      	bls.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e02a      	b.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006850:	4b18      	ldr	r3, [pc, #96]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0ee      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006868:	d10d      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800686a:	4b12      	ldr	r3, [pc, #72]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800687a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800687e:	490d      	ldr	r1, [pc, #52]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006880:	4313      	orrs	r3, r2
 8006882:	608b      	str	r3, [r1, #8]
 8006884:	e005      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006886:	4b0b      	ldr	r3, [pc, #44]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a0a      	ldr	r2, [pc, #40]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006890:	6093      	str	r3, [r2, #8]
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006894:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68db      	ldr	r3, [r3, #12]
 800689a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689e:	4905      	ldr	r1, [pc, #20]	@ (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3718      	adds	r7, #24
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	42470068 	.word	0x42470068
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40007000 	.word	0x40007000
 80068bc:	42470e40 	.word	0x42470e40

080068c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80068d4:	2300      	movs	r3, #0
 80068d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d13f      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80068de:	4b24      	ldr	r3, [pc, #144]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d006      	beq.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068f4:	d12f      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80068f6:	4b1f      	ldr	r3, [pc, #124]	@ (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80068f8:	617b      	str	r3, [r7, #20]
          break;
 80068fa:	e02f      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80068fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006904:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006908:	d108      	bne.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800690a:	4b19      	ldr	r3, [pc, #100]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006912:	4a19      	ldr	r2, [pc, #100]	@ (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	613b      	str	r3, [r7, #16]
 800691a:	e007      	b.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800691c:	4b14      	ldr	r3, [pc, #80]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006924:	4a15      	ldr	r2, [pc, #84]	@ (800697c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006926:	fbb2 f3f3 	udiv	r3, r2, r3
 800692a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800692c:	4b10      	ldr	r3, [pc, #64]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800692e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006932:	099b      	lsrs	r3, r3, #6
 8006934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006940:	4b0b      	ldr	r3, [pc, #44]	@ (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006942:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006946:	0f1b      	lsrs	r3, r3, #28
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006952:	617b      	str	r3, [r7, #20]
          break;
 8006954:	e002      	b.n	800695c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
          break;
 800695a:	bf00      	nop
        }
      }
      break;
 800695c:	e000      	b.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800695e:	bf00      	nop
    }
  }
  return frequency;
 8006960:	697b      	ldr	r3, [r7, #20]
}
 8006962:	4618      	mov	r0, r3
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	40023800 	.word	0x40023800
 8006974:	00bb8000 	.word	0x00bb8000
 8006978:	007a1200 	.word	0x007a1200
 800697c:	00f42400 	.word	0x00f42400

08006980 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e01c      	b.n	80069cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	795b      	ldrb	r3, [r3, #5]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f7fb fdf8 	bl	8002598 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0204 	orr.w	r2, r2, #4
 80069bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3708      	adds	r7, #8
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	791b      	ldrb	r3, [r3, #4]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <HAL_RNG_GenerateRandomNumber+0x1a>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e044      	b.n	8006a78 <HAL_RNG_GenerateRandomNumber+0xa4>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2201      	movs	r2, #1
 80069f2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	795b      	ldrb	r3, [r3, #5]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d133      	bne.n	8006a66 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2202      	movs	r2, #2
 8006a02:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a04:	f7fb ffd2 	bl	80029ac <HAL_GetTick>
 8006a08:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a0a:	e018      	b.n	8006a3e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006a0c:	f7fb ffce 	bl	80029ac <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d911      	bls.n	8006a3e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f003 0301 	and.w	r3, r3, #1
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d00a      	beq.n	8006a3e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e01c      	b.n	8006a78 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d1df      	bne.n	8006a0c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	715a      	strb	r2, [r3, #5]
 8006a64:	e004      	b.n	8006a70 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2204      	movs	r2, #4
 8006a6a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	711a      	strb	r2, [r3, #4]

  return status;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e07b      	b.n	8006b8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d108      	bne.n	8006aac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006aa2:	d009      	beq.n	8006ab8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	61da      	str	r2, [r3, #28]
 8006aaa:	e005      	b.n	8006ab8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d106      	bne.n	8006ad8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7fb fd82 	bl	80025dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2202      	movs	r2, #2
 8006adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006aee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	431a      	orrs	r2, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	699b      	ldr	r3, [r3, #24]
 8006b24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	69db      	ldr	r3, [r3, #28]
 8006b2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b3c:	ea42 0103 	orr.w	r1, r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 0104 	and.w	r1, r3, #4
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	f003 0210 	and.w	r2, r3, #16
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	69da      	ldr	r2, [r3, #28]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e042      	b.n	8006c2a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fb fd57 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	@ 0x24
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bd4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f972 	bl	8006ec0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691a      	ldr	r2, [r3, #16]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bfa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c0a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2220      	movs	r2, #32
 8006c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3708      	adds	r7, #8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08a      	sub	sp, #40	@ 0x28
 8006c36:	af02      	add	r7, sp, #8
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d175      	bne.n	8006d3e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <HAL_UART_Transmit+0x2c>
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d101      	bne.n	8006c62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e06e      	b.n	8006d40 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2221      	movs	r2, #33	@ 0x21
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c70:	f7fb fe9c 	bl	80029ac <HAL_GetTick>
 8006c74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	88fa      	ldrh	r2, [r7, #6]
 8006c7a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	88fa      	ldrh	r2, [r7, #6]
 8006c80:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c8a:	d108      	bne.n	8006c9e <HAL_UART_Transmit+0x6c>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d104      	bne.n	8006c9e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	61bb      	str	r3, [r7, #24]
 8006c9c:	e003      	b.n	8006ca6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ca6:	e02e      	b.n	8006d06 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	2180      	movs	r1, #128	@ 0x80
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 f848 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2220      	movs	r2, #32
 8006cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e03a      	b.n	8006d40 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	881b      	ldrh	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	3302      	adds	r3, #2
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e007      	b.n	8006cf8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	781a      	ldrb	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1cb      	bne.n	8006ca8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	9300      	str	r3, [sp, #0]
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	2140      	movs	r1, #64	@ 0x40
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 f814 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e006      	b.n	8006d40 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	e03b      	b.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d037      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fb fe23 	bl	80029ac <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	6a3a      	ldr	r2, [r7, #32]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e03a      	b.n	8006df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d023      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b80      	cmp	r3, #128	@ 0x80
 8006d8e:	d020      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	2b40      	cmp	r3, #64	@ 0x40
 8006d94:	d01d      	beq.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d116      	bne.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006da4:	2300      	movs	r3, #0
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	617b      	str	r3, [r7, #20]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f81d 	bl	8006dfa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2208      	movs	r2, #8
 8006dc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e00f      	b.n	8006df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	bf0c      	ite	eq
 8006de2:	2301      	moveq	r3, #1
 8006de4:	2300      	movne	r3, #0
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d0b4      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3718      	adds	r7, #24
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b095      	sub	sp, #84	@ 0x54
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	330c      	adds	r3, #12
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0c:	e853 3f00 	ldrex	r3, [r3]
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e22:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e2a:	e841 2300 	strex	r3, r2, [r1]
 8006e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1e5      	bne.n	8006e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3314      	adds	r3, #20
 8006e3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3314      	adds	r3, #20
 8006e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e5      	bne.n	8006e36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d119      	bne.n	8006ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	330c      	adds	r3, #12
 8006e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	330c      	adds	r3, #12
 8006e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e92:	61ba      	str	r2, [r7, #24]
 8006e94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e5      	bne.n	8006e72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006eb4:	bf00      	nop
 8006eb6:	3754      	adds	r7, #84	@ 0x54
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ec4:	b0c0      	sub	sp, #256	@ 0x100
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006edc:	68d9      	ldr	r1, [r3, #12]
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	ea40 0301 	orr.w	r3, r0, r1
 8006ee8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f18:	f021 010c 	bic.w	r1, r1, #12
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f26:	430b      	orrs	r3, r1
 8006f28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3a:	6999      	ldr	r1, [r3, #24]
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	ea40 0301 	orr.w	r3, r0, r1
 8006f46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b8f      	ldr	r3, [pc, #572]	@ (800718c <UART_SetConfig+0x2cc>)
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d005      	beq.n	8006f60 <UART_SetConfig+0xa0>
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	@ (8007190 <UART_SetConfig+0x2d0>)
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d104      	bne.n	8006f6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f60:	f7ff fbb8 	bl	80066d4 <HAL_RCC_GetPCLK2Freq>
 8006f64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006f68:	e003      	b.n	8006f72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f6a:	f7ff fb9f 	bl	80066ac <HAL_RCC_GetPCLK1Freq>
 8006f6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f7c:	f040 810c 	bne.w	8007198 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006f8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006f8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	1891      	adds	r1, r2, r2
 8006f98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006f9a:	415b      	adcs	r3, r3
 8006f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006fa2:	4621      	mov	r1, r4
 8006fa4:	eb12 0801 	adds.w	r8, r2, r1
 8006fa8:	4629      	mov	r1, r5
 8006faa:	eb43 0901 	adc.w	r9, r3, r1
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fc2:	4690      	mov	r8, r2
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	4623      	mov	r3, r4
 8006fc8:	eb18 0303 	adds.w	r3, r8, r3
 8006fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006fd0:	462b      	mov	r3, r5
 8006fd2:	eb49 0303 	adc.w	r3, r9, r3
 8006fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fe6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006fea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fee:	460b      	mov	r3, r1
 8006ff0:	18db      	adds	r3, r3, r3
 8006ff2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	eb42 0303 	adc.w	r3, r2, r3
 8006ffa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ffc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007000:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007004:	f7f9 f93c 	bl	8000280 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4b61      	ldr	r3, [pc, #388]	@ (8007194 <UART_SetConfig+0x2d4>)
 800700e:	fba3 2302 	umull	r2, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	011c      	lsls	r4, r3, #4
 8007016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800701a:	2200      	movs	r2, #0
 800701c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007020:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007024:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007028:	4642      	mov	r2, r8
 800702a:	464b      	mov	r3, r9
 800702c:	1891      	adds	r1, r2, r2
 800702e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007030:	415b      	adcs	r3, r3
 8007032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007034:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007038:	4641      	mov	r1, r8
 800703a:	eb12 0a01 	adds.w	sl, r2, r1
 800703e:	4649      	mov	r1, r9
 8007040:	eb43 0b01 	adc.w	fp, r3, r1
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007050:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007058:	4692      	mov	sl, r2
 800705a:	469b      	mov	fp, r3
 800705c:	4643      	mov	r3, r8
 800705e:	eb1a 0303 	adds.w	r3, sl, r3
 8007062:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007066:	464b      	mov	r3, r9
 8007068:	eb4b 0303 	adc.w	r3, fp, r3
 800706c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800707c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007080:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007084:	460b      	mov	r3, r1
 8007086:	18db      	adds	r3, r3, r3
 8007088:	643b      	str	r3, [r7, #64]	@ 0x40
 800708a:	4613      	mov	r3, r2
 800708c:	eb42 0303 	adc.w	r3, r2, r3
 8007090:	647b      	str	r3, [r7, #68]	@ 0x44
 8007092:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007096:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800709a:	f7f9 f8f1 	bl	8000280 <__aeabi_uldivmod>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4611      	mov	r1, r2
 80070a4:	4b3b      	ldr	r3, [pc, #236]	@ (8007194 <UART_SetConfig+0x2d4>)
 80070a6:	fba3 2301 	umull	r2, r3, r3, r1
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	2264      	movs	r2, #100	@ 0x64
 80070ae:	fb02 f303 	mul.w	r3, r2, r3
 80070b2:	1acb      	subs	r3, r1, r3
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80070ba:	4b36      	ldr	r3, [pc, #216]	@ (8007194 <UART_SetConfig+0x2d4>)
 80070bc:	fba3 2302 	umull	r2, r3, r3, r2
 80070c0:	095b      	lsrs	r3, r3, #5
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80070c8:	441c      	add	r4, r3
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80070d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	1891      	adds	r1, r2, r2
 80070e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80070e4:	415b      	adcs	r3, r3
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80070e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80070ec:	4641      	mov	r1, r8
 80070ee:	1851      	adds	r1, r2, r1
 80070f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80070f2:	4649      	mov	r1, r9
 80070f4:	414b      	adcs	r3, r1
 80070f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007104:	4659      	mov	r1, fp
 8007106:	00cb      	lsls	r3, r1, #3
 8007108:	4651      	mov	r1, sl
 800710a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710e:	4651      	mov	r1, sl
 8007110:	00ca      	lsls	r2, r1, #3
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	4603      	mov	r3, r0
 8007118:	4642      	mov	r2, r8
 800711a:	189b      	adds	r3, r3, r2
 800711c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007120:	464b      	mov	r3, r9
 8007122:	460a      	mov	r2, r1
 8007124:	eb42 0303 	adc.w	r3, r2, r3
 8007128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007138:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800713c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007140:	460b      	mov	r3, r1
 8007142:	18db      	adds	r3, r3, r3
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007146:	4613      	mov	r3, r2
 8007148:	eb42 0303 	adc.w	r3, r2, r3
 800714c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800714e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007152:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007156:	f7f9 f893 	bl	8000280 <__aeabi_uldivmod>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <UART_SetConfig+0x2d4>)
 8007160:	fba3 1302 	umull	r1, r3, r3, r2
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	2164      	movs	r1, #100	@ 0x64
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	3332      	adds	r3, #50	@ 0x32
 8007172:	4a08      	ldr	r2, [pc, #32]	@ (8007194 <UART_SetConfig+0x2d4>)
 8007174:	fba2 2303 	umull	r2, r3, r2, r3
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	f003 0207 	and.w	r2, r3, #7
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4422      	add	r2, r4
 8007186:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007188:	e106      	b.n	8007398 <UART_SetConfig+0x4d8>
 800718a:	bf00      	nop
 800718c:	40011000 	.word	0x40011000
 8007190:	40011400 	.word	0x40011400
 8007194:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007198:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800719c:	2200      	movs	r2, #0
 800719e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80071a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80071a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80071aa:	4642      	mov	r2, r8
 80071ac:	464b      	mov	r3, r9
 80071ae:	1891      	adds	r1, r2, r2
 80071b0:	6239      	str	r1, [r7, #32]
 80071b2:	415b      	adcs	r3, r3
 80071b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80071b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071ba:	4641      	mov	r1, r8
 80071bc:	1854      	adds	r4, r2, r1
 80071be:	4649      	mov	r1, r9
 80071c0:	eb43 0501 	adc.w	r5, r3, r1
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	00eb      	lsls	r3, r5, #3
 80071ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071d2:	00e2      	lsls	r2, r4, #3
 80071d4:	4614      	mov	r4, r2
 80071d6:	461d      	mov	r5, r3
 80071d8:	4643      	mov	r3, r8
 80071da:	18e3      	adds	r3, r4, r3
 80071dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071e0:	464b      	mov	r3, r9
 80071e2:	eb45 0303 	adc.w	r3, r5, r3
 80071e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80071fa:	f04f 0200 	mov.w	r2, #0
 80071fe:	f04f 0300 	mov.w	r3, #0
 8007202:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007206:	4629      	mov	r1, r5
 8007208:	008b      	lsls	r3, r1, #2
 800720a:	4621      	mov	r1, r4
 800720c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007210:	4621      	mov	r1, r4
 8007212:	008a      	lsls	r2, r1, #2
 8007214:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007218:	f7f9 f832 	bl	8000280 <__aeabi_uldivmod>
 800721c:	4602      	mov	r2, r0
 800721e:	460b      	mov	r3, r1
 8007220:	4b60      	ldr	r3, [pc, #384]	@ (80073a4 <UART_SetConfig+0x4e4>)
 8007222:	fba3 2302 	umull	r2, r3, r3, r2
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	011c      	lsls	r4, r3, #4
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007234:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007238:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	61b9      	str	r1, [r7, #24]
 8007244:	415b      	adcs	r3, r3
 8007246:	61fb      	str	r3, [r7, #28]
 8007248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800724c:	4641      	mov	r1, r8
 800724e:	1851      	adds	r1, r2, r1
 8007250:	6139      	str	r1, [r7, #16]
 8007252:	4649      	mov	r1, r9
 8007254:	414b      	adcs	r3, r1
 8007256:	617b      	str	r3, [r7, #20]
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007264:	4659      	mov	r1, fp
 8007266:	00cb      	lsls	r3, r1, #3
 8007268:	4651      	mov	r1, sl
 800726a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726e:	4651      	mov	r1, sl
 8007270:	00ca      	lsls	r2, r1, #3
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	4603      	mov	r3, r0
 8007278:	4642      	mov	r2, r8
 800727a:	189b      	adds	r3, r3, r2
 800727c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007280:	464b      	mov	r3, r9
 8007282:	460a      	mov	r2, r1
 8007284:	eb42 0303 	adc.w	r3, r2, r3
 8007288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007296:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007298:	f04f 0200 	mov.w	r2, #0
 800729c:	f04f 0300 	mov.w	r3, #0
 80072a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80072a4:	4649      	mov	r1, r9
 80072a6:	008b      	lsls	r3, r1, #2
 80072a8:	4641      	mov	r1, r8
 80072aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ae:	4641      	mov	r1, r8
 80072b0:	008a      	lsls	r2, r1, #2
 80072b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80072b6:	f7f8 ffe3 	bl	8000280 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	4b38      	ldr	r3, [pc, #224]	@ (80073a4 <UART_SetConfig+0x4e4>)
 80072c2:	fba3 2301 	umull	r2, r3, r3, r1
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	2264      	movs	r2, #100	@ 0x64
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	1acb      	subs	r3, r1, r3
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	3332      	adds	r3, #50	@ 0x32
 80072d4:	4a33      	ldr	r2, [pc, #204]	@ (80073a4 <UART_SetConfig+0x4e4>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	095b      	lsrs	r3, r3, #5
 80072dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072e0:	441c      	add	r4, r3
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80072ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80072ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80072f0:	4642      	mov	r2, r8
 80072f2:	464b      	mov	r3, r9
 80072f4:	1891      	adds	r1, r2, r2
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	415b      	adcs	r3, r3
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007300:	4641      	mov	r1, r8
 8007302:	1851      	adds	r1, r2, r1
 8007304:	6039      	str	r1, [r7, #0]
 8007306:	4649      	mov	r1, r9
 8007308:	414b      	adcs	r3, r1
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007318:	4659      	mov	r1, fp
 800731a:	00cb      	lsls	r3, r1, #3
 800731c:	4651      	mov	r1, sl
 800731e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007322:	4651      	mov	r1, sl
 8007324:	00ca      	lsls	r2, r1, #3
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	4603      	mov	r3, r0
 800732c:	4642      	mov	r2, r8
 800732e:	189b      	adds	r3, r3, r2
 8007330:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007332:	464b      	mov	r3, r9
 8007334:	460a      	mov	r2, r1
 8007336:	eb42 0303 	adc.w	r3, r2, r3
 800733a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	663b      	str	r3, [r7, #96]	@ 0x60
 8007346:	667a      	str	r2, [r7, #100]	@ 0x64
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007354:	4649      	mov	r1, r9
 8007356:	008b      	lsls	r3, r1, #2
 8007358:	4641      	mov	r1, r8
 800735a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800735e:	4641      	mov	r1, r8
 8007360:	008a      	lsls	r2, r1, #2
 8007362:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007366:	f7f8 ff8b 	bl	8000280 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4b0d      	ldr	r3, [pc, #52]	@ (80073a4 <UART_SetConfig+0x4e4>)
 8007370:	fba3 1302 	umull	r1, r3, r3, r2
 8007374:	095b      	lsrs	r3, r3, #5
 8007376:	2164      	movs	r1, #100	@ 0x64
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	011b      	lsls	r3, r3, #4
 8007380:	3332      	adds	r3, #50	@ 0x32
 8007382:	4a08      	ldr	r2, [pc, #32]	@ (80073a4 <UART_SetConfig+0x4e4>)
 8007384:	fba2 2303 	umull	r2, r3, r2, r3
 8007388:	095b      	lsrs	r3, r3, #5
 800738a:	f003 020f 	and.w	r2, r3, #15
 800738e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4422      	add	r2, r4
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800739e:	46bd      	mov	sp, r7
 80073a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073a4:	51eb851f 	.word	0x51eb851f

080073a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a8:	b084      	sub	sp, #16
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	f107 001c 	add.w	r0, r7, #28
 80073b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d123      	bne.n	800740a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80073d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d105      	bne.n	80073fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f9dc 	bl	80077bc <USB_CoreReset>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	e01b      	b.n	8007442 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68db      	ldr	r3, [r3, #12]
 800740e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f9d0 	bl	80077bc <USB_CoreReset>
 800741c:	4603      	mov	r3, r0
 800741e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007420:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	639a      	str	r2, [r3, #56]	@ 0x38
 8007434:	e005      	b.n	8007442 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007442:	7fbb      	ldrb	r3, [r7, #30]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d10b      	bne.n	8007460 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f043 0206 	orr.w	r2, r3, #6
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f043 0220 	orr.w	r2, r3, #32
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800746c:	b004      	add	sp, #16
 800746e:	4770      	bx	lr

08007470 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f043 0201 	orr.w	r2, r3, #1
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f023 0201 	bic.w	r2, r3, #1
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d115      	bne.n	8007502 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80074e2:	200a      	movs	r0, #10
 80074e4:	f7fb fa6e 	bl	80029c4 <HAL_Delay>
      ms += 10U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	330a      	adds	r3, #10
 80074ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f956 	bl	80077a0 <USB_GetMode>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d01e      	beq.n	8007538 <USB_SetCurrentMode+0x84>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80074fe:	d9f0      	bls.n	80074e2 <USB_SetCurrentMode+0x2e>
 8007500:	e01a      	b.n	8007538 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007502:	78fb      	ldrb	r3, [r7, #3]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d115      	bne.n	8007534 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007514:	200a      	movs	r0, #10
 8007516:	f7fb fa55 	bl	80029c4 <HAL_Delay>
      ms += 10U;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	330a      	adds	r3, #10
 800751e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 f93d 	bl	80077a0 <USB_GetMode>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <USB_SetCurrentMode+0x84>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007530:	d9f0      	bls.n	8007514 <USB_SetCurrentMode+0x60>
 8007532:	e001      	b.n	8007538 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	e005      	b.n	8007544 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2bc8      	cmp	r3, #200	@ 0xc8
 800753c:	d101      	bne.n	8007542 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e000      	b.n	8007544 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007566:	d901      	bls.n	800756c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e01b      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	daf2      	bge.n	800755a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	019b      	lsls	r3, r3, #6
 800757c:	f043 0220 	orr.w	r2, r3, #32
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007590:	d901      	bls.n	8007596 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e006      	b.n	80075a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b20      	cmp	r3, #32
 80075a0:	d0f0      	beq.n	8007584 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	3301      	adds	r3, #1
 80075c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075c8:	d901      	bls.n	80075ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e018      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	daf2      	bge.n	80075bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2210      	movs	r2, #16
 80075de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ec:	d901      	bls.n	80075f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e006      	b.n	8007600 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b10      	cmp	r3, #16
 80075fc:	d0f0      	beq.n	80075e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800760c:	b480      	push	{r7}
 800760e:	b089      	sub	sp, #36	@ 0x24
 8007610:	af00      	add	r7, sp, #0
 8007612:	60f8      	str	r0, [r7, #12]
 8007614:	60b9      	str	r1, [r7, #8]
 8007616:	4611      	mov	r1, r2
 8007618:	461a      	mov	r2, r3
 800761a:	460b      	mov	r3, r1
 800761c:	71fb      	strb	r3, [r7, #7]
 800761e:	4613      	mov	r3, r2
 8007620:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800762a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d123      	bne.n	800767a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007632:	88bb      	ldrh	r3, [r7, #4]
 8007634:	3303      	adds	r3, #3
 8007636:	089b      	lsrs	r3, r3, #2
 8007638:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800763a:	2300      	movs	r3, #0
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	e018      	b.n	8007672 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	031a      	lsls	r2, r3, #12
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	4413      	add	r3, r2
 8007648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800764c:	461a      	mov	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	3301      	adds	r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	3301      	adds	r3, #1
 800765e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	3301      	adds	r3, #1
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	69ba      	ldr	r2, [r7, #24]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	429a      	cmp	r2, r3
 8007678:	d3e2      	bcc.n	8007640 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3724      	adds	r7, #36	@ 0x24
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007688:	b480      	push	{r7}
 800768a:	b08b      	sub	sp, #44	@ 0x2c
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	4613      	mov	r3, r2
 8007694:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800769e:	88fb      	ldrh	r3, [r7, #6]
 80076a0:	089b      	lsrs	r3, r3, #2
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076a6:	88fb      	ldrh	r3, [r7, #6]
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	623b      	str	r3, [r7, #32]
 80076b2:	e014      	b.n	80076de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	601a      	str	r2, [r3, #0]
    pDest++;
 80076c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c2:	3301      	adds	r3, #1
 80076c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c8:	3301      	adds	r3, #1
 80076ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	3301      	adds	r3, #1
 80076d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80076d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d4:	3301      	adds	r3, #1
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	3301      	adds	r3, #1
 80076dc:	623b      	str	r3, [r7, #32]
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3e6      	bcc.n	80076b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80076e6:	8bfb      	ldrh	r3, [r7, #30]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01e      	beq.n	800772a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f6:	461a      	mov	r2, r3
 80076f8:	f107 0310 	add.w	r3, r7, #16
 80076fc:	6812      	ldr	r2, [r2, #0]
 80076fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	b2db      	uxtb	r3, r3
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
 800770c:	b2da      	uxtb	r2, r3
 800770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007710:	701a      	strb	r2, [r3, #0]
      i++;
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	3301      	adds	r3, #1
 8007716:	623b      	str	r3, [r7, #32]
      pDest++;
 8007718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800771a:	3301      	adds	r3, #1
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800771e:	8bfb      	ldrh	r3, [r7, #30]
 8007720:	3b01      	subs	r3, #1
 8007722:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007724:	8bfb      	ldrh	r3, [r7, #30]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1ea      	bne.n	8007700 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800772a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800772c:	4618      	mov	r0, r3
 800772e:	372c      	adds	r7, #44	@ 0x2c
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4013      	ands	r3, r2
 800774e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007750:	68fb      	ldr	r3, [r7, #12]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3714      	adds	r7, #20
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800775e:	b480      	push	{r7}
 8007760:	b085      	sub	sp, #20
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	460b      	mov	r3, r1
 8007768:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800776e:	78fb      	ldrb	r3, [r7, #3]
 8007770:	015a      	lsls	r2, r3, #5
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	4413      	add	r3, r2
 8007776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4413      	add	r3, r2
 8007786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	4013      	ands	r3, r2
 8007790:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007792:	68bb      	ldr	r3, [r7, #8]
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	f003 0301 	and.w	r3, r3, #1
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077c4:	2300      	movs	r3, #0
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077d4:	d901      	bls.n	80077da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e01b      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	daf2      	bge.n	80077c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	f043 0201 	orr.w	r2, r3, #1
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3301      	adds	r3, #1
 80077f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077fe:	d901      	bls.n	8007804 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e006      	b.n	8007812 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d0f0      	beq.n	80077f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
	...

08007820 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007820:	b084      	sub	sp, #16
 8007822:	b580      	push	{r7, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800782e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007840:	461a      	mov	r2, r3
 8007842:	2300      	movs	r3, #0
 8007844:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007856:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	d119      	bne.n	80078aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800787a:	2b01      	cmp	r3, #1
 800787c:	d10a      	bne.n	8007894 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800788c:	f043 0304 	orr.w	r3, r3, #4
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e014      	b.n	80078be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078a2:	f023 0304 	bic.w	r3, r3, #4
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	e009      	b.n	80078be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078b8:	f023 0304 	bic.w	r3, r3, #4
 80078bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078be:	2110      	movs	r1, #16
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7ff fe43 	bl	800754c <USB_FlushTxFifo>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff fe6d 	bl	80075b0 <USB_FlushRxFifo>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80078e0:	2300      	movs	r3, #0
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	e015      	b.n	8007912 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f2:	461a      	mov	r2, r3
 80078f4:	f04f 33ff 	mov.w	r3, #4294967295
 80078f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007906:	461a      	mov	r2, r3
 8007908:	2300      	movs	r3, #0
 800790a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	3301      	adds	r3, #1
 8007910:	613b      	str	r3, [r7, #16]
 8007912:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007916:	461a      	mov	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	4293      	cmp	r3, r2
 800791c:	d3e3      	bcc.n	80078e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f04f 32ff 	mov.w	r2, #4294967295
 800792a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a18      	ldr	r2, [pc, #96]	@ (8007990 <USB_HostInit+0x170>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d10b      	bne.n	800794c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800793a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a15      	ldr	r2, [pc, #84]	@ (8007994 <USB_HostInit+0x174>)
 8007940:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a14      	ldr	r2, [pc, #80]	@ (8007998 <USB_HostInit+0x178>)
 8007946:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800794a:	e009      	b.n	8007960 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2280      	movs	r2, #128	@ 0x80
 8007950:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a11      	ldr	r2, [pc, #68]	@ (800799c <USB_HostInit+0x17c>)
 8007956:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a11      	ldr	r2, [pc, #68]	@ (80079a0 <USB_HostInit+0x180>)
 800795c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007960:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007964:	2b00      	cmp	r3, #0
 8007966:	d105      	bne.n	8007974 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	f043 0210 	orr.w	r2, r3, #16
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	4b0a      	ldr	r3, [pc, #40]	@ (80079a4 <USB_HostInit+0x184>)
 800797a:	4313      	orrs	r3, r2
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800798c:	b004      	add	sp, #16
 800798e:	4770      	bx	lr
 8007990:	40040000 	.word	0x40040000
 8007994:	01000200 	.word	0x01000200
 8007998:	00e00300 	.word	0x00e00300
 800799c:	00600080 	.word	0x00600080
 80079a0:	004000e0 	.word	0x004000e0
 80079a4:	a3200008 	.word	0xa3200008

080079a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	78fb      	ldrb	r3, [r7, #3]
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	68f9      	ldr	r1, [r7, #12]
 80079dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80079e0:	4313      	orrs	r3, r2
 80079e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d107      	bne.n	80079fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079f0:	461a      	mov	r2, r3
 80079f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80079f6:	6053      	str	r3, [r2, #4]
 80079f8:	e00c      	b.n	8007a14 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	2b02      	cmp	r3, #2
 80079fe:	d107      	bne.n	8007a10 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a06:	461a      	mov	r2, r3
 8007a08:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007a0c:	6053      	str	r3, [r2, #4]
 8007a0e:	e001      	b.n	8007a14 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b084      	sub	sp, #16
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a42:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a50:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007a52:	2064      	movs	r0, #100	@ 0x64
 8007a54:	f7fa ffb6 	bl	80029c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a64:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007a66:	200a      	movs	r0, #10
 8007a68:	f7fa ffac 	bl	80029c4 <HAL_Delay>

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
 8007a7e:	460b      	mov	r3, r1
 8007a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007a9a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d109      	bne.n	8007aba <USB_DriveVbus+0x44>
 8007aa6:	78fb      	ldrb	r3, [r7, #3]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d106      	bne.n	8007aba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ab8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ac4:	d109      	bne.n	8007ada <USB_DriveVbus+0x64>
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ad4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ad8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	0c5b      	lsrs	r3, r3, #17
 8007b06:	f003 0303 	and.w	r3, r3, #3
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	b29b      	uxth	r3, r3
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b088      	sub	sp, #32
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	4608      	mov	r0, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	70fb      	strb	r3, [r7, #3]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70bb      	strb	r3, [r7, #2]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b5a:	78fb      	ldrb	r3, [r7, #3]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b66:	461a      	mov	r2, r3
 8007b68:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007b6e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d87c      	bhi.n	8007c70 <USB_HC_Init+0x138>
 8007b76:	a201      	add	r2, pc, #4	@ (adr r2, 8007b7c <USB_HC_Init+0x44>)
 8007b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7c:	08007b8d 	.word	0x08007b8d
 8007b80:	08007c33 	.word	0x08007c33
 8007b84:	08007b8d 	.word	0x08007b8d
 8007b88:	08007bf5 	.word	0x08007bf5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	015a      	lsls	r2, r3, #5
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007b9e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007ba0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da10      	bge.n	8007bca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007ba8:	78fb      	ldrb	r3, [r7, #3]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	0151      	lsls	r1, r2, #5
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	440a      	add	r2, r1
 8007bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bc6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007bc8:	e055      	b.n	8007c76 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a6f      	ldr	r2, [pc, #444]	@ (8007d8c <USB_HC_Init+0x254>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d151      	bne.n	8007c76 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007bd2:	78fb      	ldrb	r3, [r7, #3]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	693a      	ldr	r2, [r7, #16]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007bf0:	60d3      	str	r3, [r2, #12]
      break;
 8007bf2:	e040      	b.n	8007c76 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c00:	461a      	mov	r2, r3
 8007c02:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007c06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	da34      	bge.n	8007c7a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	78fa      	ldrb	r2, [r7, #3]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c2e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007c30:	e023      	b.n	8007c7a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	015a      	lsls	r2, r3, #5
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	4413      	add	r3, r2
 8007c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f240 2325 	movw	r3, #549	@ 0x225
 8007c44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da17      	bge.n	8007c7e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c68:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007c6c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007c6e:	e006      	b.n	8007c7e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	77fb      	strb	r3, [r7, #31]
      break;
 8007c74:	e004      	b.n	8007c80 <USB_HC_Init+0x148>
      break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <USB_HC_Init+0x148>
      break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <USB_HC_Init+0x148>
      break;
 8007c7e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	2300      	movs	r3, #0
 8007c90:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007c92:	78fb      	ldrb	r3, [r7, #3]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	78fa      	ldrb	r2, [r7, #3]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cb8:	699a      	ldr	r2, [r3, #24]
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	f003 030f 	and.w	r3, r3, #15
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cc6:	6939      	ldr	r1, [r7, #16]
 8007cc8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007cdc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	da03      	bge.n	8007cec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	e001      	b.n	8007cf0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff fef9 	bl	8007ae8 <USB_GetHostSpeed>
 8007cf6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d106      	bne.n	8007d0e <USB_HC_Init+0x1d6>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d003      	beq.n	8007d0e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d06:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e001      	b.n	8007d12 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d12:	787b      	ldrb	r3, [r7, #1]
 8007d14:	059b      	lsls	r3, r3, #22
 8007d16:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d1a:	78bb      	ldrb	r3, [r7, #2]
 8007d1c:	02db      	lsls	r3, r3, #11
 8007d1e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d22:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d24:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d28:	049b      	lsls	r3, r3, #18
 8007d2a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007d2e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007d30:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007d36:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d40:	78fa      	ldrb	r2, [r7, #3]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007d4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d50:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007d52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d56:	2b03      	cmp	r3, #3
 8007d58:	d003      	beq.n	8007d62 <USB_HC_Init+0x22a>
 8007d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10f      	bne.n	8007d82 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d7c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d80:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3720      	adds	r7, #32
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	40040000 	.word	0x40040000

08007d90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08c      	sub	sp, #48	@ 0x30
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	785b      	ldrb	r3, [r3, #1]
 8007da6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007da8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007dac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f28 <USB_HC_StartXfer+0x198>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d12f      	bne.n	8007e16 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007db6:	79fb      	ldrb	r3, [r7, #7]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d11c      	bne.n	8007df6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	7c9b      	ldrb	r3, [r3, #18]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <USB_HC_StartXfer+0x3c>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	7c9b      	ldrb	r3, [r3, #18]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d124      	bne.n	8007e16 <USB_HC_StartXfer+0x86>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	799b      	ldrb	r3, [r3, #6]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d120      	bne.n	8007e16 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	69fa      	ldr	r2, [r7, #28]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	6a3a      	ldr	r2, [r7, #32]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007df2:	60d3      	str	r3, [r2, #12]
 8007df4:	e00f      	b.n	8007e16 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	791b      	ldrb	r3, [r3, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10b      	bne.n	8007e16 <USB_HC_StartXfer+0x86>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	795b      	ldrb	r3, [r3, #5]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d107      	bne.n	8007e16 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	785b      	ldrb	r3, [r3, #1]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f000 fb6b 	bl	80084e8 <USB_DoPing>
        return HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	e232      	b.n	800827c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	799b      	ldrb	r3, [r3, #6]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d158      	bne.n	8007ed0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007e2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	8a92      	ldrh	r2, [r2, #20]
 8007e30:	fb03 f202 	mul.w	r2, r3, r2
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	61da      	str	r2, [r3, #28]
 8007e38:	e07c      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	7c9b      	ldrb	r3, [r3, #18]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d130      	bne.n	8007ea4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	2bbc      	cmp	r3, #188	@ 0xbc
 8007e48:	d918      	bls.n	8007e7c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	8a9b      	ldrh	r3, [r3, #20]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	69da      	ldr	r2, [r3, #28]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	d003      	beq.n	8007e6c <USB_HC_StartXfer+0xdc>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d103      	bne.n	8007e74 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	60da      	str	r2, [r3, #12]
 8007e72:	e05f      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2201      	movs	r2, #1
 8007e78:	60da      	str	r2, [r3, #12]
 8007e7a:	e05b      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d007      	beq.n	8007e9c <USB_HC_StartXfer+0x10c>
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d003      	beq.n	8007e9c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2204      	movs	r2, #4
 8007e98:	60da      	str	r2, [r3, #12]
 8007e9a:	e04b      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	e047      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10d      	bne.n	8007ec6 <USB_HC_StartXfer+0x136>
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	8a92      	ldrh	r2, [r2, #20]
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d907      	bls.n	8007ec6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	8a92      	ldrh	r2, [r2, #20]
 8007ebc:	fb03 f202 	mul.w	r2, r3, r2
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	61da      	str	r2, [r3, #28]
 8007ec4:	e036      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6a1a      	ldr	r2, [r3, #32]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	61da      	str	r2, [r3, #28]
 8007ece:	e031      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d018      	beq.n	8007f0a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	8a92      	ldrh	r2, [r2, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	8a92      	ldrh	r2, [r2, #20]
 8007ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007eee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007ef0:	8b7b      	ldrh	r3, [r7, #26]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d90b      	bls.n	8007f0e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007ef6:	8b7b      	ldrh	r3, [r7, #26]
 8007ef8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007efa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	8a92      	ldrh	r2, [r2, #20]
 8007f00:	fb03 f202 	mul.w	r2, r3, r2
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	61da      	str	r2, [r3, #28]
 8007f08:	e001      	b.n	8007f0e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	78db      	ldrb	r3, [r3, #3]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	8a92      	ldrh	r2, [r2, #20]
 8007f1c:	fb03 f202 	mul.w	r2, r3, r2
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	61da      	str	r2, [r3, #28]
 8007f24:	e006      	b.n	8007f34 <USB_HC_StartXfer+0x1a4>
 8007f26:	bf00      	nop
 8007f28:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6a1a      	ldr	r2, [r3, #32]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f3e:	04d9      	lsls	r1, r3, #19
 8007f40:	4ba3      	ldr	r3, [pc, #652]	@ (80081d0 <USB_HC_StartXfer+0x440>)
 8007f42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7d9b      	ldrb	r3, [r3, #22]
 8007f4a:	075b      	lsls	r3, r3, #29
 8007f4c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	0148      	lsls	r0, r1, #5
 8007f54:	6a39      	ldr	r1, [r7, #32]
 8007f56:	4401      	add	r1, r0
 8007f58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007f5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007f5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6999      	ldr	r1, [r3, #24]
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	6a3b      	ldr	r3, [r7, #32]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f76:	460a      	mov	r2, r1
 8007f78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bf0c      	ite	eq
 8007f8a:	2301      	moveq	r3, #1
 8007f8c:	2300      	movne	r3, #0
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	69fa      	ldr	r2, [r7, #28]
 8007fa2:	0151      	lsls	r1, r2, #5
 8007fa4:	6a3a      	ldr	r2, [r7, #32]
 8007fa6:	440a      	add	r2, r1
 8007fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	7e7b      	ldrb	r3, [r7, #25]
 8007fc2:	075b      	lsls	r3, r3, #29
 8007fc4:	69f9      	ldr	r1, [r7, #28]
 8007fc6:	0148      	lsls	r0, r1, #5
 8007fc8:	6a39      	ldr	r1, [r7, #32]
 8007fca:	4401      	add	r1, r0
 8007fcc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	799b      	ldrb	r3, [r3, #6]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	f040 80c3 	bne.w	8008164 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	7c5b      	ldrb	r3, [r3, #17]
 8007fe2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	69fa      	ldr	r2, [r7, #28]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	6a3a      	ldr	r2, [r7, #32]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007ff6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007ffa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	6a3b      	ldr	r3, [r7, #32]
 8008002:	4413      	add	r3, r2
 8008004:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	69fa      	ldr	r2, [r7, #28]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	6a3a      	ldr	r2, [r7, #32]
 8008010:	440a      	add	r2, r1
 8008012:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008016:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800801a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	79db      	ldrb	r3, [r3, #7]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d123      	bne.n	800806c <USB_HC_StartXfer+0x2dc>
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	78db      	ldrb	r3, [r3, #3]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11f      	bne.n	800806c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	4413      	add	r3, r2
 8008034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	69fa      	ldr	r2, [r7, #28]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	6a3a      	ldr	r2, [r7, #32]
 8008040:	440a      	add	r2, r1
 8008042:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008046:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800804a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	4413      	add	r3, r2
 8008054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008058:	68db      	ldr	r3, [r3, #12]
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	6a3a      	ldr	r2, [r7, #32]
 8008060:	440a      	add	r2, r1
 8008062:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800806a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	7c9b      	ldrb	r3, [r3, #18]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d003      	beq.n	800807c <USB_HC_StartXfer+0x2ec>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	7c9b      	ldrb	r3, [r3, #18]
 8008078:	2b03      	cmp	r3, #3
 800807a:	d117      	bne.n	80080ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008080:	2b01      	cmp	r3, #1
 8008082:	d113      	bne.n	80080ac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	78db      	ldrb	r3, [r3, #3]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d10f      	bne.n	80080ac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	6a3b      	ldr	r3, [r7, #32]
 8008092:	4413      	add	r3, r2
 8008094:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	69fa      	ldr	r2, [r7, #28]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	6a3a      	ldr	r2, [r7, #32]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080aa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	7c9b      	ldrb	r3, [r3, #18]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d162      	bne.n	800817a <USB_HC_StartXfer+0x3ea>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	78db      	ldrb	r3, [r3, #3]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d15e      	bne.n	800817a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d858      	bhi.n	8008178 <USB_HC_StartXfer+0x3e8>
 80080c6:	a201      	add	r2, pc, #4	@ (adr r2, 80080cc <USB_HC_StartXfer+0x33c>)
 80080c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080ff 	.word	0x080080ff
 80080d4:	08008121 	.word	0x08008121
 80080d8:	08008143 	.word	0x08008143
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	0151      	lsls	r1, r2, #5
 80080ee:	6a3a      	ldr	r2, [r7, #32]
 80080f0:	440a      	add	r2, r1
 80080f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080fa:	6053      	str	r3, [r2, #4]
          break;
 80080fc:	e03d      	b.n	800817a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	4413      	add	r3, r2
 8008106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	69fa      	ldr	r2, [r7, #28]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	6a3a      	ldr	r2, [r7, #32]
 8008112:	440a      	add	r2, r1
 8008114:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008118:	f043 030e 	orr.w	r3, r3, #14
 800811c:	6053      	str	r3, [r2, #4]
          break;
 800811e:	e02c      	b.n	800817a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	6a3b      	ldr	r3, [r7, #32]
 8008126:	4413      	add	r3, r2
 8008128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	69fa      	ldr	r2, [r7, #28]
 8008130:	0151      	lsls	r1, r2, #5
 8008132:	6a3a      	ldr	r2, [r7, #32]
 8008134:	440a      	add	r2, r1
 8008136:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800813a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800813e:	6053      	str	r3, [r2, #4]
          break;
 8008140:	e01b      	b.n	800817a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	015a      	lsls	r2, r3, #5
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	4413      	add	r3, r2
 800814a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	0151      	lsls	r1, r2, #5
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	440a      	add	r2, r1
 8008158:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800815c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008160:	6053      	str	r3, [r2, #4]
          break;
 8008162:	e00a      	b.n	800817a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	4413      	add	r3, r2
 800816c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008170:	461a      	mov	r2, r3
 8008172:	2300      	movs	r3, #0
 8008174:	6053      	str	r3, [r2, #4]
 8008176:	e000      	b.n	800817a <USB_HC_StartXfer+0x3ea>
          break;
 8008178:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008190:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	78db      	ldrb	r3, [r3, #3]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d004      	beq.n	80081a4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081a0:	613b      	str	r3, [r7, #16]
 80081a2:	e003      	b.n	80081ac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081aa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081b2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c0:	461a      	mov	r2, r3
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80081c6:	79fb      	ldrb	r3, [r7, #7]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	e055      	b.n	800827c <USB_HC_StartXfer+0x4ec>
 80081d0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	78db      	ldrb	r3, [r3, #3]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d14e      	bne.n	800827a <USB_HC_StartXfer+0x4ea>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d04a      	beq.n	800827a <USB_HC_StartXfer+0x4ea>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	79db      	ldrb	r3, [r3, #7]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d146      	bne.n	800827a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	7c9b      	ldrb	r3, [r3, #18]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d831      	bhi.n	8008258 <USB_HC_StartXfer+0x4c8>
 80081f4:	a201      	add	r2, pc, #4	@ (adr r2, 80081fc <USB_HC_StartXfer+0x46c>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	0800820d 	.word	0x0800820d
 8008200:	08008231 	.word	0x08008231
 8008204:	0800820d 	.word	0x0800820d
 8008208:	08008231 	.word	0x08008231
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	6a1b      	ldr	r3, [r3, #32]
 8008210:	3303      	adds	r3, #3
 8008212:	089b      	lsrs	r3, r3, #2
 8008214:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008216:	8afa      	ldrh	r2, [r7, #22]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821c:	b29b      	uxth	r3, r3
 800821e:	429a      	cmp	r2, r3
 8008220:	d91c      	bls.n	800825c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	f043 0220 	orr.w	r2, r3, #32
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	619a      	str	r2, [r3, #24]
        }
        break;
 800822e:	e015      	b.n	800825c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	3303      	adds	r3, #3
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800823a:	8afa      	ldrh	r2, [r7, #22]
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	b29b      	uxth	r3, r3
 8008246:	429a      	cmp	r2, r3
 8008248:	d90a      	bls.n	8008260 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	619a      	str	r2, [r3, #24]
        }
        break;
 8008256:	e003      	b.n	8008260 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008258:	bf00      	nop
 800825a:	e002      	b.n	8008262 <USB_HC_StartXfer+0x4d2>
        break;
 800825c:	bf00      	nop
 800825e:	e000      	b.n	8008262 <USB_HC_StartXfer+0x4d2>
        break;
 8008260:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6999      	ldr	r1, [r3, #24]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	785a      	ldrb	r2, [r3, #1]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	b29b      	uxth	r3, r3
 8008270:	2000      	movs	r0, #0
 8008272:	9000      	str	r0, [sp, #0]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f7ff f9c9 	bl	800760c <USB_WritePacket>
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3728      	adds	r7, #40	@ 0x28
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	b29b      	uxth	r3, r3
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b089      	sub	sp, #36	@ 0x24
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	0c9b      	lsrs	r3, r3, #18
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	0fdb      	lsrs	r3, r3, #31
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	0fdb      	lsrs	r3, r3, #31
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f003 0320 	and.w	r3, r3, #32
 8008308:	2b20      	cmp	r3, #32
 800830a:	d10d      	bne.n	8008328 <USB_HC_Halt+0x82>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10a      	bne.n	8008328 <USB_HC_Halt+0x82>
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d005      	beq.n	8008324 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d002      	beq.n	8008324 <USB_HC_Halt+0x7e>
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d101      	bne.n	8008328 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	e0d8      	b.n	80084da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d002      	beq.n	8008334 <USB_HC_Halt+0x8e>
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d173      	bne.n	800841c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69ba      	ldr	r2, [r7, #24]
 8008344:	0151      	lsls	r1, r2, #5
 8008346:	69fa      	ldr	r2, [r7, #28]
 8008348:	440a      	add	r2, r1
 800834a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800834e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008352:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f003 0320 	and.w	r3, r3, #32
 800835c:	2b00      	cmp	r3, #0
 800835e:	d14a      	bne.n	80083f6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008364:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d133      	bne.n	80083d4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	69fa      	ldr	r2, [r7, #28]
 8008380:	440a      	add	r2, r1
 8008382:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008386:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800838a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	4413      	add	r3, r2
 8008394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69ba      	ldr	r2, [r7, #24]
 800839c:	0151      	lsls	r1, r2, #5
 800839e:	69fa      	ldr	r2, [r7, #28]
 80083a0:	440a      	add	r2, r1
 80083a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083aa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	3301      	adds	r3, #1
 80083b0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083b8:	d82e      	bhi.n	8008418 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083d0:	d0ec      	beq.n	80083ac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083d2:	e081      	b.n	80084d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	0151      	lsls	r1, r2, #5
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	440a      	add	r2, r1
 80083ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083f2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083f4:	e070      	b.n	80084d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008410:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008414:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008416:	e05f      	b.n	80084d8 <USB_HC_Halt+0x232>
            break;
 8008418:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800841a:	e05d      	b.n	80084d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	4413      	add	r3, r2
 8008424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	69fa      	ldr	r2, [r7, #28]
 8008430:	440a      	add	r2, r1
 8008432:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008436:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800843a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d133      	bne.n	80084b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	69ba      	ldr	r2, [r7, #24]
 800845c:	0151      	lsls	r1, r2, #5
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	440a      	add	r2, r1
 8008462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008466:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800846a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800846c:	69bb      	ldr	r3, [r7, #24]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008486:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800848a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	3301      	adds	r3, #1
 8008490:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008498:	d81d      	bhi.n	80084d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	015a      	lsls	r2, r3, #5
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	4413      	add	r3, r2
 80084a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084b0:	d0ec      	beq.n	800848c <USB_HC_Halt+0x1e6>
 80084b2:	e011      	b.n	80084d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	015a      	lsls	r2, r3, #5
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	4413      	add	r3, r2
 80084bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	69ba      	ldr	r2, [r7, #24]
 80084c4:	0151      	lsls	r1, r2, #5
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	440a      	add	r2, r1
 80084ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	e000      	b.n	80084d8 <USB_HC_Halt+0x232>
          break;
 80084d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3724      	adds	r7, #36	@ 0x24
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
	...

080084e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80084fc:	2301      	movs	r3, #1
 80084fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	04da      	lsls	r2, r3, #19
 8008504:	4b15      	ldr	r3, [pc, #84]	@ (800855c <USB_DoPing+0x74>)
 8008506:	4013      	ands	r3, r2
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	697a      	ldr	r2, [r7, #20]
 800850e:	440a      	add	r2, r1
 8008510:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008514:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008518:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	4413      	add	r3, r2
 8008522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008530:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008538:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	4413      	add	r3, r2
 8008542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008546:	461a      	mov	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	371c      	adds	r7, #28
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	1ff80000 	.word	0x1ff80000

08008560 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fe ff8c 	bl	8007492 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800857a:	2110      	movs	r1, #16
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fe ffe5 	bl	800754c <USB_FlushTxFifo>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff f80f 	bl	80075b0 <USB_FlushRxFifo>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800859c:	2300      	movs	r3, #0
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	e01f      	b.n	80085e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80085c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d6:	461a      	mov	r2, r3
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80085dc:	69bb      	ldr	r3, [r7, #24]
 80085de:	3301      	adds	r3, #1
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	2b0f      	cmp	r3, #15
 80085e6:	d9dc      	bls.n	80085a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80085e8:	2300      	movs	r3, #0
 80085ea:	61bb      	str	r3, [r7, #24]
 80085ec:	e034      	b.n	8008658 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	015a      	lsls	r2, r3, #5
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	4413      	add	r3, r2
 80085f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008604:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800860c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008614:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008622:	461a      	mov	r2, r3
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008634:	d80c      	bhi.n	8008650 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800864c:	d0ec      	beq.n	8008628 <USB_StopHost+0xc8>
 800864e:	e000      	b.n	8008652 <USB_StopHost+0xf2>
        break;
 8008650:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	3301      	adds	r3, #1
 8008656:	61bb      	str	r3, [r7, #24]
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	2b0f      	cmp	r3, #15
 800865c:	d9c7      	bls.n	80085ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008664:	461a      	mov	r2, r3
 8008666:	f04f 33ff 	mov.w	r3, #4294967295
 800866a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f04f 32ff 	mov.w	r2, #4294967295
 8008672:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f7fe fefb 	bl	8007470 <USB_EnableGlobalInt>

  return ret;
 800867a:	7ffb      	ldrb	r3, [r7, #31]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3720      	adds	r7, #32
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b089      	sub	sp, #36	@ 0x24
 8008688:	af04      	add	r7, sp, #16
 800868a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800868c:	2301      	movs	r3, #1
 800868e:	2202      	movs	r2, #2
 8008690:	2102      	movs	r1, #2
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fc85 	bl	8008fa2 <USBH_FindInterface>
 8008698:	4603      	mov	r3, r0
 800869a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800869c:	7bfb      	ldrb	r3, [r7, #15]
 800869e:	2bff      	cmp	r3, #255	@ 0xff
 80086a0:	d002      	beq.n	80086a8 <USBH_CDC_InterfaceInit+0x24>
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d901      	bls.n	80086ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086a8:	2302      	movs	r3, #2
 80086aa:	e13d      	b.n	8008928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	4619      	mov	r1, r3
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 fc5a 	bl	8008f6a <USBH_SelectInterface>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80086ba:	7bbb      	ldrb	r3, [r7, #14]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80086c0:	2302      	movs	r3, #2
 80086c2:	e131      	b.n	8008928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80086ca:	2050      	movs	r0, #80	@ 0x50
 80086cc:	f002 fb64 	bl	800ad98 <malloc>
 80086d0:	4603      	mov	r3, r0
 80086d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d101      	bne.n	80086e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80086e4:	2302      	movs	r3, #2
 80086e6:	e11f      	b.n	8008928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80086e8:	2250      	movs	r2, #80	@ 0x50
 80086ea:	2100      	movs	r1, #0
 80086ec:	68b8      	ldr	r0, [r7, #8]
 80086ee:	f002 fe3d 	bl	800b36c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	211a      	movs	r1, #26
 80086f8:	fb01 f303 	mul.w	r3, r1, r3
 80086fc:	4413      	add	r3, r2
 80086fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	b25b      	sxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	da15      	bge.n	8008736 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800870a:	7bfb      	ldrb	r3, [r7, #15]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	211a      	movs	r1, #26
 8008710:	fb01 f303 	mul.w	r3, r1, r3
 8008714:	4413      	add	r3, r2
 8008716:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008720:	7bfb      	ldrb	r3, [r7, #15]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	211a      	movs	r1, #26
 8008726:	fb01 f303 	mul.w	r3, r1, r3
 800872a:	4413      	add	r3, r2
 800872c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008730:	881a      	ldrh	r2, [r3, #0]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 ffbe 	bl	800a6be <USBH_AllocPipe>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	7819      	ldrb	r1, [r3, #0]
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	7858      	ldrb	r0, [r3, #1]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800875e:	68ba      	ldr	r2, [r7, #8]
 8008760:	8952      	ldrh	r2, [r2, #10]
 8008762:	9202      	str	r2, [sp, #8]
 8008764:	2203      	movs	r2, #3
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	4623      	mov	r3, r4
 800876c:	4602      	mov	r2, r0
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f001 ff76 	bl	800a660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2200      	movs	r2, #0
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f002 fa85 	bl	800ac8c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008782:	2300      	movs	r3, #0
 8008784:	2200      	movs	r2, #0
 8008786:	210a      	movs	r1, #10
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fc0a 	bl	8008fa2 <USBH_FindInterface>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2bff      	cmp	r3, #255	@ 0xff
 8008796:	d002      	beq.n	800879e <USBH_CDC_InterfaceInit+0x11a>
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d901      	bls.n	80087a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800879e:	2302      	movs	r3, #2
 80087a0:	e0c2      	b.n	8008928 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	211a      	movs	r1, #26
 80087a8:	fb01 f303 	mul.w	r3, r1, r3
 80087ac:	4413      	add	r3, r2
 80087ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	b25b      	sxtb	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da16      	bge.n	80087e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	211a      	movs	r1, #26
 80087c0:	fb01 f303 	mul.w	r3, r1, r3
 80087c4:	4413      	add	r3, r2
 80087c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087ca:	781a      	ldrb	r2, [r3, #0]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	211a      	movs	r1, #26
 80087d6:	fb01 f303 	mul.w	r3, r1, r3
 80087da:	4413      	add	r3, r2
 80087dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087e0:	881a      	ldrh	r2, [r3, #0]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	835a      	strh	r2, [r3, #26]
 80087e6:	e015      	b.n	8008814 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	211a      	movs	r1, #26
 80087ee:	fb01 f303 	mul.w	r3, r1, r3
 80087f2:	4413      	add	r3, r2
 80087f4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087fe:	7bfb      	ldrb	r3, [r7, #15]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	211a      	movs	r1, #26
 8008804:	fb01 f303 	mul.w	r3, r1, r3
 8008808:	4413      	add	r3, r2
 800880a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800880e:	881a      	ldrh	r2, [r3, #0]
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008814:	7bfb      	ldrb	r3, [r7, #15]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	211a      	movs	r1, #26
 800881a:	fb01 f303 	mul.w	r3, r1, r3
 800881e:	4413      	add	r3, r2
 8008820:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	b25b      	sxtb	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	da16      	bge.n	800885a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800882c:	7bfb      	ldrb	r3, [r7, #15]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	211a      	movs	r1, #26
 8008832:	fb01 f303 	mul.w	r3, r1, r3
 8008836:	4413      	add	r3, r2
 8008838:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800883c:	781a      	ldrb	r2, [r3, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	211a      	movs	r1, #26
 8008848:	fb01 f303 	mul.w	r3, r1, r3
 800884c:	4413      	add	r3, r2
 800884e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008852:	881a      	ldrh	r2, [r3, #0]
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	835a      	strh	r2, [r3, #26]
 8008858:	e015      	b.n	8008886 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	211a      	movs	r1, #26
 8008860:	fb01 f303 	mul.w	r3, r1, r3
 8008864:	4413      	add	r3, r2
 8008866:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800886a:	781a      	ldrb	r2, [r3, #0]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008870:	7bfb      	ldrb	r3, [r7, #15]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	211a      	movs	r1, #26
 8008876:	fb01 f303 	mul.w	r3, r1, r3
 800887a:	4413      	add	r3, r2
 800887c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008880:	881a      	ldrh	r2, [r3, #0]
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	7b9b      	ldrb	r3, [r3, #14]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 ff16 	bl	800a6be <USBH_AllocPipe>
 8008892:	4603      	mov	r3, r0
 8008894:	461a      	mov	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	7bdb      	ldrb	r3, [r3, #15]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 ff0c 	bl	800a6be <USBH_AllocPipe>
 80088a6:	4603      	mov	r3, r0
 80088a8:	461a      	mov	r2, r3
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	7b59      	ldrb	r1, [r3, #13]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	7b98      	ldrb	r0, [r3, #14]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	8b12      	ldrh	r2, [r2, #24]
 80088c6:	9202      	str	r2, [sp, #8]
 80088c8:	2202      	movs	r2, #2
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	4623      	mov	r3, r4
 80088d0:	4602      	mov	r2, r0
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f001 fec4 	bl	800a660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	7b19      	ldrb	r1, [r3, #12]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	7bd8      	ldrb	r0, [r3, #15]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	8b52      	ldrh	r2, [r2, #26]
 80088f0:	9202      	str	r2, [sp, #8]
 80088f2:	2202      	movs	r2, #2
 80088f4:	9201      	str	r2, [sp, #4]
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	4623      	mov	r3, r4
 80088fa:	4602      	mov	r2, r0
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f001 feaf 	bl	800a660 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	7b5b      	ldrb	r3, [r3, #13]
 800890e:	2200      	movs	r2, #0
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f002 f9ba 	bl	800ac8c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	7b1b      	ldrb	r3, [r3, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f002 f9b3 	bl	800ac8c <USBH_LL_SetToggle>

  return USBH_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3714      	adds	r7, #20
 800892c:	46bd      	mov	sp, r7
 800892e:	bd90      	pop	{r4, r7, pc}

08008930 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00e      	beq.n	8008968 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fea4 	bl	800a69e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	4619      	mov	r1, r3
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fecf 	bl	800a700 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2200      	movs	r2, #0
 8008966:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	7b1b      	ldrb	r3, [r3, #12]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00e      	beq.n	800898e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	7b1b      	ldrb	r3, [r3, #12]
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f001 fe91 	bl	800a69e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	7b1b      	ldrb	r3, [r3, #12]
 8008980:	4619      	mov	r1, r3
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 febc 	bl	800a700 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	7b5b      	ldrb	r3, [r3, #13]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	7b5b      	ldrb	r3, [r3, #13]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f001 fe7e 	bl	800a69e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	7b5b      	ldrb	r3, [r3, #13]
 80089a6:	4619      	mov	r1, r3
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f001 fea9 	bl	800a700 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 f9ed 	bl	800ada8 <free>
    phost->pActiveClass->pData = 0U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089d4:	2200      	movs	r2, #0
 80089d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3340      	adds	r3, #64	@ 0x40
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f8b1 	bl	8008b62 <GetLineCoding>
 8008a00:	4603      	mov	r3, r0
 8008a02:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a10:	2102      	movs	r1, #2
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008a16:	7afb      	ldrb	r3, [r7, #11]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a40:	2b04      	cmp	r3, #4
 8008a42:	d877      	bhi.n	8008b34 <USBH_CDC_Process+0x114>
 8008a44:	a201      	add	r2, pc, #4	@ (adr r2, 8008a4c <USBH_CDC_Process+0x2c>)
 8008a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4a:	bf00      	nop
 8008a4c:	08008a61 	.word	0x08008a61
 8008a50:	08008a67 	.word	0x08008a67
 8008a54:	08008a97 	.word	0x08008a97
 8008a58:	08008b0b 	.word	0x08008b0b
 8008a5c:	08008b19 	.word	0x08008b19
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
      break;
 8008a64:	e06d      	b.n	8008b42 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f897 	bl	8008ba0 <SetLineCoding>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2202      	movs	r2, #2
 8008a80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008a84:	e058      	b.n	8008b38 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d055      	beq.n	8008b38 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008a94:	e050      	b.n	8008b38 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	3340      	adds	r3, #64	@ 0x40
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f860 	bl	8008b62 <GetLineCoding>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008aa6:	7bbb      	ldrb	r3, [r7, #14]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d126      	bne.n	8008afa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008abe:	791b      	ldrb	r3, [r3, #4]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d13b      	bne.n	8008b3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ace:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d133      	bne.n	8008b3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ade:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d12b      	bne.n	8008b3c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d124      	bne.n	8008b3c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f958 	bl	8008da8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008af8:	e020      	b.n	8008b3c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d01d      	beq.n	8008b3c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2204      	movs	r2, #4
 8008b04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008b08:	e018      	b.n	8008b3c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f867 	bl	8008bde <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f8da 	bl	8008cca <CDC_ProcessReception>
      break;
 8008b16:	e014      	b.n	8008b42 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008b18:	2100      	movs	r1, #0
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 f81a 	bl	8009b54 <USBH_ClrFeature>
 8008b20:	4603      	mov	r3, r0
 8008b22:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10a      	bne.n	8008b40 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008b32:	e005      	b.n	8008b40 <USBH_CDC_Process+0x120>

    default:
      break;
 8008b34:	bf00      	nop
 8008b36:	e004      	b.n	8008b42 <USBH_CDC_Process+0x122>
      break;
 8008b38:	bf00      	nop
 8008b3a:	e002      	b.n	8008b42 <USBH_CDC_Process+0x122>
      break;
 8008b3c:	bf00      	nop
 8008b3e:	e000      	b.n	8008b42 <USBH_CDC_Process+0x122>
      break;
 8008b40:	bf00      	nop

  }

  return status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b082      	sub	sp, #8
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	22a1      	movs	r2, #161	@ 0xa1
 8008b70:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2221      	movs	r2, #33	@ 0x21
 8008b76:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2207      	movs	r2, #7
 8008b88:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2207      	movs	r2, #7
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fb14 	bl	800a1be <USBH_CtlReq>
 8008b96:	4603      	mov	r3, r0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2221      	movs	r2, #33	@ 0x21
 8008bae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2207      	movs	r2, #7
 8008bc6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	2207      	movs	r2, #7
 8008bcc:	4619      	mov	r1, r3
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f001 faf5 	bl	800a1be <USBH_CtlReq>
 8008bd4:	4603      	mov	r3, r0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3708      	adds	r7, #8
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008bde:	b580      	push	{r7, lr}
 8008be0:	b086      	sub	sp, #24
 8008be2:	af02      	add	r7, sp, #8
 8008be4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d002      	beq.n	8008c04 <CDC_ProcessTransmission+0x26>
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	d023      	beq.n	8008c4a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008c02:	e05e      	b.n	8008cc2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	8b12      	ldrh	r2, [r2, #24]
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d90b      	bls.n	8008c28 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	69d9      	ldr	r1, [r3, #28]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	8b1a      	ldrh	r2, [r3, #24]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7b5b      	ldrb	r3, [r3, #13]
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	9000      	str	r0, [sp, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fcda 	bl	800a5da <USBH_BulkSendData>
 8008c26:	e00b      	b.n	8008c40 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008c30:	b29a      	uxth	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	7b5b      	ldrb	r3, [r3, #13]
 8008c36:	2001      	movs	r0, #1
 8008c38:	9000      	str	r0, [sp, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fccd 	bl	800a5da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2202      	movs	r2, #2
 8008c44:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008c48:	e03b      	b.n	8008cc2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	7b5b      	ldrb	r3, [r3, #13]
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fff1 	bl	800ac38 <USBH_LL_GetURBState>
 8008c56:	4603      	mov	r3, r0
 8008c58:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d128      	bne.n	8008cb2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	8b12      	ldrh	r2, [r2, #24]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d90e      	bls.n	8008c8a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	8b12      	ldrh	r2, [r2, #24]
 8008c74:	1a9a      	subs	r2, r3, r2
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	8b12      	ldrh	r2, [r2, #24]
 8008c82:	441a      	add	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	61da      	str	r2, [r3, #28]
 8008c88:	e002      	b.n	8008c90 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ca0:	e00e      	b.n	8008cc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f868 	bl	8008d80 <USBH_CDC_TransmitCallback>
      break;
 8008cb0:	e006      	b.n	8008cc0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008cb2:	7afb      	ldrb	r3, [r7, #11]
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d103      	bne.n	8008cc0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008cc0:	bf00      	nop
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008ce6:	2b03      	cmp	r3, #3
 8008ce8:	d002      	beq.n	8008cf0 <CDC_ProcessReception+0x26>
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d00e      	beq.n	8008d0c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008cee:	e043      	b.n	8008d78 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	6a19      	ldr	r1, [r3, #32]
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	8b5a      	ldrh	r2, [r3, #26]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	7b1b      	ldrb	r3, [r3, #12]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 fc91 	bl	800a624 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	2204      	movs	r2, #4
 8008d06:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d0a:	e035      	b.n	8008d78 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	7b1b      	ldrb	r3, [r3, #12]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 ff90 	bl	800ac38 <USBH_LL_GetURBState>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008d1c:	7cfb      	ldrb	r3, [r7, #19]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d129      	bne.n	8008d76 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	7b1b      	ldrb	r3, [r3, #12]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fef3 	bl	800ab14 <USBH_LL_GetLastXferSize>
 8008d2e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d016      	beq.n	8008d68 <CDC_ProcessReception+0x9e>
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	8b5b      	ldrh	r3, [r3, #26]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d110      	bne.n	8008d68 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	1ad2      	subs	r2, r2, r3
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	6a1a      	ldr	r2, [r3, #32]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	441a      	add	r2, r3
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	2203      	movs	r2, #3
 8008d62:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d66:	e006      	b.n	8008d76 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 f80f 	bl	8008d94 <USBH_CDC_ReceiveCallback>
      break;
 8008d76:	bf00      	nop
  }
}
 8008d78:	bf00      	nop
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b083      	sub	sp, #12
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d88:	bf00      	nop
 8008d8a:	370c      	adds	r7, #12
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b083      	sub	sp, #12
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008d9c:	bf00      	nop
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da6:	4770      	bx	lr

08008da8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d101      	bne.n	8008dd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e029      	b.n	8008e28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	79fa      	ldrb	r2, [r7, #7]
 8008dd8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008dec:	68f8      	ldr	r0, [r7, #12]
 8008dee:	f000 f81f 	bl	8008e30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f001 fdc3 	bl	800a9ac <USBH_LL_Init>

  return USBH_OK;
 8008e26:	2300      	movs	r3, #0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e009      	b.n	8008e56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	33e0      	adds	r3, #224	@ 0xe0
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	3301      	adds	r3, #1
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b0f      	cmp	r3, #15
 8008e5a:	d9f2      	bls.n	8008e42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	e009      	b.n	8008e76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3301      	adds	r3, #1
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e7c:	d3f1      	bcc.n	8008e62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2240      	movs	r2, #64	@ 0x40
 8008ea2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	331c      	adds	r3, #28
 8008ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f002 fa49 	bl	800b36c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ee0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f002 fa40 	bl	800b36c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008ef2:	2212      	movs	r2, #18
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f002 fa38 	bl	800b36c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f02:	223e      	movs	r2, #62	@ 0x3e
 8008f04:	2100      	movs	r1, #0
 8008f06:	4618      	mov	r0, r3
 8008f08:	f002 fa30 	bl	800b36c <memset>

  return USBH_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3710      	adds	r7, #16
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008f20:	2300      	movs	r3, #0
 8008f22:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d016      	beq.n	8008f58 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10e      	bne.n	8008f52 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008f3a:	1c59      	adds	r1, r3, #1
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	33de      	adds	r3, #222	@ 0xde
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
 8008f50:	e004      	b.n	8008f5c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008f52:	2302      	movs	r3, #2
 8008f54:	73fb      	strb	r3, [r7, #15]
 8008f56:	e001      	b.n	8008f5c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008f58:	2302      	movs	r3, #2
 8008f5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d204      	bcs.n	8008f90 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	78fa      	ldrb	r2, [r7, #3]
 8008f8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008f8e:	e001      	b.n	8008f94 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008f90:	2302      	movs	r3, #2
 8008f92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3714      	adds	r7, #20
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr

08008fa2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b087      	sub	sp, #28
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	4608      	mov	r0, r1
 8008fac:	4611      	mov	r1, r2
 8008fae:	461a      	mov	r2, r3
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	70fb      	strb	r3, [r7, #3]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70bb      	strb	r3, [r7, #2]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008fca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008fcc:	e025      	b.n	800901a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008fce:	7dfb      	ldrb	r3, [r7, #23]
 8008fd0:	221a      	movs	r2, #26
 8008fd2:	fb02 f303 	mul.w	r3, r2, r3
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3302      	adds	r3, #2
 8008fde:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	795b      	ldrb	r3, [r3, #5]
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d002      	beq.n	8008ff0 <USBH_FindInterface+0x4e>
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	2bff      	cmp	r3, #255	@ 0xff
 8008fee:	d111      	bne.n	8009014 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008ff4:	78ba      	ldrb	r2, [r7, #2]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d002      	beq.n	8009000 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008ffa:	78bb      	ldrb	r3, [r7, #2]
 8008ffc:	2bff      	cmp	r3, #255	@ 0xff
 8008ffe:	d109      	bne.n	8009014 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009004:	787a      	ldrb	r2, [r7, #1]
 8009006:	429a      	cmp	r2, r3
 8009008:	d002      	beq.n	8009010 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800900a:	787b      	ldrb	r3, [r7, #1]
 800900c:	2bff      	cmp	r3, #255	@ 0xff
 800900e:	d101      	bne.n	8009014 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	e006      	b.n	8009022 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	3301      	adds	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d9d6      	bls.n	8008fce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009020:	23ff      	movs	r3, #255	@ 0xff
}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 fcf4 	bl	800aa24 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800903c:	2101      	movs	r1, #1
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f001 fe0d 	bl	800ac5e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009044:	2300      	movs	r3, #0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af04      	add	r7, sp, #16
 8009056:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009058:	2302      	movs	r3, #2
 800905a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009066:	b2db      	uxtb	r3, r3
 8009068:	2b01      	cmp	r3, #1
 800906a:	d102      	bne.n	8009072 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2203      	movs	r2, #3
 8009070:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b0b      	cmp	r3, #11
 800907a:	f200 81bb 	bhi.w	80093f4 <USBH_Process+0x3a4>
 800907e:	a201      	add	r2, pc, #4	@ (adr r2, 8009084 <USBH_Process+0x34>)
 8009080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009084:	080090b5 	.word	0x080090b5
 8009088:	080090e7 	.word	0x080090e7
 800908c:	0800914f 	.word	0x0800914f
 8009090:	0800938f 	.word	0x0800938f
 8009094:	080093f5 	.word	0x080093f5
 8009098:	080091ef 	.word	0x080091ef
 800909c:	08009335 	.word	0x08009335
 80090a0:	08009225 	.word	0x08009225
 80090a4:	08009245 	.word	0x08009245
 80090a8:	08009263 	.word	0x08009263
 80090ac:	080092a7 	.word	0x080092a7
 80090b0:	08009377 	.word	0x08009377
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 819b 	beq.w	80093f8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80090c8:	20c8      	movs	r0, #200	@ 0xc8
 80090ca:	f001 fe12 	bl	800acf2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 fd05 	bl	800aade <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090e4:	e188      	b.n	80093f8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d107      	bne.n	8009100 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090fe:	e18a      	b.n	8009416 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009106:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800910a:	d914      	bls.n	8009136 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009112:	3301      	adds	r3, #1
 8009114:	b2da      	uxtb	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009122:	2b03      	cmp	r3, #3
 8009124:	d903      	bls.n	800912e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	220d      	movs	r2, #13
 800912a:	701a      	strb	r2, [r3, #0]
      break;
 800912c:	e173      	b.n	8009416 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	701a      	strb	r2, [r3, #0]
      break;
 8009134:	e16f      	b.n	8009416 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800913c:	f103 020a 	add.w	r2, r3, #10
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009146:	200a      	movs	r0, #10
 8009148:	f001 fdd3 	bl	800acf2 <USBH_Delay>
      break;
 800914c:	e163      	b.n	8009416 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800915e:	2104      	movs	r1, #4
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009164:	2064      	movs	r0, #100	@ 0x64
 8009166:	f001 fdc4 	bl	800acf2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 fc90 	bl	800aa90 <USBH_LL_GetSpeed>
 8009170:	4603      	mov	r3, r0
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2205      	movs	r2, #5
 800917e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009180:	2100      	movs	r1, #0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f001 fa9b 	bl	800a6be <USBH_AllocPipe>
 8009188:	4603      	mov	r3, r0
 800918a:	461a      	mov	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009190:	2180      	movs	r1, #128	@ 0x80
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fa93 	bl	800a6be <USBH_AllocPipe>
 8009198:	4603      	mov	r3, r0
 800919a:	461a      	mov	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7919      	ldrb	r1, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80091b4:	9202      	str	r2, [sp, #8]
 80091b6:	2200      	movs	r2, #0
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	4603      	mov	r3, r0
 80091be:	2280      	movs	r2, #128	@ 0x80
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 fa4d 	bl	800a660 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7959      	ldrb	r1, [r3, #5]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80091da:	9202      	str	r2, [sp, #8]
 80091dc:	2200      	movs	r2, #0
 80091de:	9201      	str	r2, [sp, #4]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4603      	mov	r3, r0
 80091e4:	2200      	movs	r2, #0
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f001 fa3a 	bl	800a660 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091ec:	e113      	b.n	8009416 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f916 	bl	8009420 <USBH_HandleEnum>
 80091f4:	4603      	mov	r3, r0
 80091f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80091f8:	7bbb      	ldrb	r3, [r7, #14]
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 80fd 	bne.w	80093fc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009210:	2b01      	cmp	r3, #1
 8009212:	d103      	bne.n	800921c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2208      	movs	r2, #8
 8009218:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800921a:	e0ef      	b.n	80093fc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2207      	movs	r2, #7
 8009220:	701a      	strb	r2, [r3, #0]
      break;
 8009222:	e0eb      	b.n	80093fc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80e8 	beq.w	8009400 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009236:	2101      	movs	r1, #1
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2208      	movs	r2, #8
 8009240:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009242:	e0dd      	b.n	8009400 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc3a 	bl	8009ac6 <USBH_SetCfg>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	f040 80d5 	bne.w	8009404 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2209      	movs	r2, #9
 800925e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009260:	e0d0      	b.n	8009404 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009268:	f003 0320 	and.w	r3, r3, #32
 800926c:	2b00      	cmp	r3, #0
 800926e:	d016      	beq.n	800929e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009270:	2101      	movs	r1, #1
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fc4a 	bl	8009b0c <USBH_SetFeature>
 8009278:	4603      	mov	r3, r0
 800927a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	2b00      	cmp	r3, #0
 8009282:	d103      	bne.n	800928c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	220a      	movs	r2, #10
 8009288:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800928a:	e0bd      	b.n	8009408 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800928c:	7bbb      	ldrb	r3, [r7, #14]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b03      	cmp	r3, #3
 8009292:	f040 80b9 	bne.w	8009408 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	220a      	movs	r2, #10
 800929a:	701a      	strb	r2, [r3, #0]
      break;
 800929c:	e0b4      	b.n	8009408 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	220a      	movs	r2, #10
 80092a2:	701a      	strb	r2, [r3, #0]
      break;
 80092a4:	e0b0      	b.n	8009408 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80ad 	beq.w	800940c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
 80092be:	e016      	b.n	80092ee <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80092c0:	7bfa      	ldrb	r2, [r7, #15]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	32de      	adds	r2, #222	@ 0xde
 80092c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ca:	791a      	ldrb	r2, [r3, #4]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d108      	bne.n	80092e8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80092d6:	7bfa      	ldrb	r2, [r7, #15]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	32de      	adds	r2, #222	@ 0xde
 80092dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80092e6:	e005      	b.n	80092f4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80092e8:	7bfb      	ldrb	r3, [r7, #15]
 80092ea:	3301      	adds	r3, #1
 80092ec:	73fb      	strb	r3, [r7, #15]
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0e5      	beq.n	80092c0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d016      	beq.n	800932c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	4798      	blx	r3
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2206      	movs	r2, #6
 8009314:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800931c:	2103      	movs	r1, #3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009322:	e073      	b.n	800940c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	220d      	movs	r2, #13
 8009328:	701a      	strb	r2, [r3, #0]
      break;
 800932a:	e06f      	b.n	800940c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	220d      	movs	r2, #13
 8009330:	701a      	strb	r2, [r3, #0]
      break;
 8009332:	e06b      	b.n	800940c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d017      	beq.n	800936e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
 800934a:	4603      	mov	r3, r0
 800934c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	220b      	movs	r2, #11
 800935a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800935c:	e058      	b.n	8009410 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800935e:	7bbb      	ldrb	r3, [r7, #14]
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d154      	bne.n	8009410 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	220d      	movs	r2, #13
 800936a:	701a      	strb	r2, [r3, #0]
      break;
 800936c:	e050      	b.n	8009410 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	220d      	movs	r2, #13
 8009372:	701a      	strb	r2, [r3, #0]
      break;
 8009374:	e04c      	b.n	8009410 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800937c:	2b00      	cmp	r3, #0
 800937e:	d049      	beq.n	8009414 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009386:	695b      	ldr	r3, [r3, #20]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	4798      	blx	r3
      }
      break;
 800938c:	e042      	b.n	8009414 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fd4a 	bl	8008e30 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d009      	beq.n	80093ba <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093ca:	2105      	movs	r1, #5
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d107      	bne.n	80093ec <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff fe22 	bl	800902e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093ea:	e014      	b.n	8009416 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f001 fb19 	bl	800aa24 <USBH_LL_Start>
      break;
 80093f2:	e010      	b.n	8009416 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80093f4:	bf00      	nop
 80093f6:	e00e      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 80093f8:	bf00      	nop
 80093fa:	e00c      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 80093fc:	bf00      	nop
 80093fe:	e00a      	b.n	8009416 <USBH_Process+0x3c6>
    break;
 8009400:	bf00      	nop
 8009402:	e008      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 8009404:	bf00      	nop
 8009406:	e006      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 8009408:	bf00      	nop
 800940a:	e004      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 800940c:	bf00      	nop
 800940e:	e002      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 8009410:	bf00      	nop
 8009412:	e000      	b.n	8009416 <USBH_Process+0x3c6>
      break;
 8009414:	bf00      	nop
  }
  return USBH_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af04      	add	r7, sp, #16
 8009426:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009428:	2301      	movs	r3, #1
 800942a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800942c:	2301      	movs	r3, #1
 800942e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	785b      	ldrb	r3, [r3, #1]
 8009434:	2b07      	cmp	r3, #7
 8009436:	f200 81bd 	bhi.w	80097b4 <USBH_HandleEnum+0x394>
 800943a:	a201      	add	r2, pc, #4	@ (adr r2, 8009440 <USBH_HandleEnum+0x20>)
 800943c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009440:	08009461 	.word	0x08009461
 8009444:	0800951b 	.word	0x0800951b
 8009448:	08009585 	.word	0x08009585
 800944c:	0800960f 	.word	0x0800960f
 8009450:	08009679 	.word	0x08009679
 8009454:	080096e9 	.word	0x080096e9
 8009458:	0800972f 	.word	0x0800972f
 800945c:	08009775 	.word	0x08009775
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009460:	2108      	movs	r1, #8
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 fa4c 	bl	8009900 <USBH_Get_DevDesc>
 8009468:	4603      	mov	r3, r0
 800946a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d12e      	bne.n	80094d0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7919      	ldrb	r1, [r3, #4]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009496:	9202      	str	r2, [sp, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	9201      	str	r2, [sp, #4]
 800949c:	9300      	str	r3, [sp, #0]
 800949e:	4603      	mov	r3, r0
 80094a0:	2280      	movs	r2, #128	@ 0x80
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 f8dc 	bl	800a660 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7959      	ldrb	r1, [r3, #5]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80094bc:	9202      	str	r2, [sp, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	9201      	str	r2, [sp, #4]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	4603      	mov	r3, r0
 80094c6:	2200      	movs	r2, #0
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 f8c9 	bl	800a660 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80094ce:	e173      	b.n	80097b8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	f040 8170 	bne.w	80097b8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094de:	3301      	adds	r3, #1
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d903      	bls.n	80094fa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	220d      	movs	r2, #13
 80094f6:	701a      	strb	r2, [r3, #0]
      break;
 80094f8:	e15e      	b.n	80097b8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	795b      	ldrb	r3, [r3, #5]
 80094fe:	4619      	mov	r1, r3
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f001 f8fd 	bl	800a700 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	791b      	ldrb	r3, [r3, #4]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f001 f8f7 	bl	800a700 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	701a      	strb	r2, [r3, #0]
      break;
 8009518:	e14e      	b.n	80097b8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800951a:	2112      	movs	r1, #18
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f9ef 	bl	8009900 <USBH_Get_DevDesc>
 8009522:	4603      	mov	r3, r0
 8009524:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d103      	bne.n	8009534 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009532:	e143      	b.n	80097bc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	2b03      	cmp	r3, #3
 8009538:	f040 8140 	bne.w	80097bc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009542:	3301      	adds	r3, #1
 8009544:	b2da      	uxtb	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009552:	2b03      	cmp	r3, #3
 8009554:	d903      	bls.n	800955e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	220d      	movs	r2, #13
 800955a:	701a      	strb	r2, [r3, #0]
      break;
 800955c:	e12e      	b.n	80097bc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	795b      	ldrb	r3, [r3, #5]
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f001 f8cb 	bl	800a700 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	791b      	ldrb	r3, [r3, #4]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f001 f8c5 	bl	800a700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
      break;
 8009582:	e11b      	b.n	80097bc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009584:	2101      	movs	r1, #1
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fa79 	bl	8009a7e <USBH_SetAddress>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009590:	7bbb      	ldrb	r3, [r7, #14]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d130      	bne.n	80095f8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009596:	2002      	movs	r0, #2
 8009598:	f001 fbab 	bl	800acf2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2203      	movs	r2, #3
 80095a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	7919      	ldrb	r1, [r3, #4]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80095be:	9202      	str	r2, [sp, #8]
 80095c0:	2200      	movs	r2, #0
 80095c2:	9201      	str	r2, [sp, #4]
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4603      	mov	r3, r0
 80095c8:	2280      	movs	r2, #128	@ 0x80
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f001 f848 	bl	800a660 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	7959      	ldrb	r1, [r3, #5]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095e4:	9202      	str	r2, [sp, #8]
 80095e6:	2200      	movs	r2, #0
 80095e8:	9201      	str	r2, [sp, #4]
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	4603      	mov	r3, r0
 80095ee:	2200      	movs	r2, #0
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 f835 	bl	800a660 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095f6:	e0e3      	b.n	80097c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	f040 80e0 	bne.w	80097c0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	220d      	movs	r2, #13
 8009604:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	705a      	strb	r2, [r3, #1]
      break;
 800960c:	e0d8      	b.n	80097c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800960e:	2109      	movs	r1, #9
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f9a1 	bl	8009958 <USBH_Get_CfgDesc>
 8009616:	4603      	mov	r3, r0
 8009618:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d103      	bne.n	8009628 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2204      	movs	r2, #4
 8009624:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009626:	e0cd      	b.n	80097c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	2b03      	cmp	r3, #3
 800962c:	f040 80ca 	bne.w	80097c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009636:	3301      	adds	r3, #1
 8009638:	b2da      	uxtb	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009646:	2b03      	cmp	r3, #3
 8009648:	d903      	bls.n	8009652 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	220d      	movs	r2, #13
 800964e:	701a      	strb	r2, [r3, #0]
      break;
 8009650:	e0b8      	b.n	80097c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	795b      	ldrb	r3, [r3, #5]
 8009656:	4619      	mov	r1, r3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f001 f851 	bl	800a700 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	791b      	ldrb	r3, [r3, #4]
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 f84b 	bl	800a700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
      break;
 8009676:	e0a5      	b.n	80097c4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f969 	bl	8009958 <USBH_Get_CfgDesc>
 8009686:	4603      	mov	r3, r0
 8009688:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800968a:	7bbb      	ldrb	r3, [r7, #14]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d103      	bne.n	8009698 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2205      	movs	r2, #5
 8009694:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009696:	e097      	b.n	80097c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	2b03      	cmp	r3, #3
 800969c:	f040 8094 	bne.w	80097c8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096a6:	3301      	adds	r3, #1
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d903      	bls.n	80096c2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	220d      	movs	r2, #13
 80096be:	701a      	strb	r2, [r3, #0]
      break;
 80096c0:	e082      	b.n	80097c8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	795b      	ldrb	r3, [r3, #5]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 f819 	bl	800a700 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	791b      	ldrb	r3, [r3, #4]
 80096d2:	4619      	mov	r1, r3
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f001 f813 	bl	800a700 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2200      	movs	r2, #0
 80096de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	701a      	strb	r2, [r3, #0]
      break;
 80096e6:	e06f      	b.n	80097c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d019      	beq.n	8009726 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80096fe:	23ff      	movs	r3, #255	@ 0xff
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f953 	bl	80099ac <USBH_Get_StringDesc>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2206      	movs	r2, #6
 8009714:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009716:	e059      	b.n	80097cc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b03      	cmp	r3, #3
 800971c:	d156      	bne.n	80097cc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2206      	movs	r2, #6
 8009722:	705a      	strb	r2, [r3, #1]
      break;
 8009724:	e052      	b.n	80097cc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2206      	movs	r2, #6
 800972a:	705a      	strb	r2, [r3, #1]
      break;
 800972c:	e04e      	b.n	80097cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009734:	2b00      	cmp	r3, #0
 8009736:	d019      	beq.n	800976c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009744:	23ff      	movs	r3, #255	@ 0xff
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f930 	bl	80099ac <USBH_Get_StringDesc>
 800974c:	4603      	mov	r3, r0
 800974e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2207      	movs	r2, #7
 800975a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800975c:	e038      	b.n	80097d0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800975e:	7bbb      	ldrb	r3, [r7, #14]
 8009760:	2b03      	cmp	r3, #3
 8009762:	d135      	bne.n	80097d0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2207      	movs	r2, #7
 8009768:	705a      	strb	r2, [r3, #1]
      break;
 800976a:	e031      	b.n	80097d0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2207      	movs	r2, #7
 8009770:	705a      	strb	r2, [r3, #1]
      break;
 8009772:	e02d      	b.n	80097d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800977a:	2b00      	cmp	r3, #0
 800977c:	d017      	beq.n	80097ae <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800978a:	23ff      	movs	r3, #255	@ 0xff
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f90d 	bl	80099ac <USBH_Get_StringDesc>
 8009792:	4603      	mov	r3, r0
 8009794:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d102      	bne.n	80097a2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80097a0:	e018      	b.n	80097d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b03      	cmp	r3, #3
 80097a6:	d115      	bne.n	80097d4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73fb      	strb	r3, [r7, #15]
      break;
 80097ac:	e012      	b.n	80097d4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
      break;
 80097b2:	e00f      	b.n	80097d4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80097b4:	bf00      	nop
 80097b6:	e00e      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097b8:	bf00      	nop
 80097ba:	e00c      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097bc:	bf00      	nop
 80097be:	e00a      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097c0:	bf00      	nop
 80097c2:	e008      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097c4:	bf00      	nop
 80097c6:	e006      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097c8:	bf00      	nop
 80097ca:	e004      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <USBH_HandleEnum+0x3b6>
      break;
 80097d4:	bf00      	nop
  }
  return Status;
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3710      	adds	r7, #16
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	683a      	ldr	r2, [r7, #0]
 80097ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80097f2:	bf00      	nop
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f804 	bl	8009822 <USBH_HandleSof>
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b0b      	cmp	r3, #11
 8009832:	d10a      	bne.n	800984a <USBH_HandleSof+0x28>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d005      	beq.n	800984a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	4798      	blx	r3
  }
}
 800984a:	bf00      	nop
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009862:	bf00      	nop
}
 8009864:	370c      	adds	r7, #12
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800987e:	bf00      	nop
}
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800988a:	b480      	push	{r7}
 800988c:	b083      	sub	sp, #12
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2201      	movs	r2, #1
 8009896:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f8be 	bl	800aa5a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	791b      	ldrb	r3, [r3, #4]
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 ff0b 	bl	800a700 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	795b      	ldrb	r3, [r3, #5]
 80098ee:	4619      	mov	r1, r3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f000 ff05 	bl	800a700 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}

08009900 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af02      	add	r7, sp, #8
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	460b      	mov	r3, r1
 800990a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800990c:	887b      	ldrh	r3, [r7, #2]
 800990e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009912:	d901      	bls.n	8009918 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009914:	2303      	movs	r3, #3
 8009916:	e01b      	b.n	8009950 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800991e:	887b      	ldrh	r3, [r7, #2]
 8009920:	9300      	str	r3, [sp, #0]
 8009922:	4613      	mov	r3, r2
 8009924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009928:	2100      	movs	r1, #0
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 f872 	bl	8009a14 <USBH_GetDescriptor>
 8009930:	4603      	mov	r3, r0
 8009932:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009940:	887a      	ldrh	r2, [r7, #2]
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f929 	bl	8009b9c <USBH_ParseDevDesc>
 800994a:	4603      	mov	r3, r0
 800994c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800994e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af02      	add	r7, sp, #8
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	331c      	adds	r3, #28
 8009968:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800996a:	887b      	ldrh	r3, [r7, #2]
 800996c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009970:	d901      	bls.n	8009976 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009972:	2303      	movs	r3, #3
 8009974:	e016      	b.n	80099a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009976:	887b      	ldrh	r3, [r7, #2]
 8009978:	9300      	str	r3, [sp, #0]
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009980:	2100      	movs	r1, #0
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f846 	bl	8009a14 <USBH_GetDescriptor>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d107      	bne.n	80099a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009992:	887b      	ldrh	r3, [r7, #2]
 8009994:	461a      	mov	r2, r3
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 f9af 	bl	8009cfc <USBH_ParseCfgDesc>
 800999e:	4603      	mov	r3, r0
 80099a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	461a      	mov	r2, r3
 80099b8:	460b      	mov	r3, r1
 80099ba:	72fb      	strb	r3, [r7, #11]
 80099bc:	4613      	mov	r3, r2
 80099be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80099c0:	893b      	ldrh	r3, [r7, #8]
 80099c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c6:	d802      	bhi.n	80099ce <USBH_Get_StringDesc+0x22>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d101      	bne.n	80099d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e01c      	b.n	8009a0c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80099da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099e2:	893b      	ldrh	r3, [r7, #8]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	460b      	mov	r3, r1
 80099e8:	2100      	movs	r1, #0
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 f812 	bl	8009a14 <USBH_GetDescriptor>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a00:	893a      	ldrh	r2, [r7, #8]
 8009a02:	6879      	ldr	r1, [r7, #4]
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 fb8d 	bl	800a124 <USBH_ParseStringDesc>
  }

  return status;
 8009a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3718      	adds	r7, #24
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	607b      	str	r3, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	72fb      	strb	r3, [r7, #11]
 8009a22:	4613      	mov	r3, r2
 8009a24:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	789b      	ldrb	r3, [r3, #2]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d11c      	bne.n	8009a68 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009a2e:	7afb      	ldrb	r3, [r7, #11]
 8009a30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2206      	movs	r2, #6
 8009a3e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	893a      	ldrh	r2, [r7, #8]
 8009a44:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009a46:	893b      	ldrh	r3, [r7, #8]
 8009a48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a50:	d104      	bne.n	8009a5c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f240 4209 	movw	r2, #1033	@ 0x409
 8009a58:	829a      	strh	r2, [r3, #20]
 8009a5a:	e002      	b.n	8009a62 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	8b3a      	ldrh	r2, [r7, #24]
 8009a66:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009a68:	8b3b      	ldrh	r3, [r7, #24]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fba5 	bl	800a1be <USBH_CtlReq>
 8009a74:	4603      	mov	r3, r0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	789b      	ldrb	r3, [r3, #2]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d10f      	bne.n	8009ab2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2205      	movs	r2, #5
 8009a9c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 fb81 	bl	800a1be <USBH_CtlReq>
 8009abc:	4603      	mov	r3, r0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	789b      	ldrb	r3, [r3, #2]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10e      	bne.n	8009af8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2209      	movs	r2, #9
 8009ae4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	887a      	ldrh	r2, [r7, #2]
 8009aea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009af8:	2200      	movs	r2, #0
 8009afa:	2100      	movs	r1, #0
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb5e 	bl	800a1be <USBH_CtlReq>
 8009b02:	4603      	mov	r3, r0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	789b      	ldrb	r3, [r3, #2]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d10f      	bne.n	8009b40 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2203      	movs	r2, #3
 8009b2a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009b2c:	78fb      	ldrb	r3, [r7, #3]
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b40:	2200      	movs	r2, #0
 8009b42:	2100      	movs	r1, #0
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fb3a 	bl	800a1be <USBH_CtlReq>
 8009b4a:	4603      	mov	r3, r0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	789b      	ldrb	r3, [r3, #2]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d10f      	bne.n	8009b88 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2201      	movs	r2, #1
 8009b72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b88:	2200      	movs	r2, #0
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 fb16 	bl	800a1be <USBH_CtlReq>
 8009b92:	4603      	mov	r3, r0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b087      	sub	sp, #28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009bb0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009bbc:	2302      	movs	r3, #2
 8009bbe:	e094      	b.n	8009cea <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	781a      	ldrb	r2, [r3, #0]
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	785a      	ldrb	r2, [r3, #1]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	3302      	adds	r3, #2
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	3303      	adds	r3, #3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	4313      	orrs	r3, r2
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	791a      	ldrb	r2, [r3, #4]
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	795a      	ldrb	r2, [r3, #5]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	799a      	ldrb	r2, [r3, #6]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	79da      	ldrb	r2, [r3, #7]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d004      	beq.n	8009c1e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d11b      	bne.n	8009c56 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	79db      	ldrb	r3, [r3, #7]
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	dc0f      	bgt.n	8009c46 <USBH_ParseDevDesc+0xaa>
 8009c26:	2b08      	cmp	r3, #8
 8009c28:	db0f      	blt.n	8009c4a <USBH_ParseDevDesc+0xae>
 8009c2a:	3b08      	subs	r3, #8
 8009c2c:	4a32      	ldr	r2, [pc, #200]	@ (8009cf8 <USBH_ParseDevDesc+0x15c>)
 8009c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bf14      	ite	ne
 8009c3a:	2301      	movne	r3, #1
 8009c3c:	2300      	moveq	r3, #0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <USBH_ParseDevDesc+0xb6>
 8009c44:	e001      	b.n	8009c4a <USBH_ParseDevDesc+0xae>
 8009c46:	2b40      	cmp	r3, #64	@ 0x40
 8009c48:	d003      	beq.n	8009c52 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2208      	movs	r2, #8
 8009c4e:	71da      	strb	r2, [r3, #7]
        break;
 8009c50:	e000      	b.n	8009c54 <USBH_ParseDevDesc+0xb8>
        break;
 8009c52:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009c54:	e00e      	b.n	8009c74 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d107      	bne.n	8009c70 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	79db      	ldrb	r3, [r3, #7]
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d005      	beq.n	8009c74 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	2208      	movs	r2, #8
 8009c6c:	71da      	strb	r2, [r3, #7]
 8009c6e:	e001      	b.n	8009c74 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c70:	2303      	movs	r3, #3
 8009c72:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009c74:	88fb      	ldrh	r3, [r7, #6]
 8009c76:	2b08      	cmp	r3, #8
 8009c78:	d936      	bls.n	8009ce8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	3309      	adds	r3, #9
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	021b      	lsls	r3, r3, #8
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	330a      	adds	r3, #10
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	330b      	adds	r3, #11
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	021b      	lsls	r3, r3, #8
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	330c      	adds	r3, #12
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	330d      	adds	r3, #13
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	021b      	lsls	r3, r3, #8
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	7b9a      	ldrb	r2, [r3, #14]
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	7bda      	ldrb	r2, [r3, #15]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	7c1a      	ldrb	r2, [r3, #16]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	7c5a      	ldrb	r2, [r3, #17]
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	01000101 	.word	0x01000101

08009cfc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08c      	sub	sp, #48	@ 0x30
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	4613      	mov	r3, r2
 8009d08:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d10:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e0da      	b.n	8009ee4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b09      	cmp	r3, #9
 8009d38:	d002      	beq.n	8009d40 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d3c:	2209      	movs	r2, #9
 8009d3e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	781a      	ldrb	r2, [r3, #0]
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	785a      	ldrb	r2, [r3, #1]
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3302      	adds	r3, #2
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	3303      	adds	r3, #3
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	4313      	orrs	r3, r2
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d6a:	bf28      	it	cs
 8009d6c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	791a      	ldrb	r2, [r3, #4]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	795a      	ldrb	r2, [r3, #5]
 8009d82:	6a3b      	ldr	r3, [r7, #32]
 8009d84:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	799a      	ldrb	r2, [r3, #6]
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	79da      	ldrb	r2, [r3, #7]
 8009d92:	6a3b      	ldr	r3, [r7, #32]
 8009d94:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	7a1a      	ldrb	r2, [r3, #8]
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009d9e:	88fb      	ldrh	r3, [r7, #6]
 8009da0:	2b09      	cmp	r3, #9
 8009da2:	f240 809d 	bls.w	8009ee0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009da6:	2309      	movs	r3, #9
 8009da8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009daa:	2300      	movs	r3, #0
 8009dac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009dae:	e081      	b.n	8009eb4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009db0:	f107 0316 	add.w	r3, r7, #22
 8009db4:	4619      	mov	r1, r3
 8009db6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009db8:	f000 f9e7 	bl	800a18a <USBH_GetNextDesc>
 8009dbc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	d176      	bne.n	8009eb4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	2b09      	cmp	r3, #9
 8009dcc:	d002      	beq.n	8009dd4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	2209      	movs	r2, #9
 8009dd2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dd8:	221a      	movs	r2, #26
 8009dda:	fb02 f303 	mul.w	r3, r2, r3
 8009dde:	3308      	adds	r3, #8
 8009de0:	6a3a      	ldr	r2, [r7, #32]
 8009de2:	4413      	add	r3, r2
 8009de4:	3302      	adds	r3, #2
 8009de6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009de8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dea:	69f8      	ldr	r0, [r7, #28]
 8009dec:	f000 f87e 	bl	8009eec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009df0:	2300      	movs	r3, #0
 8009df2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009df6:	2300      	movs	r3, #0
 8009df8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009dfa:	e043      	b.n	8009e84 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009dfc:	f107 0316 	add.w	r3, r7, #22
 8009e00:	4619      	mov	r1, r3
 8009e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e04:	f000 f9c1 	bl	800a18a <USBH_GetNextDesc>
 8009e08:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e0c:	785b      	ldrb	r3, [r3, #1]
 8009e0e:	2b05      	cmp	r3, #5
 8009e10:	d138      	bne.n	8009e84 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	795b      	ldrb	r3, [r3, #5]
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d113      	bne.n	8009e42 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d003      	beq.n	8009e2a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	799b      	ldrb	r3, [r3, #6]
 8009e26:	2b03      	cmp	r3, #3
 8009e28:	d10b      	bne.n	8009e42 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	79db      	ldrb	r3, [r3, #7]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d10b      	bne.n	8009e4a <USBH_ParseCfgDesc+0x14e>
 8009e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b09      	cmp	r3, #9
 8009e38:	d007      	beq.n	8009e4a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e3c:	2209      	movs	r2, #9
 8009e3e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e40:	e003      	b.n	8009e4a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e44:	2207      	movs	r2, #7
 8009e46:	701a      	strb	r2, [r3, #0]
 8009e48:	e000      	b.n	8009e4c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009e4a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e50:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e54:	3201      	adds	r2, #1
 8009e56:	00d2      	lsls	r2, r2, #3
 8009e58:	211a      	movs	r1, #26
 8009e5a:	fb01 f303 	mul.w	r3, r1, r3
 8009e5e:	4413      	add	r3, r2
 8009e60:	3308      	adds	r3, #8
 8009e62:	6a3a      	ldr	r2, [r7, #32]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e6c:	69b9      	ldr	r1, [r7, #24]
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 f870 	bl	8009f54 <USBH_ParseEPDesc>
 8009e74:	4603      	mov	r3, r0
 8009e76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009e7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e7e:	3301      	adds	r3, #1
 8009e80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	791b      	ldrb	r3, [r3, #4]
 8009e88:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d204      	bcs.n	8009e9a <USBH_ParseCfgDesc+0x19e>
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	885a      	ldrh	r2, [r3, #2]
 8009e94:	8afb      	ldrh	r3, [r7, #22]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d8b0      	bhi.n	8009dfc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	791b      	ldrb	r3, [r3, #4]
 8009e9e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d201      	bcs.n	8009eaa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e01c      	b.n	8009ee4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009eaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eae:	3301      	adds	r3, #1
 8009eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d805      	bhi.n	8009ec8 <USBH_ParseCfgDesc+0x1cc>
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	885a      	ldrh	r2, [r3, #2]
 8009ec0:	8afb      	ldrh	r3, [r7, #22]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	f63f af74 	bhi.w	8009db0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	791b      	ldrb	r3, [r3, #4]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	bf28      	it	cs
 8009ed0:	2302      	movcs	r3, #2
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d201      	bcs.n	8009ee0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e001      	b.n	8009ee4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3730      	adds	r7, #48	@ 0x30
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781a      	ldrb	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	785a      	ldrb	r2, [r3, #1]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	789a      	ldrb	r2, [r3, #2]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	78da      	ldrb	r2, [r3, #3]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	bf28      	it	cs
 8009f20:	2302      	movcs	r3, #2
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	795a      	ldrb	r2, [r3, #5]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	799a      	ldrb	r2, [r3, #6]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	79da      	ldrb	r2, [r3, #7]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	7a1a      	ldrb	r2, [r3, #8]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	721a      	strb	r2, [r3, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781a      	ldrb	r2, [r3, #0]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	785a      	ldrb	r2, [r3, #1]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	789a      	ldrb	r2, [r3, #2]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	78da      	ldrb	r2, [r3, #3]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3304      	adds	r3, #4
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3305      	adds	r3, #5
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	4313      	orrs	r3, r2
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	799a      	ldrb	r2, [r3, #6]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	889b      	ldrh	r3, [r3, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d009      	beq.n	8009fc2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009fb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fb6:	d804      	bhi.n	8009fc2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fc0:	d901      	bls.n	8009fc6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d136      	bne.n	800a03e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	78db      	ldrb	r3, [r3, #3]
 8009fd4:	f003 0303 	and.w	r3, r3, #3
 8009fd8:	2b02      	cmp	r3, #2
 8009fda:	d108      	bne.n	8009fee <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	889b      	ldrh	r3, [r3, #4]
 8009fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fe4:	f240 8097 	bls.w	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	75fb      	strb	r3, [r7, #23]
 8009fec:	e093      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	78db      	ldrb	r3, [r3, #3]
 8009ff2:	f003 0303 	and.w	r3, r3, #3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d107      	bne.n	800a00a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	889b      	ldrh	r3, [r3, #4]
 8009ffe:	2b40      	cmp	r3, #64	@ 0x40
 800a000:	f240 8089 	bls.w	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a004:	2303      	movs	r3, #3
 800a006:	75fb      	strb	r3, [r7, #23]
 800a008:	e085      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	78db      	ldrb	r3, [r3, #3]
 800a00e:	f003 0303 	and.w	r3, r3, #3
 800a012:	2b01      	cmp	r3, #1
 800a014:	d005      	beq.n	800a022 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	78db      	ldrb	r3, [r3, #3]
 800a01a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a01e:	2b03      	cmp	r3, #3
 800a020:	d10a      	bne.n	800a038 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	799b      	ldrb	r3, [r3, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <USBH_ParseEPDesc+0xde>
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	799b      	ldrb	r3, [r3, #6]
 800a02e:	2b10      	cmp	r3, #16
 800a030:	d970      	bls.n	800a114 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a032:	2303      	movs	r3, #3
 800a034:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a036:	e06d      	b.n	800a114 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a038:	2303      	movs	r3, #3
 800a03a:	75fb      	strb	r3, [r7, #23]
 800a03c:	e06b      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a044:	2b01      	cmp	r3, #1
 800a046:	d13c      	bne.n	800a0c2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	78db      	ldrb	r3, [r3, #3]
 800a04c:	f003 0303 	and.w	r3, r3, #3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d005      	beq.n	800a060 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	78db      	ldrb	r3, [r3, #3]
 800a058:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d106      	bne.n	800a06e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	889b      	ldrh	r3, [r3, #4]
 800a064:	2b40      	cmp	r3, #64	@ 0x40
 800a066:	d956      	bls.n	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a068:	2303      	movs	r3, #3
 800a06a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a06c:	e053      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	78db      	ldrb	r3, [r3, #3]
 800a072:	f003 0303 	and.w	r3, r3, #3
 800a076:	2b01      	cmp	r3, #1
 800a078:	d10e      	bne.n	800a098 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	799b      	ldrb	r3, [r3, #6]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a086:	2b10      	cmp	r3, #16
 800a088:	d803      	bhi.n	800a092 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a08e:	2b40      	cmp	r3, #64	@ 0x40
 800a090:	d941      	bls.n	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a092:	2303      	movs	r3, #3
 800a094:	75fb      	strb	r3, [r7, #23]
 800a096:	e03e      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	78db      	ldrb	r3, [r3, #3]
 800a09c:	f003 0303 	and.w	r3, r3, #3
 800a0a0:	2b03      	cmp	r3, #3
 800a0a2:	d10b      	bne.n	800a0bc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	799b      	ldrb	r3, [r3, #6]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d004      	beq.n	800a0b6 <USBH_ParseEPDesc+0x162>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	889b      	ldrh	r3, [r3, #4]
 800a0b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0b4:	d32f      	bcc.n	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	75fb      	strb	r3, [r7, #23]
 800a0ba:	e02c      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	75fb      	strb	r3, [r7, #23]
 800a0c0:	e029      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d120      	bne.n	800a10e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	78db      	ldrb	r3, [r3, #3]
 800a0d0:	f003 0303 	and.w	r3, r3, #3
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d106      	bne.n	800a0e6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	889b      	ldrh	r3, [r3, #4]
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d01a      	beq.n	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	75fb      	strb	r3, [r7, #23]
 800a0e4:	e017      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	78db      	ldrb	r3, [r3, #3]
 800a0ea:	f003 0303 	and.w	r3, r3, #3
 800a0ee:	2b03      	cmp	r3, #3
 800a0f0:	d10a      	bne.n	800a108 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	799b      	ldrb	r3, [r3, #6]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d003      	beq.n	800a102 <USBH_ParseEPDesc+0x1ae>
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	889b      	ldrh	r3, [r3, #4]
 800a0fe:	2b08      	cmp	r3, #8
 800a100:	d909      	bls.n	800a116 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a102:	2303      	movs	r3, #3
 800a104:	75fb      	strb	r3, [r7, #23]
 800a106:	e006      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a108:	2303      	movs	r3, #3
 800a10a:	75fb      	strb	r3, [r7, #23]
 800a10c:	e003      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a10e:	2303      	movs	r3, #3
 800a110:	75fb      	strb	r3, [r7, #23]
 800a112:	e000      	b.n	800a116 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a114:	bf00      	nop
  }

  return status;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	371c      	adds	r7, #28
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	60f8      	str	r0, [r7, #12]
 800a12c:	60b9      	str	r1, [r7, #8]
 800a12e:	4613      	mov	r3, r2
 800a130:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	3301      	adds	r3, #1
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	2b03      	cmp	r3, #3
 800a13a:	d120      	bne.n	800a17e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	1e9a      	subs	r2, r3, #2
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	4293      	cmp	r3, r2
 800a146:	bf28      	it	cs
 800a148:	4613      	movcs	r3, r2
 800a14a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3302      	adds	r3, #2
 800a150:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a152:	2300      	movs	r3, #0
 800a154:	82fb      	strh	r3, [r7, #22]
 800a156:	e00b      	b.n	800a170 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a158:	8afb      	ldrh	r3, [r7, #22]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	4413      	add	r3, r2
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	3301      	adds	r3, #1
 800a168:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a16a:	8afb      	ldrh	r3, [r7, #22]
 800a16c:	3302      	adds	r3, #2
 800a16e:	82fb      	strh	r3, [r7, #22]
 800a170:	8afa      	ldrh	r2, [r7, #22]
 800a172:	8abb      	ldrh	r3, [r7, #20]
 800a174:	429a      	cmp	r2, r3
 800a176:	d3ef      	bcc.n	800a158 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]
  }
}
 800a17e:	bf00      	nop
 800a180:	371c      	adds	r7, #28
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr

0800a18a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a18a:	b480      	push	{r7}
 800a18c:	b085      	sub	sp, #20
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	7812      	ldrb	r2, [r2, #0]
 800a19c:	4413      	add	r3, r2
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3714      	adds	r7, #20
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr

0800a1be <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b086      	sub	sp, #24
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	789b      	ldrb	r3, [r3, #2]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d002      	beq.n	800a1de <USBH_CtlReq+0x20>
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d00f      	beq.n	800a1fc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a1dc:	e027      	b.n	800a22e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	88fa      	ldrh	r2, [r7, #6]
 800a1e8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2202      	movs	r2, #2
 800a1f4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fa:	e018      	b.n	800a22e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f81b 	bl	800a238 <USBH_HandleControl>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a206:	7dfb      	ldrb	r3, [r7, #23]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <USBH_CtlReq+0x54>
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d106      	bne.n	800a220 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2201      	movs	r2, #1
 800a216:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2200      	movs	r2, #0
 800a21c:	761a      	strb	r2, [r3, #24]
      break;
 800a21e:	e005      	b.n	800a22c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a220:	7dfb      	ldrb	r3, [r7, #23]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d102      	bne.n	800a22c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	709a      	strb	r2, [r3, #2]
      break;
 800a22c:	bf00      	nop
  }
  return status;
 800a22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3718      	adds	r7, #24
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af02      	add	r7, sp, #8
 800a23e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a240:	2301      	movs	r3, #1
 800a242:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a244:	2300      	movs	r3, #0
 800a246:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7e1b      	ldrb	r3, [r3, #24]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	2b0a      	cmp	r3, #10
 800a250:	f200 8156 	bhi.w	800a500 <USBH_HandleControl+0x2c8>
 800a254:	a201      	add	r2, pc, #4	@ (adr r2, 800a25c <USBH_HandleControl+0x24>)
 800a256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25a:	bf00      	nop
 800a25c:	0800a289 	.word	0x0800a289
 800a260:	0800a2a3 	.word	0x0800a2a3
 800a264:	0800a30d 	.word	0x0800a30d
 800a268:	0800a333 	.word	0x0800a333
 800a26c:	0800a36b 	.word	0x0800a36b
 800a270:	0800a395 	.word	0x0800a395
 800a274:	0800a3e7 	.word	0x0800a3e7
 800a278:	0800a409 	.word	0x0800a409
 800a27c:	0800a445 	.word	0x0800a445
 800a280:	0800a46b 	.word	0x0800a46b
 800a284:	0800a4a9 	.word	0x0800a4a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f103 0110 	add.w	r1, r3, #16
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	795b      	ldrb	r3, [r3, #5]
 800a292:	461a      	mov	r2, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f943 	bl	800a520 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2202      	movs	r2, #2
 800a29e:	761a      	strb	r2, [r3, #24]
      break;
 800a2a0:	e139      	b.n	800a516 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	795b      	ldrb	r3, [r3, #5]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fcc5 	bl	800ac38 <USBH_LL_GetURBState>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d11e      	bne.n	800a2f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	7c1b      	ldrb	r3, [r3, #16]
 800a2bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	8adb      	ldrh	r3, [r3, #22]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a2ca:	7b7b      	ldrb	r3, [r7, #13]
 800a2cc:	2b80      	cmp	r3, #128	@ 0x80
 800a2ce:	d103      	bne.n	800a2d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a2d6:	e115      	b.n	800a504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2205      	movs	r2, #5
 800a2dc:	761a      	strb	r2, [r3, #24]
      break;
 800a2de:	e111      	b.n	800a504 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a2e0:	7b7b      	ldrb	r3, [r7, #13]
 800a2e2:	2b80      	cmp	r3, #128	@ 0x80
 800a2e4:	d103      	bne.n	800a2ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2209      	movs	r2, #9
 800a2ea:	761a      	strb	r2, [r3, #24]
      break;
 800a2ec:	e10a      	b.n	800a504 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2207      	movs	r2, #7
 800a2f2:	761a      	strb	r2, [r3, #24]
      break;
 800a2f4:	e106      	b.n	800a504 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a2f6:	7bbb      	ldrb	r3, [r7, #14]
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d003      	beq.n	800a304 <USBH_HandleControl+0xcc>
 800a2fc:	7bbb      	ldrb	r3, [r7, #14]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	f040 8100 	bne.w	800a504 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	220b      	movs	r2, #11
 800a308:	761a      	strb	r2, [r3, #24]
      break;
 800a30a:	e0fb      	b.n	800a504 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a312:	b29a      	uxth	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6899      	ldr	r1, [r3, #8]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	899a      	ldrh	r2, [r3, #12]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	791b      	ldrb	r3, [r3, #4]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 f93a 	bl	800a59e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2204      	movs	r2, #4
 800a32e:	761a      	strb	r2, [r3, #24]
      break;
 800a330:	e0f1      	b.n	800a516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	791b      	ldrb	r3, [r3, #4]
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 fc7d 	bl	800ac38 <USBH_LL_GetURBState>
 800a33e:	4603      	mov	r3, r0
 800a340:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a342:	7bbb      	ldrb	r3, [r7, #14]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d102      	bne.n	800a34e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2209      	movs	r2, #9
 800a34c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a34e:	7bbb      	ldrb	r3, [r7, #14]
 800a350:	2b05      	cmp	r3, #5
 800a352:	d102      	bne.n	800a35a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a354:	2303      	movs	r3, #3
 800a356:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a358:	e0d6      	b.n	800a508 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	2b04      	cmp	r3, #4
 800a35e:	f040 80d3 	bne.w	800a508 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	220b      	movs	r2, #11
 800a366:	761a      	strb	r2, [r3, #24]
      break;
 800a368:	e0ce      	b.n	800a508 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6899      	ldr	r1, [r3, #8]
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	899a      	ldrh	r2, [r3, #12]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	795b      	ldrb	r3, [r3, #5]
 800a376:	2001      	movs	r0, #1
 800a378:	9000      	str	r0, [sp, #0]
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f8ea 	bl	800a554 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a386:	b29a      	uxth	r2, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2206      	movs	r2, #6
 800a390:	761a      	strb	r2, [r3, #24]
      break;
 800a392:	e0c0      	b.n	800a516 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	795b      	ldrb	r3, [r3, #5]
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 fc4c 	bl	800ac38 <USBH_LL_GetURBState>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a3a4:	7bbb      	ldrb	r3, [r7, #14]
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d103      	bne.n	800a3b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2207      	movs	r2, #7
 800a3ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3b0:	e0ac      	b.n	800a50c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a3b2:	7bbb      	ldrb	r3, [r7, #14]
 800a3b4:	2b05      	cmp	r3, #5
 800a3b6:	d105      	bne.n	800a3c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	220c      	movs	r2, #12
 800a3bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c2:	e0a3      	b.n	800a50c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a3c4:	7bbb      	ldrb	r3, [r7, #14]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d103      	bne.n	800a3d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2205      	movs	r2, #5
 800a3ce:	761a      	strb	r2, [r3, #24]
      break;
 800a3d0:	e09c      	b.n	800a50c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	f040 8099 	bne.w	800a50c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	220b      	movs	r2, #11
 800a3de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a3e0:	2302      	movs	r3, #2
 800a3e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3e4:	e092      	b.n	800a50c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	791b      	ldrb	r3, [r3, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f8d5 	bl	800a59e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2208      	movs	r2, #8
 800a404:	761a      	strb	r2, [r3, #24]

      break;
 800a406:	e086      	b.n	800a516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	791b      	ldrb	r3, [r3, #4]
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f000 fc12 	bl	800ac38 <USBH_LL_GetURBState>
 800a414:	4603      	mov	r3, r0
 800a416:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d105      	bne.n	800a42a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	220d      	movs	r2, #13
 800a422:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a428:	e072      	b.n	800a510 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d103      	bne.n	800a438 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	220b      	movs	r2, #11
 800a434:	761a      	strb	r2, [r3, #24]
      break;
 800a436:	e06b      	b.n	800a510 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d168      	bne.n	800a510 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a43e:	2303      	movs	r3, #3
 800a440:	73fb      	strb	r3, [r7, #15]
      break;
 800a442:	e065      	b.n	800a510 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	795b      	ldrb	r3, [r3, #5]
 800a448:	2201      	movs	r2, #1
 800a44a:	9200      	str	r2, [sp, #0]
 800a44c:	2200      	movs	r2, #0
 800a44e:	2100      	movs	r1, #0
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f87f 	bl	800a554 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	220a      	movs	r2, #10
 800a466:	761a      	strb	r2, [r3, #24]
      break;
 800a468:	e055      	b.n	800a516 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	795b      	ldrb	r3, [r3, #5]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fbe1 	bl	800ac38 <USBH_LL_GetURBState>
 800a476:	4603      	mov	r3, r0
 800a478:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d105      	bne.n	800a48c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	220d      	movs	r2, #13
 800a488:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a48a:	e043      	b.n	800a514 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a48c:	7bbb      	ldrb	r3, [r7, #14]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d103      	bne.n	800a49a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2209      	movs	r2, #9
 800a496:	761a      	strb	r2, [r3, #24]
      break;
 800a498:	e03c      	b.n	800a514 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	d139      	bne.n	800a514 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	220b      	movs	r2, #11
 800a4a4:	761a      	strb	r2, [r3, #24]
      break;
 800a4a6:	e035      	b.n	800a514 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7e5b      	ldrb	r3, [r3, #25]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	b2da      	uxtb	r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	765a      	strb	r2, [r3, #25]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7e5b      	ldrb	r3, [r3, #25]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d806      	bhi.n	800a4ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a4c8:	e025      	b.n	800a516 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4d0:	2106      	movs	r1, #6
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	795b      	ldrb	r3, [r3, #5]
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f90c 	bl	800a700 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	791b      	ldrb	r3, [r3, #4]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f906 	bl	800a700 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fe:	e00a      	b.n	800a516 <USBH_HandleControl+0x2de>

    default:
      break;
 800a500:	bf00      	nop
 800a502:	e008      	b.n	800a516 <USBH_HandleControl+0x2de>
      break;
 800a504:	bf00      	nop
 800a506:	e006      	b.n	800a516 <USBH_HandleControl+0x2de>
      break;
 800a508:	bf00      	nop
 800a50a:	e004      	b.n	800a516 <USBH_HandleControl+0x2de>
      break;
 800a50c:	bf00      	nop
 800a50e:	e002      	b.n	800a516 <USBH_HandleControl+0x2de>
      break;
 800a510:	bf00      	nop
 800a512:	e000      	b.n	800a516 <USBH_HandleControl+0x2de>
      break;
 800a514:	bf00      	nop
  }

  return status;
 800a516:	7bfb      	ldrb	r3, [r7, #15]
}
 800a518:	4618      	mov	r0, r3
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}

0800a520 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af04      	add	r7, sp, #16
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a52e:	79f9      	ldrb	r1, [r7, #7]
 800a530:	2300      	movs	r3, #0
 800a532:	9303      	str	r3, [sp, #12]
 800a534:	2308      	movs	r3, #8
 800a536:	9302      	str	r3, [sp, #8]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	9301      	str	r3, [sp, #4]
 800a53c:	2300      	movs	r3, #0
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f000 fb46 	bl	800abd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af04      	add	r7, sp, #16
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	4611      	mov	r1, r2
 800a560:	461a      	mov	r2, r3
 800a562:	460b      	mov	r3, r1
 800a564:	80fb      	strh	r3, [r7, #6]
 800a566:	4613      	mov	r3, r2
 800a568:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a570:	2b00      	cmp	r3, #0
 800a572:	d001      	beq.n	800a578 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a574:	2300      	movs	r3, #0
 800a576:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a578:	7979      	ldrb	r1, [r7, #5]
 800a57a:	7e3b      	ldrb	r3, [r7, #24]
 800a57c:	9303      	str	r3, [sp, #12]
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	9302      	str	r3, [sp, #8]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	9301      	str	r3, [sp, #4]
 800a586:	2301      	movs	r3, #1
 800a588:	9300      	str	r3, [sp, #0]
 800a58a:	2300      	movs	r3, #0
 800a58c:	2200      	movs	r2, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 fb21 	bl	800abd6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b088      	sub	sp, #32
 800a5a2:	af04      	add	r7, sp, #16
 800a5a4:	60f8      	str	r0, [r7, #12]
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	80fb      	strh	r3, [r7, #6]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5b4:	7979      	ldrb	r1, [r7, #5]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	88fb      	ldrh	r3, [r7, #6]
 800a5bc:	9302      	str	r3, [sp, #8]
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	9301      	str	r3, [sp, #4]
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fb03 	bl	800abd6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a5d0:	2300      	movs	r3, #0

}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b088      	sub	sp, #32
 800a5de:	af04      	add	r7, sp, #16
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	4611      	mov	r1, r2
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	80fb      	strh	r3, [r7, #6]
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d001      	beq.n	800a5fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5fe:	7979      	ldrb	r1, [r7, #5]
 800a600:	7e3b      	ldrb	r3, [r7, #24]
 800a602:	9303      	str	r3, [sp, #12]
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	9302      	str	r3, [sp, #8]
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	9301      	str	r3, [sp, #4]
 800a60c:	2301      	movs	r3, #1
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	2302      	movs	r3, #2
 800a612:	2200      	movs	r2, #0
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 fade 	bl	800abd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af04      	add	r7, sp, #16
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4611      	mov	r1, r2
 800a630:	461a      	mov	r2, r3
 800a632:	460b      	mov	r3, r1
 800a634:	80fb      	strh	r3, [r7, #6]
 800a636:	4613      	mov	r3, r2
 800a638:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a63a:	7979      	ldrb	r1, [r7, #5]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	88fb      	ldrh	r3, [r7, #6]
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2301      	movs	r3, #1
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2302      	movs	r3, #2
 800a64e:	2201      	movs	r2, #1
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 fac0 	bl	800abd6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af04      	add	r7, sp, #16
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	4608      	mov	r0, r1
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	4603      	mov	r3, r0
 800a670:	70fb      	strb	r3, [r7, #3]
 800a672:	460b      	mov	r3, r1
 800a674:	70bb      	strb	r3, [r7, #2]
 800a676:	4613      	mov	r3, r2
 800a678:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a67a:	7878      	ldrb	r0, [r7, #1]
 800a67c:	78ba      	ldrb	r2, [r7, #2]
 800a67e:	78f9      	ldrb	r1, [r7, #3]
 800a680:	8b3b      	ldrh	r3, [r7, #24]
 800a682:	9302      	str	r3, [sp, #8]
 800a684:	7d3b      	ldrb	r3, [r7, #20]
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	7c3b      	ldrb	r3, [r7, #16]
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	4603      	mov	r3, r0
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fa53 	bl	800ab3a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b082      	sub	sp, #8
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a6aa:	78fb      	ldrb	r3, [r7, #3]
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa72 	bl	800ab98 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3708      	adds	r7, #8
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	bd80      	pop	{r7, pc}

0800a6be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a6be:	b580      	push	{r7, lr}
 800a6c0:	b084      	sub	sp, #16
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	460b      	mov	r3, r1
 800a6c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f836 	bl	800a73c <USBH_GetFreePipe>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a6d4:	89fb      	ldrh	r3, [r7, #14]
 800a6d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d00a      	beq.n	800a6f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	89fb      	ldrh	r3, [r7, #14]
 800a6e2:	f003 030f 	and.w	r3, r3, #15
 800a6e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	33e0      	adds	r3, #224	@ 0xe0
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	440b      	add	r3, r1
 800a6f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a6f4:	89fb      	ldrh	r3, [r7, #14]
 800a6f6:	b2db      	uxtb	r3, r3
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a70c:	78fb      	ldrb	r3, [r7, #3]
 800a70e:	2b0f      	cmp	r3, #15
 800a710:	d80d      	bhi.n	800a72e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a712:	78fb      	ldrb	r3, [r7, #3]
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	33e0      	adds	r3, #224	@ 0xe0
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	78fb      	ldrb	r3, [r7, #3]
 800a720:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a724:	6879      	ldr	r1, [r7, #4]
 800a726:	33e0      	adds	r3, #224	@ 0xe0
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
 800a74c:	e00f      	b.n	800a76e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	687a      	ldr	r2, [r7, #4]
 800a752:	33e0      	adds	r3, #224	@ 0xe0
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	4413      	add	r3, r2
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d102      	bne.n	800a768 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	b29b      	uxth	r3, r3
 800a766:	e007      	b.n	800a778 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	3301      	adds	r3, #1
 800a76c:	73fb      	strb	r3, [r7, #15]
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	2b0f      	cmp	r3, #15
 800a772:	d9ec      	bls.n	800a74e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a774:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a788:	2201      	movs	r2, #1
 800a78a:	490e      	ldr	r1, [pc, #56]	@ (800a7c4 <MX_USB_HOST_Init+0x40>)
 800a78c:	480e      	ldr	r0, [pc, #56]	@ (800a7c8 <MX_USB_HOST_Init+0x44>)
 800a78e:	f7fe fb15 	bl	8008dbc <USBH_Init>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a798:	f7f6 fc84 	bl	80010a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a79c:	490b      	ldr	r1, [pc, #44]	@ (800a7cc <MX_USB_HOST_Init+0x48>)
 800a79e:	480a      	ldr	r0, [pc, #40]	@ (800a7c8 <MX_USB_HOST_Init+0x44>)
 800a7a0:	f7fe fbb9 	bl	8008f16 <USBH_RegisterClass>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d001      	beq.n	800a7ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a7aa:	f7f6 fc7b 	bl	80010a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a7ae:	4806      	ldr	r0, [pc, #24]	@ (800a7c8 <MX_USB_HOST_Init+0x44>)
 800a7b0:	f7fe fc3d 	bl	800902e <USBH_Start>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d001      	beq.n	800a7be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a7ba:	f7f6 fc73 	bl	80010a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a7be:	bf00      	nop
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	0800a7e5 	.word	0x0800a7e5
 800a7c8:	200001f8 	.word	0x200001f8
 800a7cc:	2000000c 	.word	0x2000000c

0800a7d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a7d4:	4802      	ldr	r0, [pc, #8]	@ (800a7e0 <MX_USB_HOST_Process+0x10>)
 800a7d6:	f7fe fc3b 	bl	8009050 <USBH_Process>
}
 800a7da:	bf00      	nop
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	200001f8 	.word	0x200001f8

0800a7e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d819      	bhi.n	800a82c <USBH_UserProcess+0x48>
 800a7f8:	a201      	add	r2, pc, #4	@ (adr r2, 800a800 <USBH_UserProcess+0x1c>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a82d 	.word	0x0800a82d
 800a804:	0800a81d 	.word	0x0800a81d
 800a808:	0800a82d 	.word	0x0800a82d
 800a80c:	0800a825 	.word	0x0800a825
 800a810:	0800a815 	.word	0x0800a815
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a814:	4b09      	ldr	r3, [pc, #36]	@ (800a83c <USBH_UserProcess+0x58>)
 800a816:	2203      	movs	r2, #3
 800a818:	701a      	strb	r2, [r3, #0]
  break;
 800a81a:	e008      	b.n	800a82e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a81c:	4b07      	ldr	r3, [pc, #28]	@ (800a83c <USBH_UserProcess+0x58>)
 800a81e:	2202      	movs	r2, #2
 800a820:	701a      	strb	r2, [r3, #0]
  break;
 800a822:	e004      	b.n	800a82e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a824:	4b05      	ldr	r3, [pc, #20]	@ (800a83c <USBH_UserProcess+0x58>)
 800a826:	2201      	movs	r2, #1
 800a828:	701a      	strb	r2, [r3, #0]
  break;
 800a82a:	e000      	b.n	800a82e <USBH_UserProcess+0x4a>

  default:
  break;
 800a82c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a82e:	bf00      	nop
 800a830:	370c      	adds	r7, #12
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	200005d0 	.word	0x200005d0

0800a840 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b08a      	sub	sp, #40	@ 0x28
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a848:	f107 0314 	add.w	r3, r7, #20
 800a84c:	2200      	movs	r2, #0
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	605a      	str	r2, [r3, #4]
 800a852:	609a      	str	r2, [r3, #8]
 800a854:	60da      	str	r2, [r3, #12]
 800a856:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a860:	d147      	bne.n	800a8f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a862:	2300      	movs	r3, #0
 800a864:	613b      	str	r3, [r7, #16]
 800a866:	4b25      	ldr	r3, [pc, #148]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a86a:	4a24      	ldr	r2, [pc, #144]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a86c:	f043 0301 	orr.w	r3, r3, #1
 800a870:	6313      	str	r3, [r2, #48]	@ 0x30
 800a872:	4b22      	ldr	r3, [pc, #136]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	613b      	str	r3, [r7, #16]
 800a87c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a87e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a884:	2300      	movs	r3, #0
 800a886:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a888:	2300      	movs	r3, #0
 800a88a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a88c:	f107 0314 	add.w	r3, r7, #20
 800a890:	4619      	mov	r1, r3
 800a892:	481b      	ldr	r0, [pc, #108]	@ (800a900 <HAL_HCD_MspInit+0xc0>)
 800a894:	f7f8 f9cc 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a898:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a89c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a89e:	2302      	movs	r3, #2
 800a8a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a8aa:	230a      	movs	r3, #10
 800a8ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ae:	f107 0314 	add.w	r3, r7, #20
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4812      	ldr	r0, [pc, #72]	@ (800a900 <HAL_HCD_MspInit+0xc0>)
 800a8b6:	f7f8 f9bb 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a8ba:	4b10      	ldr	r3, [pc, #64]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a8bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8be:	4a0f      	ldr	r2, [pc, #60]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a8c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c4:	6353      	str	r3, [r2, #52]	@ 0x34
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a8cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8ce:	4a0b      	ldr	r2, [pc, #44]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a8d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a8d4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a8d6:	4b09      	ldr	r3, [pc, #36]	@ (800a8fc <HAL_HCD_MspInit+0xbc>)
 800a8d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8de:	60fb      	str	r3, [r7, #12]
 800a8e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2100      	movs	r1, #0
 800a8e6:	2043      	movs	r0, #67	@ 0x43
 800a8e8:	f7f8 f96b 	bl	8002bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8ec:	2043      	movs	r0, #67	@ 0x43
 800a8ee:	f7f8 f984 	bl	8002bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8f2:	bf00      	nop
 800a8f4:	3728      	adds	r7, #40	@ 0x28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40023800 	.word	0x40023800
 800a900:	40020000 	.word	0x40020000

0800a904 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a912:	4618      	mov	r0, r3
 800a914:	f7fe ff73 	bl	80097fe <USBH_LL_IncTimer>
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe ffab 	bl	800988a <USBH_LL_Connect>
}
 800a934:	bf00      	nop
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7fe ffb4 	bl	80098b8 <USBH_LL_Disconnect>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
 800a964:	4613      	mov	r3, r2
 800a966:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe ff65 	bl	8009852 <USBH_LL_PortEnabled>
}
 800a988:	bf00      	nop
 800a98a:	3708      	adds	r7, #8
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe ff65 	bl	800986e <USBH_LL_PortDisabled>
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	d12a      	bne.n	800aa14 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a9be:	4a18      	ldr	r2, [pc, #96]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	4a15      	ldr	r2, [pc, #84]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a9ce:	4b14      	ldr	r3, [pc, #80]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a9d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a9d6:	4b12      	ldr	r3, [pc, #72]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9d8:	2208      	movs	r2, #8
 800a9da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a9dc:	4b10      	ldr	r3, [pc, #64]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9de:	2201      	movs	r2, #1
 800a9e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a9e2:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a9e8:	4b0d      	ldr	r3, [pc, #52]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9ea:	2202      	movs	r2, #2
 800a9ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a9f4:	480a      	ldr	r0, [pc, #40]	@ (800aa20 <USBH_LL_Init+0x74>)
 800a9f6:	f7f8 fad0 	bl	8002f9a <HAL_HCD_Init>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aa00:	f7f6 fb50 	bl	80010a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aa04:	4806      	ldr	r0, [pc, #24]	@ (800aa20 <USBH_LL_Init+0x74>)
 800aa06:	f7f8 ff31 	bl	800386c <HAL_HCD_GetCurrentFrame>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7fe fee6 	bl	80097e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	200005d4 	.word	0x200005d4

0800aa24 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7f8 fe9e 	bl	800377c <HAL_HCD_Start>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f000 f95e 	bl	800ad08 <USBH_Get_USB_Status>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b084      	sub	sp, #16
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7f8 fea6 	bl	80037c2 <HAL_HCD_Stop>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f000 f943 	bl	800ad08 <USBH_Get_USB_Status>
 800aa82:	4603      	mov	r3, r0
 800aa84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f7f8 fef0 	bl	8003888 <HAL_HCD_GetCurrentSpeed>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d00c      	beq.n	800aac8 <USBH_LL_GetSpeed+0x38>
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d80d      	bhi.n	800aace <USBH_LL_GetSpeed+0x3e>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <USBH_LL_GetSpeed+0x2c>
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d003      	beq.n	800aac2 <USBH_LL_GetSpeed+0x32>
 800aaba:	e008      	b.n	800aace <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73fb      	strb	r3, [r7, #15]
    break;
 800aac0:	e008      	b.n	800aad4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800aac2:	2301      	movs	r3, #1
 800aac4:	73fb      	strb	r3, [r7, #15]
    break;
 800aac6:	e005      	b.n	800aad4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aac8:	2302      	movs	r3, #2
 800aaca:	73fb      	strb	r3, [r7, #15]
    break;
 800aacc:	e002      	b.n	800aad4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800aace:	2301      	movs	r3, #1
 800aad0:	73fb      	strb	r3, [r7, #15]
    break;
 800aad2:	bf00      	nop
  }
  return  speed;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aade:	b580      	push	{r7, lr}
 800aae0:	b084      	sub	sp, #16
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7f8 fe81 	bl	80037fc <HAL_HCD_ResetPort>
 800aafa:	4603      	mov	r3, r0
 800aafc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
 800ab00:	4618      	mov	r0, r3
 800ab02:	f000 f901 	bl	800ad08 <USBH_Get_USB_Status>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab26:	78fa      	ldrb	r2, [r7, #3]
 800ab28:	4611      	mov	r1, r2
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f8 fe89 	bl	8003842 <HAL_HCD_HC_GetXferCount>
 800ab30:	4603      	mov	r3, r0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab3a:	b590      	push	{r4, r7, lr}
 800ab3c:	b089      	sub	sp, #36	@ 0x24
 800ab3e:	af04      	add	r7, sp, #16
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	4608      	mov	r0, r1
 800ab44:	4611      	mov	r1, r2
 800ab46:	461a      	mov	r2, r3
 800ab48:	4603      	mov	r3, r0
 800ab4a:	70fb      	strb	r3, [r7, #3]
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	70bb      	strb	r3, [r7, #2]
 800ab50:	4613      	mov	r3, r2
 800ab52:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ab62:	787c      	ldrb	r4, [r7, #1]
 800ab64:	78ba      	ldrb	r2, [r7, #2]
 800ab66:	78f9      	ldrb	r1, [r7, #3]
 800ab68:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ab6a:	9302      	str	r3, [sp, #8]
 800ab6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ab76:	9300      	str	r3, [sp, #0]
 800ab78:	4623      	mov	r3, r4
 800ab7a:	f7f8 fa75 	bl	8003068 <HAL_HCD_HC_Init>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 f8bf 	bl	800ad08 <USBH_Get_USB_Status>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd90      	pop	{r4, r7, pc}

0800ab98 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abb2:	78fa      	ldrb	r2, [r7, #3]
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f8 fb0e 	bl	80031d8 <HAL_HCD_HC_Halt>
 800abbc:	4603      	mov	r3, r0
 800abbe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 f8a0 	bl	800ad08 <USBH_Get_USB_Status>
 800abc8:	4603      	mov	r3, r0
 800abca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800abd6:	b590      	push	{r4, r7, lr}
 800abd8:	b089      	sub	sp, #36	@ 0x24
 800abda:	af04      	add	r7, sp, #16
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	4608      	mov	r0, r1
 800abe0:	4611      	mov	r1, r2
 800abe2:	461a      	mov	r2, r3
 800abe4:	4603      	mov	r3, r0
 800abe6:	70fb      	strb	r3, [r7, #3]
 800abe8:	460b      	mov	r3, r1
 800abea:	70bb      	strb	r3, [r7, #2]
 800abec:	4613      	mov	r3, r2
 800abee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800abfe:	787c      	ldrb	r4, [r7, #1]
 800ac00:	78ba      	ldrb	r2, [r7, #2]
 800ac02:	78f9      	ldrb	r1, [r7, #3]
 800ac04:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ac08:	9303      	str	r3, [sp, #12]
 800ac0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	9301      	str	r3, [sp, #4]
 800ac12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	4623      	mov	r3, r4
 800ac1a:	f7f8 fb01 	bl	8003220 <HAL_HCD_HC_SubmitRequest>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f86f 	bl	800ad08 <USBH_Get_USB_Status>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd90      	pop	{r4, r7, pc}

0800ac38 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f8 fde2 	bl	8003818 <HAL_HCD_HC_GetURBState>
 800ac54:	4603      	mov	r3, r0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3708      	adds	r7, #8
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b082      	sub	sp, #8
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d103      	bne.n	800ac7c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f000 f872 	bl	800ad60 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ac7c:	20c8      	movs	r0, #200	@ 0xc8
 800ac7e:	f7f7 fea1 	bl	80029c4 <HAL_Delay>
  return USBH_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3708      	adds	r7, #8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	460b      	mov	r3, r1
 800ac96:	70fb      	strb	r3, [r7, #3]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aca2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aca4:	78fa      	ldrb	r2, [r7, #3]
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	4613      	mov	r3, r2
 800acaa:	011b      	lsls	r3, r3, #4
 800acac:	1a9b      	subs	r3, r3, r2
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	440b      	add	r3, r1
 800acb2:	3317      	adds	r3, #23
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800acba:	78fa      	ldrb	r2, [r7, #3]
 800acbc:	68f9      	ldr	r1, [r7, #12]
 800acbe:	4613      	mov	r3, r2
 800acc0:	011b      	lsls	r3, r3, #4
 800acc2:	1a9b      	subs	r3, r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	440b      	add	r3, r1
 800acc8:	333c      	adds	r3, #60	@ 0x3c
 800acca:	78ba      	ldrb	r2, [r7, #2]
 800accc:	701a      	strb	r2, [r3, #0]
 800acce:	e009      	b.n	800ace4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800acd0:	78fa      	ldrb	r2, [r7, #3]
 800acd2:	68f9      	ldr	r1, [r7, #12]
 800acd4:	4613      	mov	r3, r2
 800acd6:	011b      	lsls	r3, r3, #4
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	333d      	adds	r3, #61	@ 0x3d
 800ace0:	78ba      	ldrb	r2, [r7, #2]
 800ace2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b082      	sub	sp, #8
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7f7 fe62 	bl	80029c4 <HAL_Delay>
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d817      	bhi.n	800ad4c <USBH_Get_USB_Status+0x44>
 800ad1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <USBH_Get_USB_Status+0x1c>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad3b 	.word	0x0800ad3b
 800ad2c:	0800ad41 	.word	0x0800ad41
 800ad30:	0800ad47 	.word	0x0800ad47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
    break;
 800ad38:	e00b      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3e:	e008      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad40:	2301      	movs	r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]
    break;
 800ad44:	e005      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4a:	e002      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad50:	bf00      	nop
  }
  return usb_status;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ad6a:	79fb      	ldrb	r3, [r7, #7]
 800ad6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ad6e:	79fb      	ldrb	r3, [r7, #7]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73fb      	strb	r3, [r7, #15]
 800ad78:	e001      	b.n	800ad7e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	461a      	mov	r2, r3
 800ad82:	2101      	movs	r1, #1
 800ad84:	4803      	ldr	r0, [pc, #12]	@ (800ad94 <MX_DriverVbusFS+0x34>)
 800ad86:	f7f8 f8ef 	bl	8002f68 <HAL_GPIO_WritePin>
}
 800ad8a:	bf00      	nop
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	40020800 	.word	0x40020800

0800ad98 <malloc>:
 800ad98:	4b02      	ldr	r3, [pc, #8]	@ (800ada4 <malloc+0xc>)
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	6818      	ldr	r0, [r3, #0]
 800ad9e:	f000 b82d 	b.w	800adfc <_malloc_r>
 800ada2:	bf00      	nop
 800ada4:	20000038 	.word	0x20000038

0800ada8 <free>:
 800ada8:	4b02      	ldr	r3, [pc, #8]	@ (800adb4 <free+0xc>)
 800adaa:	4601      	mov	r1, r0
 800adac:	6818      	ldr	r0, [r3, #0]
 800adae:	f000 bb69 	b.w	800b484 <_free_r>
 800adb2:	bf00      	nop
 800adb4:	20000038 	.word	0x20000038

0800adb8 <sbrk_aligned>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	4e0f      	ldr	r6, [pc, #60]	@ (800adf8 <sbrk_aligned+0x40>)
 800adbc:	460c      	mov	r4, r1
 800adbe:	6831      	ldr	r1, [r6, #0]
 800adc0:	4605      	mov	r5, r0
 800adc2:	b911      	cbnz	r1, 800adca <sbrk_aligned+0x12>
 800adc4:	f000 fb0e 	bl	800b3e4 <_sbrk_r>
 800adc8:	6030      	str	r0, [r6, #0]
 800adca:	4621      	mov	r1, r4
 800adcc:	4628      	mov	r0, r5
 800adce:	f000 fb09 	bl	800b3e4 <_sbrk_r>
 800add2:	1c43      	adds	r3, r0, #1
 800add4:	d103      	bne.n	800adde <sbrk_aligned+0x26>
 800add6:	f04f 34ff 	mov.w	r4, #4294967295
 800adda:	4620      	mov	r0, r4
 800addc:	bd70      	pop	{r4, r5, r6, pc}
 800adde:	1cc4      	adds	r4, r0, #3
 800ade0:	f024 0403 	bic.w	r4, r4, #3
 800ade4:	42a0      	cmp	r0, r4
 800ade6:	d0f8      	beq.n	800adda <sbrk_aligned+0x22>
 800ade8:	1a21      	subs	r1, r4, r0
 800adea:	4628      	mov	r0, r5
 800adec:	f000 fafa 	bl	800b3e4 <_sbrk_r>
 800adf0:	3001      	adds	r0, #1
 800adf2:	d1f2      	bne.n	800adda <sbrk_aligned+0x22>
 800adf4:	e7ef      	b.n	800add6 <sbrk_aligned+0x1e>
 800adf6:	bf00      	nop
 800adf8:	200009b4 	.word	0x200009b4

0800adfc <_malloc_r>:
 800adfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae00:	1ccd      	adds	r5, r1, #3
 800ae02:	f025 0503 	bic.w	r5, r5, #3
 800ae06:	3508      	adds	r5, #8
 800ae08:	2d0c      	cmp	r5, #12
 800ae0a:	bf38      	it	cc
 800ae0c:	250c      	movcc	r5, #12
 800ae0e:	2d00      	cmp	r5, #0
 800ae10:	4606      	mov	r6, r0
 800ae12:	db01      	blt.n	800ae18 <_malloc_r+0x1c>
 800ae14:	42a9      	cmp	r1, r5
 800ae16:	d904      	bls.n	800ae22 <_malloc_r+0x26>
 800ae18:	230c      	movs	r3, #12
 800ae1a:	6033      	str	r3, [r6, #0]
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aef8 <_malloc_r+0xfc>
 800ae26:	f000 f869 	bl	800aefc <__malloc_lock>
 800ae2a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae2e:	461c      	mov	r4, r3
 800ae30:	bb44      	cbnz	r4, 800ae84 <_malloc_r+0x88>
 800ae32:	4629      	mov	r1, r5
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7ff ffbf 	bl	800adb8 <sbrk_aligned>
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	4604      	mov	r4, r0
 800ae3e:	d158      	bne.n	800aef2 <_malloc_r+0xf6>
 800ae40:	f8d8 4000 	ldr.w	r4, [r8]
 800ae44:	4627      	mov	r7, r4
 800ae46:	2f00      	cmp	r7, #0
 800ae48:	d143      	bne.n	800aed2 <_malloc_r+0xd6>
 800ae4a:	2c00      	cmp	r4, #0
 800ae4c:	d04b      	beq.n	800aee6 <_malloc_r+0xea>
 800ae4e:	6823      	ldr	r3, [r4, #0]
 800ae50:	4639      	mov	r1, r7
 800ae52:	4630      	mov	r0, r6
 800ae54:	eb04 0903 	add.w	r9, r4, r3
 800ae58:	f000 fac4 	bl	800b3e4 <_sbrk_r>
 800ae5c:	4581      	cmp	r9, r0
 800ae5e:	d142      	bne.n	800aee6 <_malloc_r+0xea>
 800ae60:	6821      	ldr	r1, [r4, #0]
 800ae62:	1a6d      	subs	r5, r5, r1
 800ae64:	4629      	mov	r1, r5
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ffa6 	bl	800adb8 <sbrk_aligned>
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d03a      	beq.n	800aee6 <_malloc_r+0xea>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	442b      	add	r3, r5
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	f8d8 3000 	ldr.w	r3, [r8]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	bb62      	cbnz	r2, 800aed8 <_malloc_r+0xdc>
 800ae7e:	f8c8 7000 	str.w	r7, [r8]
 800ae82:	e00f      	b.n	800aea4 <_malloc_r+0xa8>
 800ae84:	6822      	ldr	r2, [r4, #0]
 800ae86:	1b52      	subs	r2, r2, r5
 800ae88:	d420      	bmi.n	800aecc <_malloc_r+0xd0>
 800ae8a:	2a0b      	cmp	r2, #11
 800ae8c:	d917      	bls.n	800aebe <_malloc_r+0xc2>
 800ae8e:	1961      	adds	r1, r4, r5
 800ae90:	42a3      	cmp	r3, r4
 800ae92:	6025      	str	r5, [r4, #0]
 800ae94:	bf18      	it	ne
 800ae96:	6059      	strne	r1, [r3, #4]
 800ae98:	6863      	ldr	r3, [r4, #4]
 800ae9a:	bf08      	it	eq
 800ae9c:	f8c8 1000 	streq.w	r1, [r8]
 800aea0:	5162      	str	r2, [r4, r5]
 800aea2:	604b      	str	r3, [r1, #4]
 800aea4:	4630      	mov	r0, r6
 800aea6:	f000 f82f 	bl	800af08 <__malloc_unlock>
 800aeaa:	f104 000b 	add.w	r0, r4, #11
 800aeae:	1d23      	adds	r3, r4, #4
 800aeb0:	f020 0007 	bic.w	r0, r0, #7
 800aeb4:	1ac2      	subs	r2, r0, r3
 800aeb6:	bf1c      	itt	ne
 800aeb8:	1a1b      	subne	r3, r3, r0
 800aeba:	50a3      	strne	r3, [r4, r2]
 800aebc:	e7af      	b.n	800ae1e <_malloc_r+0x22>
 800aebe:	6862      	ldr	r2, [r4, #4]
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	bf0c      	ite	eq
 800aec4:	f8c8 2000 	streq.w	r2, [r8]
 800aec8:	605a      	strne	r2, [r3, #4]
 800aeca:	e7eb      	b.n	800aea4 <_malloc_r+0xa8>
 800aecc:	4623      	mov	r3, r4
 800aece:	6864      	ldr	r4, [r4, #4]
 800aed0:	e7ae      	b.n	800ae30 <_malloc_r+0x34>
 800aed2:	463c      	mov	r4, r7
 800aed4:	687f      	ldr	r7, [r7, #4]
 800aed6:	e7b6      	b.n	800ae46 <_malloc_r+0x4a>
 800aed8:	461a      	mov	r2, r3
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	42a3      	cmp	r3, r4
 800aede:	d1fb      	bne.n	800aed8 <_malloc_r+0xdc>
 800aee0:	2300      	movs	r3, #0
 800aee2:	6053      	str	r3, [r2, #4]
 800aee4:	e7de      	b.n	800aea4 <_malloc_r+0xa8>
 800aee6:	230c      	movs	r3, #12
 800aee8:	6033      	str	r3, [r6, #0]
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 f80c 	bl	800af08 <__malloc_unlock>
 800aef0:	e794      	b.n	800ae1c <_malloc_r+0x20>
 800aef2:	6005      	str	r5, [r0, #0]
 800aef4:	e7d6      	b.n	800aea4 <_malloc_r+0xa8>
 800aef6:	bf00      	nop
 800aef8:	200009b8 	.word	0x200009b8

0800aefc <__malloc_lock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	@ (800af04 <__malloc_lock+0x8>)
 800aefe:	f000 babe 	b.w	800b47e <__retarget_lock_acquire_recursive>
 800af02:	bf00      	nop
 800af04:	20000afc 	.word	0x20000afc

0800af08 <__malloc_unlock>:
 800af08:	4801      	ldr	r0, [pc, #4]	@ (800af10 <__malloc_unlock+0x8>)
 800af0a:	f000 bab9 	b.w	800b480 <__retarget_lock_release_recursive>
 800af0e:	bf00      	nop
 800af10:	20000afc 	.word	0x20000afc

0800af14 <std>:
 800af14:	2300      	movs	r3, #0
 800af16:	b510      	push	{r4, lr}
 800af18:	4604      	mov	r4, r0
 800af1a:	e9c0 3300 	strd	r3, r3, [r0]
 800af1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af22:	6083      	str	r3, [r0, #8]
 800af24:	8181      	strh	r1, [r0, #12]
 800af26:	6643      	str	r3, [r0, #100]	@ 0x64
 800af28:	81c2      	strh	r2, [r0, #14]
 800af2a:	6183      	str	r3, [r0, #24]
 800af2c:	4619      	mov	r1, r3
 800af2e:	2208      	movs	r2, #8
 800af30:	305c      	adds	r0, #92	@ 0x5c
 800af32:	f000 fa1b 	bl	800b36c <memset>
 800af36:	4b0d      	ldr	r3, [pc, #52]	@ (800af6c <std+0x58>)
 800af38:	6263      	str	r3, [r4, #36]	@ 0x24
 800af3a:	4b0d      	ldr	r3, [pc, #52]	@ (800af70 <std+0x5c>)
 800af3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800af3e:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <std+0x60>)
 800af40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800af42:	4b0d      	ldr	r3, [pc, #52]	@ (800af78 <std+0x64>)
 800af44:	6323      	str	r3, [r4, #48]	@ 0x30
 800af46:	4b0d      	ldr	r3, [pc, #52]	@ (800af7c <std+0x68>)
 800af48:	6224      	str	r4, [r4, #32]
 800af4a:	429c      	cmp	r4, r3
 800af4c:	d006      	beq.n	800af5c <std+0x48>
 800af4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800af52:	4294      	cmp	r4, r2
 800af54:	d002      	beq.n	800af5c <std+0x48>
 800af56:	33d0      	adds	r3, #208	@ 0xd0
 800af58:	429c      	cmp	r4, r3
 800af5a:	d105      	bne.n	800af68 <std+0x54>
 800af5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800af60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af64:	f000 ba8a 	b.w	800b47c <__retarget_lock_init_recursive>
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	bf00      	nop
 800af6c:	0800b26d 	.word	0x0800b26d
 800af70:	0800b28f 	.word	0x0800b28f
 800af74:	0800b2c7 	.word	0x0800b2c7
 800af78:	0800b2eb 	.word	0x0800b2eb
 800af7c:	200009bc 	.word	0x200009bc

0800af80 <stdio_exit_handler>:
 800af80:	4a02      	ldr	r2, [pc, #8]	@ (800af8c <stdio_exit_handler+0xc>)
 800af82:	4903      	ldr	r1, [pc, #12]	@ (800af90 <stdio_exit_handler+0x10>)
 800af84:	4803      	ldr	r0, [pc, #12]	@ (800af94 <stdio_exit_handler+0x14>)
 800af86:	f000 b869 	b.w	800b05c <_fwalk_sglue>
 800af8a:	bf00      	nop
 800af8c:	2000002c 	.word	0x2000002c
 800af90:	0800bbe9 	.word	0x0800bbe9
 800af94:	2000003c 	.word	0x2000003c

0800af98 <cleanup_stdio>:
 800af98:	6841      	ldr	r1, [r0, #4]
 800af9a:	4b0c      	ldr	r3, [pc, #48]	@ (800afcc <cleanup_stdio+0x34>)
 800af9c:	4299      	cmp	r1, r3
 800af9e:	b510      	push	{r4, lr}
 800afa0:	4604      	mov	r4, r0
 800afa2:	d001      	beq.n	800afa8 <cleanup_stdio+0x10>
 800afa4:	f000 fe20 	bl	800bbe8 <_fflush_r>
 800afa8:	68a1      	ldr	r1, [r4, #8]
 800afaa:	4b09      	ldr	r3, [pc, #36]	@ (800afd0 <cleanup_stdio+0x38>)
 800afac:	4299      	cmp	r1, r3
 800afae:	d002      	beq.n	800afb6 <cleanup_stdio+0x1e>
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 fe19 	bl	800bbe8 <_fflush_r>
 800afb6:	68e1      	ldr	r1, [r4, #12]
 800afb8:	4b06      	ldr	r3, [pc, #24]	@ (800afd4 <cleanup_stdio+0x3c>)
 800afba:	4299      	cmp	r1, r3
 800afbc:	d004      	beq.n	800afc8 <cleanup_stdio+0x30>
 800afbe:	4620      	mov	r0, r4
 800afc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afc4:	f000 be10 	b.w	800bbe8 <_fflush_r>
 800afc8:	bd10      	pop	{r4, pc}
 800afca:	bf00      	nop
 800afcc:	200009bc 	.word	0x200009bc
 800afd0:	20000a24 	.word	0x20000a24
 800afd4:	20000a8c 	.word	0x20000a8c

0800afd8 <global_stdio_init.part.0>:
 800afd8:	b510      	push	{r4, lr}
 800afda:	4b0b      	ldr	r3, [pc, #44]	@ (800b008 <global_stdio_init.part.0+0x30>)
 800afdc:	4c0b      	ldr	r4, [pc, #44]	@ (800b00c <global_stdio_init.part.0+0x34>)
 800afde:	4a0c      	ldr	r2, [pc, #48]	@ (800b010 <global_stdio_init.part.0+0x38>)
 800afe0:	601a      	str	r2, [r3, #0]
 800afe2:	4620      	mov	r0, r4
 800afe4:	2200      	movs	r2, #0
 800afe6:	2104      	movs	r1, #4
 800afe8:	f7ff ff94 	bl	800af14 <std>
 800afec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800aff0:	2201      	movs	r2, #1
 800aff2:	2109      	movs	r1, #9
 800aff4:	f7ff ff8e 	bl	800af14 <std>
 800aff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800affc:	2202      	movs	r2, #2
 800affe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b002:	2112      	movs	r1, #18
 800b004:	f7ff bf86 	b.w	800af14 <std>
 800b008:	20000af4 	.word	0x20000af4
 800b00c:	200009bc 	.word	0x200009bc
 800b010:	0800af81 	.word	0x0800af81

0800b014 <__sfp_lock_acquire>:
 800b014:	4801      	ldr	r0, [pc, #4]	@ (800b01c <__sfp_lock_acquire+0x8>)
 800b016:	f000 ba32 	b.w	800b47e <__retarget_lock_acquire_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000afd 	.word	0x20000afd

0800b020 <__sfp_lock_release>:
 800b020:	4801      	ldr	r0, [pc, #4]	@ (800b028 <__sfp_lock_release+0x8>)
 800b022:	f000 ba2d 	b.w	800b480 <__retarget_lock_release_recursive>
 800b026:	bf00      	nop
 800b028:	20000afd 	.word	0x20000afd

0800b02c <__sinit>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	4604      	mov	r4, r0
 800b030:	f7ff fff0 	bl	800b014 <__sfp_lock_acquire>
 800b034:	6a23      	ldr	r3, [r4, #32]
 800b036:	b11b      	cbz	r3, 800b040 <__sinit+0x14>
 800b038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b03c:	f7ff bff0 	b.w	800b020 <__sfp_lock_release>
 800b040:	4b04      	ldr	r3, [pc, #16]	@ (800b054 <__sinit+0x28>)
 800b042:	6223      	str	r3, [r4, #32]
 800b044:	4b04      	ldr	r3, [pc, #16]	@ (800b058 <__sinit+0x2c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1f5      	bne.n	800b038 <__sinit+0xc>
 800b04c:	f7ff ffc4 	bl	800afd8 <global_stdio_init.part.0>
 800b050:	e7f2      	b.n	800b038 <__sinit+0xc>
 800b052:	bf00      	nop
 800b054:	0800af99 	.word	0x0800af99
 800b058:	20000af4 	.word	0x20000af4

0800b05c <_fwalk_sglue>:
 800b05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b060:	4607      	mov	r7, r0
 800b062:	4688      	mov	r8, r1
 800b064:	4614      	mov	r4, r2
 800b066:	2600      	movs	r6, #0
 800b068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b06c:	f1b9 0901 	subs.w	r9, r9, #1
 800b070:	d505      	bpl.n	800b07e <_fwalk_sglue+0x22>
 800b072:	6824      	ldr	r4, [r4, #0]
 800b074:	2c00      	cmp	r4, #0
 800b076:	d1f7      	bne.n	800b068 <_fwalk_sglue+0xc>
 800b078:	4630      	mov	r0, r6
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	89ab      	ldrh	r3, [r5, #12]
 800b080:	2b01      	cmp	r3, #1
 800b082:	d907      	bls.n	800b094 <_fwalk_sglue+0x38>
 800b084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b088:	3301      	adds	r3, #1
 800b08a:	d003      	beq.n	800b094 <_fwalk_sglue+0x38>
 800b08c:	4629      	mov	r1, r5
 800b08e:	4638      	mov	r0, r7
 800b090:	47c0      	blx	r8
 800b092:	4306      	orrs	r6, r0
 800b094:	3568      	adds	r5, #104	@ 0x68
 800b096:	e7e9      	b.n	800b06c <_fwalk_sglue+0x10>

0800b098 <setvbuf>:
 800b098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b09c:	461d      	mov	r5, r3
 800b09e:	4b57      	ldr	r3, [pc, #348]	@ (800b1fc <setvbuf+0x164>)
 800b0a0:	681f      	ldr	r7, [r3, #0]
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	4690      	mov	r8, r2
 800b0a8:	b127      	cbz	r7, 800b0b4 <setvbuf+0x1c>
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	b913      	cbnz	r3, 800b0b4 <setvbuf+0x1c>
 800b0ae:	4638      	mov	r0, r7
 800b0b0:	f7ff ffbc 	bl	800b02c <__sinit>
 800b0b4:	f1b8 0f02 	cmp.w	r8, #2
 800b0b8:	d006      	beq.n	800b0c8 <setvbuf+0x30>
 800b0ba:	f1b8 0f01 	cmp.w	r8, #1
 800b0be:	f200 809a 	bhi.w	800b1f6 <setvbuf+0x15e>
 800b0c2:	2d00      	cmp	r5, #0
 800b0c4:	f2c0 8097 	blt.w	800b1f6 <setvbuf+0x15e>
 800b0c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0ca:	07d9      	lsls	r1, r3, #31
 800b0cc:	d405      	bmi.n	800b0da <setvbuf+0x42>
 800b0ce:	89a3      	ldrh	r3, [r4, #12]
 800b0d0:	059a      	lsls	r2, r3, #22
 800b0d2:	d402      	bmi.n	800b0da <setvbuf+0x42>
 800b0d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0d6:	f000 f9d2 	bl	800b47e <__retarget_lock_acquire_recursive>
 800b0da:	4621      	mov	r1, r4
 800b0dc:	4638      	mov	r0, r7
 800b0de:	f000 fd83 	bl	800bbe8 <_fflush_r>
 800b0e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0e4:	b141      	cbz	r1, 800b0f8 <setvbuf+0x60>
 800b0e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	d002      	beq.n	800b0f4 <setvbuf+0x5c>
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f000 f9c8 	bl	800b484 <_free_r>
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	61a3      	str	r3, [r4, #24]
 800b0fc:	6063      	str	r3, [r4, #4]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	061b      	lsls	r3, r3, #24
 800b102:	d503      	bpl.n	800b10c <setvbuf+0x74>
 800b104:	6921      	ldr	r1, [r4, #16]
 800b106:	4638      	mov	r0, r7
 800b108:	f000 f9bc 	bl	800b484 <_free_r>
 800b10c:	89a3      	ldrh	r3, [r4, #12]
 800b10e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b112:	f023 0303 	bic.w	r3, r3, #3
 800b116:	f1b8 0f02 	cmp.w	r8, #2
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	d061      	beq.n	800b1e2 <setvbuf+0x14a>
 800b11e:	ab01      	add	r3, sp, #4
 800b120:	466a      	mov	r2, sp
 800b122:	4621      	mov	r1, r4
 800b124:	4638      	mov	r0, r7
 800b126:	f000 fd87 	bl	800bc38 <__swhatbuf_r>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	4318      	orrs	r0, r3
 800b12e:	81a0      	strh	r0, [r4, #12]
 800b130:	bb2d      	cbnz	r5, 800b17e <setvbuf+0xe6>
 800b132:	9d00      	ldr	r5, [sp, #0]
 800b134:	4628      	mov	r0, r5
 800b136:	f7ff fe2f 	bl	800ad98 <malloc>
 800b13a:	4606      	mov	r6, r0
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d152      	bne.n	800b1e6 <setvbuf+0x14e>
 800b140:	f8dd 9000 	ldr.w	r9, [sp]
 800b144:	45a9      	cmp	r9, r5
 800b146:	d140      	bne.n	800b1ca <setvbuf+0x132>
 800b148:	f04f 35ff 	mov.w	r5, #4294967295
 800b14c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b150:	f043 0202 	orr.w	r2, r3, #2
 800b154:	81a2      	strh	r2, [r4, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	60a2      	str	r2, [r4, #8]
 800b15a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	6122      	str	r2, [r4, #16]
 800b162:	2201      	movs	r2, #1
 800b164:	6162      	str	r2, [r4, #20]
 800b166:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b168:	07d6      	lsls	r6, r2, #31
 800b16a:	d404      	bmi.n	800b176 <setvbuf+0xde>
 800b16c:	0598      	lsls	r0, r3, #22
 800b16e:	d402      	bmi.n	800b176 <setvbuf+0xde>
 800b170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b172:	f000 f985 	bl	800b480 <__retarget_lock_release_recursive>
 800b176:	4628      	mov	r0, r5
 800b178:	b003      	add	sp, #12
 800b17a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b17e:	2e00      	cmp	r6, #0
 800b180:	d0d8      	beq.n	800b134 <setvbuf+0x9c>
 800b182:	6a3b      	ldr	r3, [r7, #32]
 800b184:	b913      	cbnz	r3, 800b18c <setvbuf+0xf4>
 800b186:	4638      	mov	r0, r7
 800b188:	f7ff ff50 	bl	800b02c <__sinit>
 800b18c:	f1b8 0f01 	cmp.w	r8, #1
 800b190:	bf08      	it	eq
 800b192:	89a3      	ldrheq	r3, [r4, #12]
 800b194:	6026      	str	r6, [r4, #0]
 800b196:	bf04      	itt	eq
 800b198:	f043 0301 	orreq.w	r3, r3, #1
 800b19c:	81a3      	strheq	r3, [r4, #12]
 800b19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a2:	f013 0208 	ands.w	r2, r3, #8
 800b1a6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b1aa:	d01e      	beq.n	800b1ea <setvbuf+0x152>
 800b1ac:	07d9      	lsls	r1, r3, #31
 800b1ae:	bf41      	itttt	mi
 800b1b0:	2200      	movmi	r2, #0
 800b1b2:	426d      	negmi	r5, r5
 800b1b4:	60a2      	strmi	r2, [r4, #8]
 800b1b6:	61a5      	strmi	r5, [r4, #24]
 800b1b8:	bf58      	it	pl
 800b1ba:	60a5      	strpl	r5, [r4, #8]
 800b1bc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1be:	07d2      	lsls	r2, r2, #31
 800b1c0:	d401      	bmi.n	800b1c6 <setvbuf+0x12e>
 800b1c2:	059b      	lsls	r3, r3, #22
 800b1c4:	d513      	bpl.n	800b1ee <setvbuf+0x156>
 800b1c6:	2500      	movs	r5, #0
 800b1c8:	e7d5      	b.n	800b176 <setvbuf+0xde>
 800b1ca:	4648      	mov	r0, r9
 800b1cc:	f7ff fde4 	bl	800ad98 <malloc>
 800b1d0:	4606      	mov	r6, r0
 800b1d2:	2800      	cmp	r0, #0
 800b1d4:	d0b8      	beq.n	800b148 <setvbuf+0xb0>
 800b1d6:	89a3      	ldrh	r3, [r4, #12]
 800b1d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	464d      	mov	r5, r9
 800b1e0:	e7cf      	b.n	800b182 <setvbuf+0xea>
 800b1e2:	2500      	movs	r5, #0
 800b1e4:	e7b2      	b.n	800b14c <setvbuf+0xb4>
 800b1e6:	46a9      	mov	r9, r5
 800b1e8:	e7f5      	b.n	800b1d6 <setvbuf+0x13e>
 800b1ea:	60a2      	str	r2, [r4, #8]
 800b1ec:	e7e6      	b.n	800b1bc <setvbuf+0x124>
 800b1ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1f0:	f000 f946 	bl	800b480 <__retarget_lock_release_recursive>
 800b1f4:	e7e7      	b.n	800b1c6 <setvbuf+0x12e>
 800b1f6:	f04f 35ff 	mov.w	r5, #4294967295
 800b1fa:	e7bc      	b.n	800b176 <setvbuf+0xde>
 800b1fc:	20000038 	.word	0x20000038

0800b200 <sniprintf>:
 800b200:	b40c      	push	{r2, r3}
 800b202:	b530      	push	{r4, r5, lr}
 800b204:	4b18      	ldr	r3, [pc, #96]	@ (800b268 <sniprintf+0x68>)
 800b206:	1e0c      	subs	r4, r1, #0
 800b208:	681d      	ldr	r5, [r3, #0]
 800b20a:	b09d      	sub	sp, #116	@ 0x74
 800b20c:	da08      	bge.n	800b220 <sniprintf+0x20>
 800b20e:	238b      	movs	r3, #139	@ 0x8b
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f04f 30ff 	mov.w	r0, #4294967295
 800b216:	b01d      	add	sp, #116	@ 0x74
 800b218:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b21c:	b002      	add	sp, #8
 800b21e:	4770      	bx	lr
 800b220:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b224:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b22e:	bf14      	ite	ne
 800b230:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b234:	4623      	moveq	r3, r4
 800b236:	9304      	str	r3, [sp, #16]
 800b238:	9307      	str	r3, [sp, #28]
 800b23a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b23e:	9002      	str	r0, [sp, #8]
 800b240:	9006      	str	r0, [sp, #24]
 800b242:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b246:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b248:	ab21      	add	r3, sp, #132	@ 0x84
 800b24a:	a902      	add	r1, sp, #8
 800b24c:	4628      	mov	r0, r5
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	f000 f9be 	bl	800b5d0 <_svfiprintf_r>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	bfbc      	itt	lt
 800b258:	238b      	movlt	r3, #139	@ 0x8b
 800b25a:	602b      	strlt	r3, [r5, #0]
 800b25c:	2c00      	cmp	r4, #0
 800b25e:	d0da      	beq.n	800b216 <sniprintf+0x16>
 800b260:	9b02      	ldr	r3, [sp, #8]
 800b262:	2200      	movs	r2, #0
 800b264:	701a      	strb	r2, [r3, #0]
 800b266:	e7d6      	b.n	800b216 <sniprintf+0x16>
 800b268:	20000038 	.word	0x20000038

0800b26c <__sread>:
 800b26c:	b510      	push	{r4, lr}
 800b26e:	460c      	mov	r4, r1
 800b270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b274:	f000 f8a4 	bl	800b3c0 <_read_r>
 800b278:	2800      	cmp	r0, #0
 800b27a:	bfab      	itete	ge
 800b27c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b27e:	89a3      	ldrhlt	r3, [r4, #12]
 800b280:	181b      	addge	r3, r3, r0
 800b282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b286:	bfac      	ite	ge
 800b288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b28a:	81a3      	strhlt	r3, [r4, #12]
 800b28c:	bd10      	pop	{r4, pc}

0800b28e <__swrite>:
 800b28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b292:	461f      	mov	r7, r3
 800b294:	898b      	ldrh	r3, [r1, #12]
 800b296:	05db      	lsls	r3, r3, #23
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	4616      	mov	r6, r2
 800b29e:	d505      	bpl.n	800b2ac <__swrite+0x1e>
 800b2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f000 f878 	bl	800b39c <_lseek_r>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	4632      	mov	r2, r6
 800b2ba:	463b      	mov	r3, r7
 800b2bc:	4628      	mov	r0, r5
 800b2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2c2:	f000 b89f 	b.w	800b404 <_write_r>

0800b2c6 <__sseek>:
 800b2c6:	b510      	push	{r4, lr}
 800b2c8:	460c      	mov	r4, r1
 800b2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ce:	f000 f865 	bl	800b39c <_lseek_r>
 800b2d2:	1c43      	adds	r3, r0, #1
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	bf15      	itete	ne
 800b2d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b2da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b2de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b2e2:	81a3      	strheq	r3, [r4, #12]
 800b2e4:	bf18      	it	ne
 800b2e6:	81a3      	strhne	r3, [r4, #12]
 800b2e8:	bd10      	pop	{r4, pc}

0800b2ea <__sclose>:
 800b2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ee:	f000 b845 	b.w	800b37c <_close_r>

0800b2f2 <_vsniprintf_r>:
 800b2f2:	b530      	push	{r4, r5, lr}
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	2c00      	cmp	r4, #0
 800b2f8:	b09b      	sub	sp, #108	@ 0x6c
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	da05      	bge.n	800b30c <_vsniprintf_r+0x1a>
 800b300:	238b      	movs	r3, #139	@ 0x8b
 800b302:	6003      	str	r3, [r0, #0]
 800b304:	f04f 30ff 	mov.w	r0, #4294967295
 800b308:	b01b      	add	sp, #108	@ 0x6c
 800b30a:	bd30      	pop	{r4, r5, pc}
 800b30c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b310:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b314:	f04f 0300 	mov.w	r3, #0
 800b318:	9319      	str	r3, [sp, #100]	@ 0x64
 800b31a:	bf14      	ite	ne
 800b31c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b320:	4623      	moveq	r3, r4
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	9305      	str	r3, [sp, #20]
 800b326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b32a:	9100      	str	r1, [sp, #0]
 800b32c:	9104      	str	r1, [sp, #16]
 800b32e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b332:	4669      	mov	r1, sp
 800b334:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b336:	f000 f94b 	bl	800b5d0 <_svfiprintf_r>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	bfbc      	itt	lt
 800b33e:	238b      	movlt	r3, #139	@ 0x8b
 800b340:	602b      	strlt	r3, [r5, #0]
 800b342:	2c00      	cmp	r4, #0
 800b344:	d0e0      	beq.n	800b308 <_vsniprintf_r+0x16>
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	e7dc      	b.n	800b308 <_vsniprintf_r+0x16>
	...

0800b350 <vsniprintf>:
 800b350:	b507      	push	{r0, r1, r2, lr}
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	4613      	mov	r3, r2
 800b356:	460a      	mov	r2, r1
 800b358:	4601      	mov	r1, r0
 800b35a:	4803      	ldr	r0, [pc, #12]	@ (800b368 <vsniprintf+0x18>)
 800b35c:	6800      	ldr	r0, [r0, #0]
 800b35e:	f7ff ffc8 	bl	800b2f2 <_vsniprintf_r>
 800b362:	b003      	add	sp, #12
 800b364:	f85d fb04 	ldr.w	pc, [sp], #4
 800b368:	20000038 	.word	0x20000038

0800b36c <memset>:
 800b36c:	4402      	add	r2, r0
 800b36e:	4603      	mov	r3, r0
 800b370:	4293      	cmp	r3, r2
 800b372:	d100      	bne.n	800b376 <memset+0xa>
 800b374:	4770      	bx	lr
 800b376:	f803 1b01 	strb.w	r1, [r3], #1
 800b37a:	e7f9      	b.n	800b370 <memset+0x4>

0800b37c <_close_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	@ (800b398 <_close_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f7 fa0f 	bl	80027aa <_close>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_close_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_close_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20000af8 	.word	0x20000af8

0800b39c <_lseek_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	@ (800b3bc <_lseek_r+0x20>)
 800b3a0:	4604      	mov	r4, r0
 800b3a2:	4608      	mov	r0, r1
 800b3a4:	4611      	mov	r1, r2
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	602a      	str	r2, [r5, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f7f7 fa19 	bl	80027e2 <_lseek>
 800b3b0:	1c43      	adds	r3, r0, #1
 800b3b2:	d102      	bne.n	800b3ba <_lseek_r+0x1e>
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	b103      	cbz	r3, 800b3ba <_lseek_r+0x1e>
 800b3b8:	6023      	str	r3, [r4, #0]
 800b3ba:	bd38      	pop	{r3, r4, r5, pc}
 800b3bc:	20000af8 	.word	0x20000af8

0800b3c0 <_read_r>:
 800b3c0:	b538      	push	{r3, r4, r5, lr}
 800b3c2:	4d07      	ldr	r5, [pc, #28]	@ (800b3e0 <_read_r+0x20>)
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	4608      	mov	r0, r1
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	602a      	str	r2, [r5, #0]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	f7f7 f9ce 	bl	8002770 <_read>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_read_r+0x1e>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_read_r+0x1e>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	20000af8 	.word	0x20000af8

0800b3e4 <_sbrk_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4d06      	ldr	r5, [pc, #24]	@ (800b400 <_sbrk_r+0x1c>)
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	602b      	str	r3, [r5, #0]
 800b3f0:	f7f7 fa04 	bl	80027fc <_sbrk>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_sbrk_r+0x1a>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_sbrk_r+0x1a>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	20000af8 	.word	0x20000af8

0800b404 <_write_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d07      	ldr	r5, [pc, #28]	@ (800b424 <_write_r+0x20>)
 800b408:	4604      	mov	r4, r0
 800b40a:	4608      	mov	r0, r1
 800b40c:	4611      	mov	r1, r2
 800b40e:	2200      	movs	r2, #0
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	f7f5 f99e 	bl	8000754 <_write>
 800b418:	1c43      	adds	r3, r0, #1
 800b41a:	d102      	bne.n	800b422 <_write_r+0x1e>
 800b41c:	682b      	ldr	r3, [r5, #0]
 800b41e:	b103      	cbz	r3, 800b422 <_write_r+0x1e>
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	bd38      	pop	{r3, r4, r5, pc}
 800b424:	20000af8 	.word	0x20000af8

0800b428 <__errno>:
 800b428:	4b01      	ldr	r3, [pc, #4]	@ (800b430 <__errno+0x8>)
 800b42a:	6818      	ldr	r0, [r3, #0]
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	20000038 	.word	0x20000038

0800b434 <__libc_init_array>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4d0d      	ldr	r5, [pc, #52]	@ (800b46c <__libc_init_array+0x38>)
 800b438:	4c0d      	ldr	r4, [pc, #52]	@ (800b470 <__libc_init_array+0x3c>)
 800b43a:	1b64      	subs	r4, r4, r5
 800b43c:	10a4      	asrs	r4, r4, #2
 800b43e:	2600      	movs	r6, #0
 800b440:	42a6      	cmp	r6, r4
 800b442:	d109      	bne.n	800b458 <__libc_init_array+0x24>
 800b444:	4d0b      	ldr	r5, [pc, #44]	@ (800b474 <__libc_init_array+0x40>)
 800b446:	4c0c      	ldr	r4, [pc, #48]	@ (800b478 <__libc_init_array+0x44>)
 800b448:	f000 fc8c 	bl	800bd64 <_init>
 800b44c:	1b64      	subs	r4, r4, r5
 800b44e:	10a4      	asrs	r4, r4, #2
 800b450:	2600      	movs	r6, #0
 800b452:	42a6      	cmp	r6, r4
 800b454:	d105      	bne.n	800b462 <__libc_init_array+0x2e>
 800b456:	bd70      	pop	{r4, r5, r6, pc}
 800b458:	f855 3b04 	ldr.w	r3, [r5], #4
 800b45c:	4798      	blx	r3
 800b45e:	3601      	adds	r6, #1
 800b460:	e7ee      	b.n	800b440 <__libc_init_array+0xc>
 800b462:	f855 3b04 	ldr.w	r3, [r5], #4
 800b466:	4798      	blx	r3
 800b468:	3601      	adds	r6, #1
 800b46a:	e7f2      	b.n	800b452 <__libc_init_array+0x1e>
 800b46c:	0800bf88 	.word	0x0800bf88
 800b470:	0800bf88 	.word	0x0800bf88
 800b474:	0800bf88 	.word	0x0800bf88
 800b478:	0800bf8c 	.word	0x0800bf8c

0800b47c <__retarget_lock_init_recursive>:
 800b47c:	4770      	bx	lr

0800b47e <__retarget_lock_acquire_recursive>:
 800b47e:	4770      	bx	lr

0800b480 <__retarget_lock_release_recursive>:
 800b480:	4770      	bx	lr
	...

0800b484 <_free_r>:
 800b484:	b538      	push	{r3, r4, r5, lr}
 800b486:	4605      	mov	r5, r0
 800b488:	2900      	cmp	r1, #0
 800b48a:	d041      	beq.n	800b510 <_free_r+0x8c>
 800b48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b490:	1f0c      	subs	r4, r1, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	bfb8      	it	lt
 800b496:	18e4      	addlt	r4, r4, r3
 800b498:	f7ff fd30 	bl	800aefc <__malloc_lock>
 800b49c:	4a1d      	ldr	r2, [pc, #116]	@ (800b514 <_free_r+0x90>)
 800b49e:	6813      	ldr	r3, [r2, #0]
 800b4a0:	b933      	cbnz	r3, 800b4b0 <_free_r+0x2c>
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	6014      	str	r4, [r2, #0]
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4ac:	f7ff bd2c 	b.w	800af08 <__malloc_unlock>
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	d908      	bls.n	800b4c6 <_free_r+0x42>
 800b4b4:	6820      	ldr	r0, [r4, #0]
 800b4b6:	1821      	adds	r1, r4, r0
 800b4b8:	428b      	cmp	r3, r1
 800b4ba:	bf01      	itttt	eq
 800b4bc:	6819      	ldreq	r1, [r3, #0]
 800b4be:	685b      	ldreq	r3, [r3, #4]
 800b4c0:	1809      	addeq	r1, r1, r0
 800b4c2:	6021      	streq	r1, [r4, #0]
 800b4c4:	e7ed      	b.n	800b4a2 <_free_r+0x1e>
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	b10b      	cbz	r3, 800b4d0 <_free_r+0x4c>
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	d9fa      	bls.n	800b4c6 <_free_r+0x42>
 800b4d0:	6811      	ldr	r1, [r2, #0]
 800b4d2:	1850      	adds	r0, r2, r1
 800b4d4:	42a0      	cmp	r0, r4
 800b4d6:	d10b      	bne.n	800b4f0 <_free_r+0x6c>
 800b4d8:	6820      	ldr	r0, [r4, #0]
 800b4da:	4401      	add	r1, r0
 800b4dc:	1850      	adds	r0, r2, r1
 800b4de:	4283      	cmp	r3, r0
 800b4e0:	6011      	str	r1, [r2, #0]
 800b4e2:	d1e0      	bne.n	800b4a6 <_free_r+0x22>
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	6053      	str	r3, [r2, #4]
 800b4ea:	4408      	add	r0, r1
 800b4ec:	6010      	str	r0, [r2, #0]
 800b4ee:	e7da      	b.n	800b4a6 <_free_r+0x22>
 800b4f0:	d902      	bls.n	800b4f8 <_free_r+0x74>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	602b      	str	r3, [r5, #0]
 800b4f6:	e7d6      	b.n	800b4a6 <_free_r+0x22>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	1821      	adds	r1, r4, r0
 800b4fc:	428b      	cmp	r3, r1
 800b4fe:	bf04      	itt	eq
 800b500:	6819      	ldreq	r1, [r3, #0]
 800b502:	685b      	ldreq	r3, [r3, #4]
 800b504:	6063      	str	r3, [r4, #4]
 800b506:	bf04      	itt	eq
 800b508:	1809      	addeq	r1, r1, r0
 800b50a:	6021      	streq	r1, [r4, #0]
 800b50c:	6054      	str	r4, [r2, #4]
 800b50e:	e7ca      	b.n	800b4a6 <_free_r+0x22>
 800b510:	bd38      	pop	{r3, r4, r5, pc}
 800b512:	bf00      	nop
 800b514:	200009b8 	.word	0x200009b8

0800b518 <__ssputs_r>:
 800b518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	688e      	ldr	r6, [r1, #8]
 800b51e:	461f      	mov	r7, r3
 800b520:	42be      	cmp	r6, r7
 800b522:	680b      	ldr	r3, [r1, #0]
 800b524:	4682      	mov	sl, r0
 800b526:	460c      	mov	r4, r1
 800b528:	4690      	mov	r8, r2
 800b52a:	d82d      	bhi.n	800b588 <__ssputs_r+0x70>
 800b52c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b530:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b534:	d026      	beq.n	800b584 <__ssputs_r+0x6c>
 800b536:	6965      	ldr	r5, [r4, #20]
 800b538:	6909      	ldr	r1, [r1, #16]
 800b53a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b53e:	eba3 0901 	sub.w	r9, r3, r1
 800b542:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b546:	1c7b      	adds	r3, r7, #1
 800b548:	444b      	add	r3, r9
 800b54a:	106d      	asrs	r5, r5, #1
 800b54c:	429d      	cmp	r5, r3
 800b54e:	bf38      	it	cc
 800b550:	461d      	movcc	r5, r3
 800b552:	0553      	lsls	r3, r2, #21
 800b554:	d527      	bpl.n	800b5a6 <__ssputs_r+0x8e>
 800b556:	4629      	mov	r1, r5
 800b558:	f7ff fc50 	bl	800adfc <_malloc_r>
 800b55c:	4606      	mov	r6, r0
 800b55e:	b360      	cbz	r0, 800b5ba <__ssputs_r+0xa2>
 800b560:	6921      	ldr	r1, [r4, #16]
 800b562:	464a      	mov	r2, r9
 800b564:	f000 fbba 	bl	800bcdc <memcpy>
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b572:	81a3      	strh	r3, [r4, #12]
 800b574:	6126      	str	r6, [r4, #16]
 800b576:	6165      	str	r5, [r4, #20]
 800b578:	444e      	add	r6, r9
 800b57a:	eba5 0509 	sub.w	r5, r5, r9
 800b57e:	6026      	str	r6, [r4, #0]
 800b580:	60a5      	str	r5, [r4, #8]
 800b582:	463e      	mov	r6, r7
 800b584:	42be      	cmp	r6, r7
 800b586:	d900      	bls.n	800b58a <__ssputs_r+0x72>
 800b588:	463e      	mov	r6, r7
 800b58a:	6820      	ldr	r0, [r4, #0]
 800b58c:	4632      	mov	r2, r6
 800b58e:	4641      	mov	r1, r8
 800b590:	f000 fb78 	bl	800bc84 <memmove>
 800b594:	68a3      	ldr	r3, [r4, #8]
 800b596:	1b9b      	subs	r3, r3, r6
 800b598:	60a3      	str	r3, [r4, #8]
 800b59a:	6823      	ldr	r3, [r4, #0]
 800b59c:	4433      	add	r3, r6
 800b59e:	6023      	str	r3, [r4, #0]
 800b5a0:	2000      	movs	r0, #0
 800b5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a6:	462a      	mov	r2, r5
 800b5a8:	f000 fba6 	bl	800bcf8 <_realloc_r>
 800b5ac:	4606      	mov	r6, r0
 800b5ae:	2800      	cmp	r0, #0
 800b5b0:	d1e0      	bne.n	800b574 <__ssputs_r+0x5c>
 800b5b2:	6921      	ldr	r1, [r4, #16]
 800b5b4:	4650      	mov	r0, sl
 800b5b6:	f7ff ff65 	bl	800b484 <_free_r>
 800b5ba:	230c      	movs	r3, #12
 800b5bc:	f8ca 3000 	str.w	r3, [sl]
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5c6:	81a3      	strh	r3, [r4, #12]
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5cc:	e7e9      	b.n	800b5a2 <__ssputs_r+0x8a>
	...

0800b5d0 <_svfiprintf_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4698      	mov	r8, r3
 800b5d6:	898b      	ldrh	r3, [r1, #12]
 800b5d8:	061b      	lsls	r3, r3, #24
 800b5da:	b09d      	sub	sp, #116	@ 0x74
 800b5dc:	4607      	mov	r7, r0
 800b5de:	460d      	mov	r5, r1
 800b5e0:	4614      	mov	r4, r2
 800b5e2:	d510      	bpl.n	800b606 <_svfiprintf_r+0x36>
 800b5e4:	690b      	ldr	r3, [r1, #16]
 800b5e6:	b973      	cbnz	r3, 800b606 <_svfiprintf_r+0x36>
 800b5e8:	2140      	movs	r1, #64	@ 0x40
 800b5ea:	f7ff fc07 	bl	800adfc <_malloc_r>
 800b5ee:	6028      	str	r0, [r5, #0]
 800b5f0:	6128      	str	r0, [r5, #16]
 800b5f2:	b930      	cbnz	r0, 800b602 <_svfiprintf_r+0x32>
 800b5f4:	230c      	movs	r3, #12
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	b01d      	add	sp, #116	@ 0x74
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	2340      	movs	r3, #64	@ 0x40
 800b604:	616b      	str	r3, [r5, #20]
 800b606:	2300      	movs	r3, #0
 800b608:	9309      	str	r3, [sp, #36]	@ 0x24
 800b60a:	2320      	movs	r3, #32
 800b60c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b610:	f8cd 800c 	str.w	r8, [sp, #12]
 800b614:	2330      	movs	r3, #48	@ 0x30
 800b616:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b7b4 <_svfiprintf_r+0x1e4>
 800b61a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b61e:	f04f 0901 	mov.w	r9, #1
 800b622:	4623      	mov	r3, r4
 800b624:	469a      	mov	sl, r3
 800b626:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b62a:	b10a      	cbz	r2, 800b630 <_svfiprintf_r+0x60>
 800b62c:	2a25      	cmp	r2, #37	@ 0x25
 800b62e:	d1f9      	bne.n	800b624 <_svfiprintf_r+0x54>
 800b630:	ebba 0b04 	subs.w	fp, sl, r4
 800b634:	d00b      	beq.n	800b64e <_svfiprintf_r+0x7e>
 800b636:	465b      	mov	r3, fp
 800b638:	4622      	mov	r2, r4
 800b63a:	4629      	mov	r1, r5
 800b63c:	4638      	mov	r0, r7
 800b63e:	f7ff ff6b 	bl	800b518 <__ssputs_r>
 800b642:	3001      	adds	r0, #1
 800b644:	f000 80a7 	beq.w	800b796 <_svfiprintf_r+0x1c6>
 800b648:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b64a:	445a      	add	r2, fp
 800b64c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b64e:	f89a 3000 	ldrb.w	r3, [sl]
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 809f 	beq.w	800b796 <_svfiprintf_r+0x1c6>
 800b658:	2300      	movs	r3, #0
 800b65a:	f04f 32ff 	mov.w	r2, #4294967295
 800b65e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b662:	f10a 0a01 	add.w	sl, sl, #1
 800b666:	9304      	str	r3, [sp, #16]
 800b668:	9307      	str	r3, [sp, #28]
 800b66a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b66e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b670:	4654      	mov	r4, sl
 800b672:	2205      	movs	r2, #5
 800b674:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b678:	484e      	ldr	r0, [pc, #312]	@ (800b7b4 <_svfiprintf_r+0x1e4>)
 800b67a:	f7f4 fdb1 	bl	80001e0 <memchr>
 800b67e:	9a04      	ldr	r2, [sp, #16]
 800b680:	b9d8      	cbnz	r0, 800b6ba <_svfiprintf_r+0xea>
 800b682:	06d0      	lsls	r0, r2, #27
 800b684:	bf44      	itt	mi
 800b686:	2320      	movmi	r3, #32
 800b688:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b68c:	0711      	lsls	r1, r2, #28
 800b68e:	bf44      	itt	mi
 800b690:	232b      	movmi	r3, #43	@ 0x2b
 800b692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b696:	f89a 3000 	ldrb.w	r3, [sl]
 800b69a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b69c:	d015      	beq.n	800b6ca <_svfiprintf_r+0xfa>
 800b69e:	9a07      	ldr	r2, [sp, #28]
 800b6a0:	4654      	mov	r4, sl
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	f04f 0c0a 	mov.w	ip, #10
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ae:	3b30      	subs	r3, #48	@ 0x30
 800b6b0:	2b09      	cmp	r3, #9
 800b6b2:	d94b      	bls.n	800b74c <_svfiprintf_r+0x17c>
 800b6b4:	b1b0      	cbz	r0, 800b6e4 <_svfiprintf_r+0x114>
 800b6b6:	9207      	str	r2, [sp, #28]
 800b6b8:	e014      	b.n	800b6e4 <_svfiprintf_r+0x114>
 800b6ba:	eba0 0308 	sub.w	r3, r0, r8
 800b6be:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	9304      	str	r3, [sp, #16]
 800b6c6:	46a2      	mov	sl, r4
 800b6c8:	e7d2      	b.n	800b670 <_svfiprintf_r+0xa0>
 800b6ca:	9b03      	ldr	r3, [sp, #12]
 800b6cc:	1d19      	adds	r1, r3, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	9103      	str	r1, [sp, #12]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	bfbb      	ittet	lt
 800b6d6:	425b      	neglt	r3, r3
 800b6d8:	f042 0202 	orrlt.w	r2, r2, #2
 800b6dc:	9307      	strge	r3, [sp, #28]
 800b6de:	9307      	strlt	r3, [sp, #28]
 800b6e0:	bfb8      	it	lt
 800b6e2:	9204      	strlt	r2, [sp, #16]
 800b6e4:	7823      	ldrb	r3, [r4, #0]
 800b6e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6e8:	d10a      	bne.n	800b700 <_svfiprintf_r+0x130>
 800b6ea:	7863      	ldrb	r3, [r4, #1]
 800b6ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ee:	d132      	bne.n	800b756 <_svfiprintf_r+0x186>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	1d1a      	adds	r2, r3, #4
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	9203      	str	r2, [sp, #12]
 800b6f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6fc:	3402      	adds	r4, #2
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b7c4 <_svfiprintf_r+0x1f4>
 800b704:	7821      	ldrb	r1, [r4, #0]
 800b706:	2203      	movs	r2, #3
 800b708:	4650      	mov	r0, sl
 800b70a:	f7f4 fd69 	bl	80001e0 <memchr>
 800b70e:	b138      	cbz	r0, 800b720 <_svfiprintf_r+0x150>
 800b710:	9b04      	ldr	r3, [sp, #16]
 800b712:	eba0 000a 	sub.w	r0, r0, sl
 800b716:	2240      	movs	r2, #64	@ 0x40
 800b718:	4082      	lsls	r2, r0
 800b71a:	4313      	orrs	r3, r2
 800b71c:	3401      	adds	r4, #1
 800b71e:	9304      	str	r3, [sp, #16]
 800b720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b724:	4824      	ldr	r0, [pc, #144]	@ (800b7b8 <_svfiprintf_r+0x1e8>)
 800b726:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b72a:	2206      	movs	r2, #6
 800b72c:	f7f4 fd58 	bl	80001e0 <memchr>
 800b730:	2800      	cmp	r0, #0
 800b732:	d036      	beq.n	800b7a2 <_svfiprintf_r+0x1d2>
 800b734:	4b21      	ldr	r3, [pc, #132]	@ (800b7bc <_svfiprintf_r+0x1ec>)
 800b736:	bb1b      	cbnz	r3, 800b780 <_svfiprintf_r+0x1b0>
 800b738:	9b03      	ldr	r3, [sp, #12]
 800b73a:	3307      	adds	r3, #7
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	3308      	adds	r3, #8
 800b742:	9303      	str	r3, [sp, #12]
 800b744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b746:	4433      	add	r3, r6
 800b748:	9309      	str	r3, [sp, #36]	@ 0x24
 800b74a:	e76a      	b.n	800b622 <_svfiprintf_r+0x52>
 800b74c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b750:	460c      	mov	r4, r1
 800b752:	2001      	movs	r0, #1
 800b754:	e7a8      	b.n	800b6a8 <_svfiprintf_r+0xd8>
 800b756:	2300      	movs	r3, #0
 800b758:	3401      	adds	r4, #1
 800b75a:	9305      	str	r3, [sp, #20]
 800b75c:	4619      	mov	r1, r3
 800b75e:	f04f 0c0a 	mov.w	ip, #10
 800b762:	4620      	mov	r0, r4
 800b764:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b768:	3a30      	subs	r2, #48	@ 0x30
 800b76a:	2a09      	cmp	r2, #9
 800b76c:	d903      	bls.n	800b776 <_svfiprintf_r+0x1a6>
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d0c6      	beq.n	800b700 <_svfiprintf_r+0x130>
 800b772:	9105      	str	r1, [sp, #20]
 800b774:	e7c4      	b.n	800b700 <_svfiprintf_r+0x130>
 800b776:	fb0c 2101 	mla	r1, ip, r1, r2
 800b77a:	4604      	mov	r4, r0
 800b77c:	2301      	movs	r3, #1
 800b77e:	e7f0      	b.n	800b762 <_svfiprintf_r+0x192>
 800b780:	ab03      	add	r3, sp, #12
 800b782:	9300      	str	r3, [sp, #0]
 800b784:	462a      	mov	r2, r5
 800b786:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c0 <_svfiprintf_r+0x1f0>)
 800b788:	a904      	add	r1, sp, #16
 800b78a:	4638      	mov	r0, r7
 800b78c:	f3af 8000 	nop.w
 800b790:	1c42      	adds	r2, r0, #1
 800b792:	4606      	mov	r6, r0
 800b794:	d1d6      	bne.n	800b744 <_svfiprintf_r+0x174>
 800b796:	89ab      	ldrh	r3, [r5, #12]
 800b798:	065b      	lsls	r3, r3, #25
 800b79a:	f53f af2d 	bmi.w	800b5f8 <_svfiprintf_r+0x28>
 800b79e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7a0:	e72c      	b.n	800b5fc <_svfiprintf_r+0x2c>
 800b7a2:	ab03      	add	r3, sp, #12
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	462a      	mov	r2, r5
 800b7a8:	4b05      	ldr	r3, [pc, #20]	@ (800b7c0 <_svfiprintf_r+0x1f0>)
 800b7aa:	a904      	add	r1, sp, #16
 800b7ac:	4638      	mov	r0, r7
 800b7ae:	f000 f879 	bl	800b8a4 <_printf_i>
 800b7b2:	e7ed      	b.n	800b790 <_svfiprintf_r+0x1c0>
 800b7b4:	0800bf4c 	.word	0x0800bf4c
 800b7b8:	0800bf56 	.word	0x0800bf56
 800b7bc:	00000000 	.word	0x00000000
 800b7c0:	0800b519 	.word	0x0800b519
 800b7c4:	0800bf52 	.word	0x0800bf52

0800b7c8 <_printf_common>:
 800b7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7cc:	4616      	mov	r6, r2
 800b7ce:	4698      	mov	r8, r3
 800b7d0:	688a      	ldr	r2, [r1, #8]
 800b7d2:	690b      	ldr	r3, [r1, #16]
 800b7d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	bfb8      	it	lt
 800b7dc:	4613      	movlt	r3, r2
 800b7de:	6033      	str	r3, [r6, #0]
 800b7e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	b10a      	cbz	r2, 800b7ee <_printf_common+0x26>
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	6033      	str	r3, [r6, #0]
 800b7ee:	6823      	ldr	r3, [r4, #0]
 800b7f0:	0699      	lsls	r1, r3, #26
 800b7f2:	bf42      	ittt	mi
 800b7f4:	6833      	ldrmi	r3, [r6, #0]
 800b7f6:	3302      	addmi	r3, #2
 800b7f8:	6033      	strmi	r3, [r6, #0]
 800b7fa:	6825      	ldr	r5, [r4, #0]
 800b7fc:	f015 0506 	ands.w	r5, r5, #6
 800b800:	d106      	bne.n	800b810 <_printf_common+0x48>
 800b802:	f104 0a19 	add.w	sl, r4, #25
 800b806:	68e3      	ldr	r3, [r4, #12]
 800b808:	6832      	ldr	r2, [r6, #0]
 800b80a:	1a9b      	subs	r3, r3, r2
 800b80c:	42ab      	cmp	r3, r5
 800b80e:	dc26      	bgt.n	800b85e <_printf_common+0x96>
 800b810:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b814:	6822      	ldr	r2, [r4, #0]
 800b816:	3b00      	subs	r3, #0
 800b818:	bf18      	it	ne
 800b81a:	2301      	movne	r3, #1
 800b81c:	0692      	lsls	r2, r2, #26
 800b81e:	d42b      	bmi.n	800b878 <_printf_common+0xb0>
 800b820:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b824:	4641      	mov	r1, r8
 800b826:	4638      	mov	r0, r7
 800b828:	47c8      	blx	r9
 800b82a:	3001      	adds	r0, #1
 800b82c:	d01e      	beq.n	800b86c <_printf_common+0xa4>
 800b82e:	6823      	ldr	r3, [r4, #0]
 800b830:	6922      	ldr	r2, [r4, #16]
 800b832:	f003 0306 	and.w	r3, r3, #6
 800b836:	2b04      	cmp	r3, #4
 800b838:	bf02      	ittt	eq
 800b83a:	68e5      	ldreq	r5, [r4, #12]
 800b83c:	6833      	ldreq	r3, [r6, #0]
 800b83e:	1aed      	subeq	r5, r5, r3
 800b840:	68a3      	ldr	r3, [r4, #8]
 800b842:	bf0c      	ite	eq
 800b844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b848:	2500      	movne	r5, #0
 800b84a:	4293      	cmp	r3, r2
 800b84c:	bfc4      	itt	gt
 800b84e:	1a9b      	subgt	r3, r3, r2
 800b850:	18ed      	addgt	r5, r5, r3
 800b852:	2600      	movs	r6, #0
 800b854:	341a      	adds	r4, #26
 800b856:	42b5      	cmp	r5, r6
 800b858:	d11a      	bne.n	800b890 <_printf_common+0xc8>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e008      	b.n	800b870 <_printf_common+0xa8>
 800b85e:	2301      	movs	r3, #1
 800b860:	4652      	mov	r2, sl
 800b862:	4641      	mov	r1, r8
 800b864:	4638      	mov	r0, r7
 800b866:	47c8      	blx	r9
 800b868:	3001      	adds	r0, #1
 800b86a:	d103      	bne.n	800b874 <_printf_common+0xac>
 800b86c:	f04f 30ff 	mov.w	r0, #4294967295
 800b870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b874:	3501      	adds	r5, #1
 800b876:	e7c6      	b.n	800b806 <_printf_common+0x3e>
 800b878:	18e1      	adds	r1, r4, r3
 800b87a:	1c5a      	adds	r2, r3, #1
 800b87c:	2030      	movs	r0, #48	@ 0x30
 800b87e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b882:	4422      	add	r2, r4
 800b884:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b88c:	3302      	adds	r3, #2
 800b88e:	e7c7      	b.n	800b820 <_printf_common+0x58>
 800b890:	2301      	movs	r3, #1
 800b892:	4622      	mov	r2, r4
 800b894:	4641      	mov	r1, r8
 800b896:	4638      	mov	r0, r7
 800b898:	47c8      	blx	r9
 800b89a:	3001      	adds	r0, #1
 800b89c:	d0e6      	beq.n	800b86c <_printf_common+0xa4>
 800b89e:	3601      	adds	r6, #1
 800b8a0:	e7d9      	b.n	800b856 <_printf_common+0x8e>
	...

0800b8a4 <_printf_i>:
 800b8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8a8:	7e0f      	ldrb	r7, [r1, #24]
 800b8aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b8ac:	2f78      	cmp	r7, #120	@ 0x78
 800b8ae:	4691      	mov	r9, r2
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	460c      	mov	r4, r1
 800b8b4:	469a      	mov	sl, r3
 800b8b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b8ba:	d807      	bhi.n	800b8cc <_printf_i+0x28>
 800b8bc:	2f62      	cmp	r7, #98	@ 0x62
 800b8be:	d80a      	bhi.n	800b8d6 <_printf_i+0x32>
 800b8c0:	2f00      	cmp	r7, #0
 800b8c2:	f000 80d1 	beq.w	800ba68 <_printf_i+0x1c4>
 800b8c6:	2f58      	cmp	r7, #88	@ 0x58
 800b8c8:	f000 80b8 	beq.w	800ba3c <_printf_i+0x198>
 800b8cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b8d4:	e03a      	b.n	800b94c <_printf_i+0xa8>
 800b8d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b8da:	2b15      	cmp	r3, #21
 800b8dc:	d8f6      	bhi.n	800b8cc <_printf_i+0x28>
 800b8de:	a101      	add	r1, pc, #4	@ (adr r1, 800b8e4 <_printf_i+0x40>)
 800b8e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8e4:	0800b93d 	.word	0x0800b93d
 800b8e8:	0800b951 	.word	0x0800b951
 800b8ec:	0800b8cd 	.word	0x0800b8cd
 800b8f0:	0800b8cd 	.word	0x0800b8cd
 800b8f4:	0800b8cd 	.word	0x0800b8cd
 800b8f8:	0800b8cd 	.word	0x0800b8cd
 800b8fc:	0800b951 	.word	0x0800b951
 800b900:	0800b8cd 	.word	0x0800b8cd
 800b904:	0800b8cd 	.word	0x0800b8cd
 800b908:	0800b8cd 	.word	0x0800b8cd
 800b90c:	0800b8cd 	.word	0x0800b8cd
 800b910:	0800ba4f 	.word	0x0800ba4f
 800b914:	0800b97b 	.word	0x0800b97b
 800b918:	0800ba09 	.word	0x0800ba09
 800b91c:	0800b8cd 	.word	0x0800b8cd
 800b920:	0800b8cd 	.word	0x0800b8cd
 800b924:	0800ba71 	.word	0x0800ba71
 800b928:	0800b8cd 	.word	0x0800b8cd
 800b92c:	0800b97b 	.word	0x0800b97b
 800b930:	0800b8cd 	.word	0x0800b8cd
 800b934:	0800b8cd 	.word	0x0800b8cd
 800b938:	0800ba11 	.word	0x0800ba11
 800b93c:	6833      	ldr	r3, [r6, #0]
 800b93e:	1d1a      	adds	r2, r3, #4
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6032      	str	r2, [r6, #0]
 800b944:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b948:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b94c:	2301      	movs	r3, #1
 800b94e:	e09c      	b.n	800ba8a <_printf_i+0x1e6>
 800b950:	6833      	ldr	r3, [r6, #0]
 800b952:	6820      	ldr	r0, [r4, #0]
 800b954:	1d19      	adds	r1, r3, #4
 800b956:	6031      	str	r1, [r6, #0]
 800b958:	0606      	lsls	r6, r0, #24
 800b95a:	d501      	bpl.n	800b960 <_printf_i+0xbc>
 800b95c:	681d      	ldr	r5, [r3, #0]
 800b95e:	e003      	b.n	800b968 <_printf_i+0xc4>
 800b960:	0645      	lsls	r5, r0, #25
 800b962:	d5fb      	bpl.n	800b95c <_printf_i+0xb8>
 800b964:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b968:	2d00      	cmp	r5, #0
 800b96a:	da03      	bge.n	800b974 <_printf_i+0xd0>
 800b96c:	232d      	movs	r3, #45	@ 0x2d
 800b96e:	426d      	negs	r5, r5
 800b970:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b974:	4858      	ldr	r0, [pc, #352]	@ (800bad8 <_printf_i+0x234>)
 800b976:	230a      	movs	r3, #10
 800b978:	e011      	b.n	800b99e <_printf_i+0xfa>
 800b97a:	6821      	ldr	r1, [r4, #0]
 800b97c:	6833      	ldr	r3, [r6, #0]
 800b97e:	0608      	lsls	r0, r1, #24
 800b980:	f853 5b04 	ldr.w	r5, [r3], #4
 800b984:	d402      	bmi.n	800b98c <_printf_i+0xe8>
 800b986:	0649      	lsls	r1, r1, #25
 800b988:	bf48      	it	mi
 800b98a:	b2ad      	uxthmi	r5, r5
 800b98c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b98e:	4852      	ldr	r0, [pc, #328]	@ (800bad8 <_printf_i+0x234>)
 800b990:	6033      	str	r3, [r6, #0]
 800b992:	bf14      	ite	ne
 800b994:	230a      	movne	r3, #10
 800b996:	2308      	moveq	r3, #8
 800b998:	2100      	movs	r1, #0
 800b99a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b99e:	6866      	ldr	r6, [r4, #4]
 800b9a0:	60a6      	str	r6, [r4, #8]
 800b9a2:	2e00      	cmp	r6, #0
 800b9a4:	db05      	blt.n	800b9b2 <_printf_i+0x10e>
 800b9a6:	6821      	ldr	r1, [r4, #0]
 800b9a8:	432e      	orrs	r6, r5
 800b9aa:	f021 0104 	bic.w	r1, r1, #4
 800b9ae:	6021      	str	r1, [r4, #0]
 800b9b0:	d04b      	beq.n	800ba4a <_printf_i+0x1a6>
 800b9b2:	4616      	mov	r6, r2
 800b9b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b9b8:	fb03 5711 	mls	r7, r3, r1, r5
 800b9bc:	5dc7      	ldrb	r7, [r0, r7]
 800b9be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b9c2:	462f      	mov	r7, r5
 800b9c4:	42bb      	cmp	r3, r7
 800b9c6:	460d      	mov	r5, r1
 800b9c8:	d9f4      	bls.n	800b9b4 <_printf_i+0x110>
 800b9ca:	2b08      	cmp	r3, #8
 800b9cc:	d10b      	bne.n	800b9e6 <_printf_i+0x142>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	07df      	lsls	r7, r3, #31
 800b9d2:	d508      	bpl.n	800b9e6 <_printf_i+0x142>
 800b9d4:	6923      	ldr	r3, [r4, #16]
 800b9d6:	6861      	ldr	r1, [r4, #4]
 800b9d8:	4299      	cmp	r1, r3
 800b9da:	bfde      	ittt	le
 800b9dc:	2330      	movle	r3, #48	@ 0x30
 800b9de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9e6:	1b92      	subs	r2, r2, r6
 800b9e8:	6122      	str	r2, [r4, #16]
 800b9ea:	f8cd a000 	str.w	sl, [sp]
 800b9ee:	464b      	mov	r3, r9
 800b9f0:	aa03      	add	r2, sp, #12
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	f7ff fee7 	bl	800b7c8 <_printf_common>
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	d14a      	bne.n	800ba94 <_printf_i+0x1f0>
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	b004      	add	sp, #16
 800ba04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	f043 0320 	orr.w	r3, r3, #32
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	4832      	ldr	r0, [pc, #200]	@ (800badc <_printf_i+0x238>)
 800ba12:	2778      	movs	r7, #120	@ 0x78
 800ba14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	6831      	ldr	r1, [r6, #0]
 800ba1c:	061f      	lsls	r7, r3, #24
 800ba1e:	f851 5b04 	ldr.w	r5, [r1], #4
 800ba22:	d402      	bmi.n	800ba2a <_printf_i+0x186>
 800ba24:	065f      	lsls	r7, r3, #25
 800ba26:	bf48      	it	mi
 800ba28:	b2ad      	uxthmi	r5, r5
 800ba2a:	6031      	str	r1, [r6, #0]
 800ba2c:	07d9      	lsls	r1, r3, #31
 800ba2e:	bf44      	itt	mi
 800ba30:	f043 0320 	orrmi.w	r3, r3, #32
 800ba34:	6023      	strmi	r3, [r4, #0]
 800ba36:	b11d      	cbz	r5, 800ba40 <_printf_i+0x19c>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	e7ad      	b.n	800b998 <_printf_i+0xf4>
 800ba3c:	4826      	ldr	r0, [pc, #152]	@ (800bad8 <_printf_i+0x234>)
 800ba3e:	e7e9      	b.n	800ba14 <_printf_i+0x170>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	f023 0320 	bic.w	r3, r3, #32
 800ba46:	6023      	str	r3, [r4, #0]
 800ba48:	e7f6      	b.n	800ba38 <_printf_i+0x194>
 800ba4a:	4616      	mov	r6, r2
 800ba4c:	e7bd      	b.n	800b9ca <_printf_i+0x126>
 800ba4e:	6833      	ldr	r3, [r6, #0]
 800ba50:	6825      	ldr	r5, [r4, #0]
 800ba52:	6961      	ldr	r1, [r4, #20]
 800ba54:	1d18      	adds	r0, r3, #4
 800ba56:	6030      	str	r0, [r6, #0]
 800ba58:	062e      	lsls	r6, r5, #24
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	d501      	bpl.n	800ba62 <_printf_i+0x1be>
 800ba5e:	6019      	str	r1, [r3, #0]
 800ba60:	e002      	b.n	800ba68 <_printf_i+0x1c4>
 800ba62:	0668      	lsls	r0, r5, #25
 800ba64:	d5fb      	bpl.n	800ba5e <_printf_i+0x1ba>
 800ba66:	8019      	strh	r1, [r3, #0]
 800ba68:	2300      	movs	r3, #0
 800ba6a:	6123      	str	r3, [r4, #16]
 800ba6c:	4616      	mov	r6, r2
 800ba6e:	e7bc      	b.n	800b9ea <_printf_i+0x146>
 800ba70:	6833      	ldr	r3, [r6, #0]
 800ba72:	1d1a      	adds	r2, r3, #4
 800ba74:	6032      	str	r2, [r6, #0]
 800ba76:	681e      	ldr	r6, [r3, #0]
 800ba78:	6862      	ldr	r2, [r4, #4]
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	f7f4 fbaf 	bl	80001e0 <memchr>
 800ba82:	b108      	cbz	r0, 800ba88 <_printf_i+0x1e4>
 800ba84:	1b80      	subs	r0, r0, r6
 800ba86:	6060      	str	r0, [r4, #4]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	6123      	str	r3, [r4, #16]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba92:	e7aa      	b.n	800b9ea <_printf_i+0x146>
 800ba94:	6923      	ldr	r3, [r4, #16]
 800ba96:	4632      	mov	r2, r6
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	47d0      	blx	sl
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d0ad      	beq.n	800b9fe <_printf_i+0x15a>
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	079b      	lsls	r3, r3, #30
 800baa6:	d413      	bmi.n	800bad0 <_printf_i+0x22c>
 800baa8:	68e0      	ldr	r0, [r4, #12]
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	4298      	cmp	r0, r3
 800baae:	bfb8      	it	lt
 800bab0:	4618      	movlt	r0, r3
 800bab2:	e7a6      	b.n	800ba02 <_printf_i+0x15e>
 800bab4:	2301      	movs	r3, #1
 800bab6:	4632      	mov	r2, r6
 800bab8:	4649      	mov	r1, r9
 800baba:	4640      	mov	r0, r8
 800babc:	47d0      	blx	sl
 800babe:	3001      	adds	r0, #1
 800bac0:	d09d      	beq.n	800b9fe <_printf_i+0x15a>
 800bac2:	3501      	adds	r5, #1
 800bac4:	68e3      	ldr	r3, [r4, #12]
 800bac6:	9903      	ldr	r1, [sp, #12]
 800bac8:	1a5b      	subs	r3, r3, r1
 800baca:	42ab      	cmp	r3, r5
 800bacc:	dcf2      	bgt.n	800bab4 <_printf_i+0x210>
 800bace:	e7eb      	b.n	800baa8 <_printf_i+0x204>
 800bad0:	2500      	movs	r5, #0
 800bad2:	f104 0619 	add.w	r6, r4, #25
 800bad6:	e7f5      	b.n	800bac4 <_printf_i+0x220>
 800bad8:	0800bf5d 	.word	0x0800bf5d
 800badc:	0800bf6e 	.word	0x0800bf6e

0800bae0 <__sflush_r>:
 800bae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	0716      	lsls	r6, r2, #28
 800baea:	4605      	mov	r5, r0
 800baec:	460c      	mov	r4, r1
 800baee:	d454      	bmi.n	800bb9a <__sflush_r+0xba>
 800baf0:	684b      	ldr	r3, [r1, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dc02      	bgt.n	800bafc <__sflush_r+0x1c>
 800baf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	dd48      	ble.n	800bb8e <__sflush_r+0xae>
 800bafc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	d045      	beq.n	800bb8e <__sflush_r+0xae>
 800bb02:	2300      	movs	r3, #0
 800bb04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb08:	682f      	ldr	r7, [r5, #0]
 800bb0a:	6a21      	ldr	r1, [r4, #32]
 800bb0c:	602b      	str	r3, [r5, #0]
 800bb0e:	d030      	beq.n	800bb72 <__sflush_r+0x92>
 800bb10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	0759      	lsls	r1, r3, #29
 800bb16:	d505      	bpl.n	800bb24 <__sflush_r+0x44>
 800bb18:	6863      	ldr	r3, [r4, #4]
 800bb1a:	1ad2      	subs	r2, r2, r3
 800bb1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb1e:	b10b      	cbz	r3, 800bb24 <__sflush_r+0x44>
 800bb20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb22:	1ad2      	subs	r2, r2, r3
 800bb24:	2300      	movs	r3, #0
 800bb26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb28:	6a21      	ldr	r1, [r4, #32]
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	47b0      	blx	r6
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	89a3      	ldrh	r3, [r4, #12]
 800bb32:	d106      	bne.n	800bb42 <__sflush_r+0x62>
 800bb34:	6829      	ldr	r1, [r5, #0]
 800bb36:	291d      	cmp	r1, #29
 800bb38:	d82b      	bhi.n	800bb92 <__sflush_r+0xb2>
 800bb3a:	4a2a      	ldr	r2, [pc, #168]	@ (800bbe4 <__sflush_r+0x104>)
 800bb3c:	40ca      	lsrs	r2, r1
 800bb3e:	07d6      	lsls	r6, r2, #31
 800bb40:	d527      	bpl.n	800bb92 <__sflush_r+0xb2>
 800bb42:	2200      	movs	r2, #0
 800bb44:	6062      	str	r2, [r4, #4]
 800bb46:	04d9      	lsls	r1, r3, #19
 800bb48:	6922      	ldr	r2, [r4, #16]
 800bb4a:	6022      	str	r2, [r4, #0]
 800bb4c:	d504      	bpl.n	800bb58 <__sflush_r+0x78>
 800bb4e:	1c42      	adds	r2, r0, #1
 800bb50:	d101      	bne.n	800bb56 <__sflush_r+0x76>
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	b903      	cbnz	r3, 800bb58 <__sflush_r+0x78>
 800bb56:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb5a:	602f      	str	r7, [r5, #0]
 800bb5c:	b1b9      	cbz	r1, 800bb8e <__sflush_r+0xae>
 800bb5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb62:	4299      	cmp	r1, r3
 800bb64:	d002      	beq.n	800bb6c <__sflush_r+0x8c>
 800bb66:	4628      	mov	r0, r5
 800bb68:	f7ff fc8c 	bl	800b484 <_free_r>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb70:	e00d      	b.n	800bb8e <__sflush_r+0xae>
 800bb72:	2301      	movs	r3, #1
 800bb74:	4628      	mov	r0, r5
 800bb76:	47b0      	blx	r6
 800bb78:	4602      	mov	r2, r0
 800bb7a:	1c50      	adds	r0, r2, #1
 800bb7c:	d1c9      	bne.n	800bb12 <__sflush_r+0x32>
 800bb7e:	682b      	ldr	r3, [r5, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d0c6      	beq.n	800bb12 <__sflush_r+0x32>
 800bb84:	2b1d      	cmp	r3, #29
 800bb86:	d001      	beq.n	800bb8c <__sflush_r+0xac>
 800bb88:	2b16      	cmp	r3, #22
 800bb8a:	d11e      	bne.n	800bbca <__sflush_r+0xea>
 800bb8c:	602f      	str	r7, [r5, #0]
 800bb8e:	2000      	movs	r0, #0
 800bb90:	e022      	b.n	800bbd8 <__sflush_r+0xf8>
 800bb92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb96:	b21b      	sxth	r3, r3
 800bb98:	e01b      	b.n	800bbd2 <__sflush_r+0xf2>
 800bb9a:	690f      	ldr	r7, [r1, #16]
 800bb9c:	2f00      	cmp	r7, #0
 800bb9e:	d0f6      	beq.n	800bb8e <__sflush_r+0xae>
 800bba0:	0793      	lsls	r3, r2, #30
 800bba2:	680e      	ldr	r6, [r1, #0]
 800bba4:	bf08      	it	eq
 800bba6:	694b      	ldreq	r3, [r1, #20]
 800bba8:	600f      	str	r7, [r1, #0]
 800bbaa:	bf18      	it	ne
 800bbac:	2300      	movne	r3, #0
 800bbae:	eba6 0807 	sub.w	r8, r6, r7
 800bbb2:	608b      	str	r3, [r1, #8]
 800bbb4:	f1b8 0f00 	cmp.w	r8, #0
 800bbb8:	dde9      	ble.n	800bb8e <__sflush_r+0xae>
 800bbba:	6a21      	ldr	r1, [r4, #32]
 800bbbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bbbe:	4643      	mov	r3, r8
 800bbc0:	463a      	mov	r2, r7
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	47b0      	blx	r6
 800bbc6:	2800      	cmp	r0, #0
 800bbc8:	dc08      	bgt.n	800bbdc <__sflush_r+0xfc>
 800bbca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbd2:	81a3      	strh	r3, [r4, #12]
 800bbd4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbdc:	4407      	add	r7, r0
 800bbde:	eba8 0800 	sub.w	r8, r8, r0
 800bbe2:	e7e7      	b.n	800bbb4 <__sflush_r+0xd4>
 800bbe4:	20400001 	.word	0x20400001

0800bbe8 <_fflush_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	690b      	ldr	r3, [r1, #16]
 800bbec:	4605      	mov	r5, r0
 800bbee:	460c      	mov	r4, r1
 800bbf0:	b913      	cbnz	r3, 800bbf8 <_fflush_r+0x10>
 800bbf2:	2500      	movs	r5, #0
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	b118      	cbz	r0, 800bc02 <_fflush_r+0x1a>
 800bbfa:	6a03      	ldr	r3, [r0, #32]
 800bbfc:	b90b      	cbnz	r3, 800bc02 <_fflush_r+0x1a>
 800bbfe:	f7ff fa15 	bl	800b02c <__sinit>
 800bc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d0f3      	beq.n	800bbf2 <_fflush_r+0xa>
 800bc0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc0c:	07d0      	lsls	r0, r2, #31
 800bc0e:	d404      	bmi.n	800bc1a <_fflush_r+0x32>
 800bc10:	0599      	lsls	r1, r3, #22
 800bc12:	d402      	bmi.n	800bc1a <_fflush_r+0x32>
 800bc14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc16:	f7ff fc32 	bl	800b47e <__retarget_lock_acquire_recursive>
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	f7ff ff5f 	bl	800bae0 <__sflush_r>
 800bc22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc24:	07da      	lsls	r2, r3, #31
 800bc26:	4605      	mov	r5, r0
 800bc28:	d4e4      	bmi.n	800bbf4 <_fflush_r+0xc>
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	059b      	lsls	r3, r3, #22
 800bc2e:	d4e1      	bmi.n	800bbf4 <_fflush_r+0xc>
 800bc30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc32:	f7ff fc25 	bl	800b480 <__retarget_lock_release_recursive>
 800bc36:	e7dd      	b.n	800bbf4 <_fflush_r+0xc>

0800bc38 <__swhatbuf_r>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	460c      	mov	r4, r1
 800bc3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc40:	2900      	cmp	r1, #0
 800bc42:	b096      	sub	sp, #88	@ 0x58
 800bc44:	4615      	mov	r5, r2
 800bc46:	461e      	mov	r6, r3
 800bc48:	da0d      	bge.n	800bc66 <__swhatbuf_r+0x2e>
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc50:	f04f 0100 	mov.w	r1, #0
 800bc54:	bf14      	ite	ne
 800bc56:	2340      	movne	r3, #64	@ 0x40
 800bc58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	6031      	str	r1, [r6, #0]
 800bc60:	602b      	str	r3, [r5, #0]
 800bc62:	b016      	add	sp, #88	@ 0x58
 800bc64:	bd70      	pop	{r4, r5, r6, pc}
 800bc66:	466a      	mov	r2, sp
 800bc68:	f000 f826 	bl	800bcb8 <_fstat_r>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	dbec      	blt.n	800bc4a <__swhatbuf_r+0x12>
 800bc70:	9901      	ldr	r1, [sp, #4]
 800bc72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc7a:	4259      	negs	r1, r3
 800bc7c:	4159      	adcs	r1, r3
 800bc7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc82:	e7eb      	b.n	800bc5c <__swhatbuf_r+0x24>

0800bc84 <memmove>:
 800bc84:	4288      	cmp	r0, r1
 800bc86:	b510      	push	{r4, lr}
 800bc88:	eb01 0402 	add.w	r4, r1, r2
 800bc8c:	d902      	bls.n	800bc94 <memmove+0x10>
 800bc8e:	4284      	cmp	r4, r0
 800bc90:	4623      	mov	r3, r4
 800bc92:	d807      	bhi.n	800bca4 <memmove+0x20>
 800bc94:	1e43      	subs	r3, r0, #1
 800bc96:	42a1      	cmp	r1, r4
 800bc98:	d008      	beq.n	800bcac <memmove+0x28>
 800bc9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bca2:	e7f8      	b.n	800bc96 <memmove+0x12>
 800bca4:	4402      	add	r2, r0
 800bca6:	4601      	mov	r1, r0
 800bca8:	428a      	cmp	r2, r1
 800bcaa:	d100      	bne.n	800bcae <memmove+0x2a>
 800bcac:	bd10      	pop	{r4, pc}
 800bcae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bcb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bcb6:	e7f7      	b.n	800bca8 <memmove+0x24>

0800bcb8 <_fstat_r>:
 800bcb8:	b538      	push	{r3, r4, r5, lr}
 800bcba:	4d07      	ldr	r5, [pc, #28]	@ (800bcd8 <_fstat_r+0x20>)
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	4608      	mov	r0, r1
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	602b      	str	r3, [r5, #0]
 800bcc6:	f7f6 fd7c 	bl	80027c2 <_fstat>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d102      	bne.n	800bcd4 <_fstat_r+0x1c>
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	b103      	cbz	r3, 800bcd4 <_fstat_r+0x1c>
 800bcd2:	6023      	str	r3, [r4, #0]
 800bcd4:	bd38      	pop	{r3, r4, r5, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20000af8 	.word	0x20000af8

0800bcdc <memcpy>:
 800bcdc:	440a      	add	r2, r1
 800bcde:	4291      	cmp	r1, r2
 800bce0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bce4:	d100      	bne.n	800bce8 <memcpy+0xc>
 800bce6:	4770      	bx	lr
 800bce8:	b510      	push	{r4, lr}
 800bcea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcf2:	4291      	cmp	r1, r2
 800bcf4:	d1f9      	bne.n	800bcea <memcpy+0xe>
 800bcf6:	bd10      	pop	{r4, pc}

0800bcf8 <_realloc_r>:
 800bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfc:	4607      	mov	r7, r0
 800bcfe:	4614      	mov	r4, r2
 800bd00:	460d      	mov	r5, r1
 800bd02:	b921      	cbnz	r1, 800bd0e <_realloc_r+0x16>
 800bd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd08:	4611      	mov	r1, r2
 800bd0a:	f7ff b877 	b.w	800adfc <_malloc_r>
 800bd0e:	b92a      	cbnz	r2, 800bd1c <_realloc_r+0x24>
 800bd10:	f7ff fbb8 	bl	800b484 <_free_r>
 800bd14:	4625      	mov	r5, r4
 800bd16:	4628      	mov	r0, r5
 800bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1c:	f000 f81a 	bl	800bd54 <_malloc_usable_size_r>
 800bd20:	4284      	cmp	r4, r0
 800bd22:	4606      	mov	r6, r0
 800bd24:	d802      	bhi.n	800bd2c <_realloc_r+0x34>
 800bd26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd2a:	d8f4      	bhi.n	800bd16 <_realloc_r+0x1e>
 800bd2c:	4621      	mov	r1, r4
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f7ff f864 	bl	800adfc <_malloc_r>
 800bd34:	4680      	mov	r8, r0
 800bd36:	b908      	cbnz	r0, 800bd3c <_realloc_r+0x44>
 800bd38:	4645      	mov	r5, r8
 800bd3a:	e7ec      	b.n	800bd16 <_realloc_r+0x1e>
 800bd3c:	42b4      	cmp	r4, r6
 800bd3e:	4622      	mov	r2, r4
 800bd40:	4629      	mov	r1, r5
 800bd42:	bf28      	it	cs
 800bd44:	4632      	movcs	r2, r6
 800bd46:	f7ff ffc9 	bl	800bcdc <memcpy>
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7ff fb99 	bl	800b484 <_free_r>
 800bd52:	e7f1      	b.n	800bd38 <_realloc_r+0x40>

0800bd54 <_malloc_usable_size_r>:
 800bd54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd58:	1f18      	subs	r0, r3, #4
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bfbc      	itt	lt
 800bd5e:	580b      	ldrlt	r3, [r1, r0]
 800bd60:	18c0      	addlt	r0, r0, r3
 800bd62:	4770      	bx	lr

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
